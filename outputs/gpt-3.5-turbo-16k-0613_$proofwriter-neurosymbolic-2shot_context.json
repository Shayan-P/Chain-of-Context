[["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If something needs an animal, then that animal is needed.\nFOL: all x. all y. (Needs(x, y) -> Needs(y, x))\nPremise: If something eats an animal, then that animal is eaten.\nFOL: all x. all y. (Eats(x, y) -> Eats(y, x))\nPremise: If something sees an animal, then that animal is seen.\nFOL: all x. all y. (Sees(x, y) -> Sees(y, x))\nPremise: If something is round, then it is a shape.\nFOL: all x. (Round(x) -> Shape(x))\nPremise: If something is cold, then it is not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\nPremise: If something is young, then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\nPremise: If something is eaten by a bear and needs a rabbit, then it is eaten by the tiger.\nFOL: all x. (Eats(Bear, x) & Needs(x, Rabbit) -> Eats(Tiger, x))\nPremise: If something sees a rabbit, then it is eaten by the bear.\nFOL: all x. (Sees(x, Rabbit) -> Eats(x, Bear))\nPremise: If something eats the bear and sees the rabbit, then it eats the dog.\nFOL: all x. (Eats(x, Bear) & Sees(x, Rabbit) -> Eats(x, Dog))\nPremise: If something eats the dog, then it eats the bear.\nFOL: all x. (Eats(x, Dog) -> Eats(x, Bear))\nPremise: If something eats the dog, then it needs the tiger.\nFOL: all x. (Eats(x, Dog) -> Needs(x, Tiger))\nPremise: If something eats the tiger, then it is cold.\nFOL: all x. (Eats(x, Tiger) -> Cold(x))\nPremise: If something eats the rabbit, then it is round.\nFOL: all x. (Eats(x, Rabbit) -> Round(x))\nPremise: If something sees the rabbit, then it is seen by the tiger.\nFOL: all x. (Sees(x, Rabbit) -> Sees(Tiger, x))\nPremise: If something sees the dog, then it is seen by the rabbit.\nFOL: all x. (Sees(x, Dog) -> Sees(Rabbit, x))\nPremise: If something sees the dog, then it eats the rabbit.\nFOL: all x. (Sees(x, Dog) -> Eats(x, Rabbit))\nPremise: If something sees the dog, then it sees the bear.\nFOL: all x. (Sees(x, Dog) -> Sees(x, Bear))\nPremise: If something sees the rabbit, then it sees the bear.\nFOL: all x. (Sees(x, Rabbit) -> Sees(x, Bear))\nPremise: If something sees the rabbit, then it eats the bear.\nFOL: all x. (Sees(x, Rabbit) -> Eats(x, Bear))"], ["Premise: All quiet people are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nPremise: If someone is nice then they are round.\nFOL: all x. (Nice(x) -> Round(x))\n\nPremise: If someone is round then they are cold.\nFOL: all x. (Round(x) -> Cold(x))\n\nPremise: If Erin is nice then Erin is round.\nFOL: (Nice(Erin) -> Round(Erin))\n\nPremise: If Erin is round then Erin is cold.\nFOL: (Round(Erin) -> Cold(Erin))\n\nPremise: If Gary is nice then Gary is round.\nFOL: (Nice(Gary) -> Round(Gary))\n\nPremise: If Gary is round then Gary is cold.\nFOL: (Round(Gary) -> Cold(Gary))\n\nPremise: If Fiona is nice then Fiona is round.\nFOL: (Nice(Fiona) -> Round(Fiona))\n\nPremise: If Fiona is round then Fiona is cold.\nFOL: (Round(Fiona) -> Cold(Fiona))\n\nPremise: If Harry is nice then Harry is round.\nFOL: (Nice(Harry) -> Round(Harry))\n\nPremise: If Harry is round then Harry is cold.\nFOL: (Round(Harry) -> Cold(Harry))\n\nPremise: If Harry is nice then Harry is quiet.\nFOL: (Nice(Harry) -> Quiet(Harry))\n\nPremise: If Harry is round then Harry is quiet.\nFOL: (Round(Harry) -> Quiet(Harry))\n\nPremise: If Harry is nice then Harry is white.\nFOL: (Nice(Harry) -> White(Harry))\n\nPremise: If Harry is round then Harry is white.\nFOL: (Round(Harry) -> White(Harry))\n\nPremise: If Harry is nice then Harry is green.\nFOL: (Nice(Harry) -> Green(Harry))\n\nPremise: If Harry is round then Harry is green.\nFOL: (Round(Harry) -> Green(Harry))\n\nPremise: If Harry is quiet then Harry is not white.\nFOL: (Quiet(Harry) -> -White(Harry))\n\nPremise: If Harry is quiet then Harry is not green.\nFOL: (Quiet(Harry) -> -Green(Harry))\n\nPremise: If Harry is nice and quiet then Harry is cold.\nFOL: (Nice(Harry) & Quiet(Harry) -> Cold(Harry))\n\nPremise: If Harry is nice and green then Harry is cold.\nFOL: (Nice(Harry) & Green(Harry) -> Cold(Harry))\n\nPremise: If Harry is quiet and round then Harry is cold.\nFOL: (Quiet(Harry) & Round(Harry) -> Cold(Harry))\n\nPremise: If Harry is quiet and white then Harry is cold.\nFOL: (Quiet(Harry) & White(Harry) -> Cold(Harry))\n\nPremise: If Harry is quiet and green then Harry is cold.\nFOL: (Quiet(Harry) & Green(Harry) -> Cold(Harry))\n\nPremise: If Harry is quiet and round then Harry is nice.\nFOL: (Quiet(Harry) & Round(Harry) -> Nice(Harry))\n\nPremise: If Harry is quiet and white then Harry is nice.\nFOL: (Quiet(Harry) & White(Harry) -> Nice(Harry))\n\nPremise: If Harry is quiet and green then Harry is nice.\nFOL: (Quiet(Harry) & Green(Harry) -> Nice(Harry))\n\nPremise: If Harry is round and white then Harry is nice.\nFOL: (Round(Harry) & White(Harry) -> Nice(Harry))\n\nPremise: If Harry is round and green then Harry is nice.\nFOL: (Round(Harry) & Green(Harry) -> Nice(Harry))\n\nPremise: If Harry is white and green then Harry is nice.\nFOL: (White(Harry) & Green(Harry) -> Nice(Harry))\n\nPremise: If Harry is nice and quiet then Harry is round.\nFOL: (Nice(Harry) & Quiet(Harry) -> Round(Harry))\n\nPremise: If Harry is nice and white then Harry is round.\nFOL: (Nice(Harry) & White(Harry) -> Round(Harry))\n\nPremise: If Harry is nice and green then Harry is round.\nFOL: (Nice(Harry) & Green(Harry) -> Round(Harry))\n\nPremise: If Harry is nice and quiet then Harry is white.\nFOL: (Nice(Harry) & Quiet(Harry) -> White(Harry))\n\nPremise: If Harry is nice and round then Harry is white.\nFOL: (Nice(Harry) & Round(Harry) -> White(Harry))\n\nPremise: If Harry is nice and green then Harry is white.\nFOL: (Nice(Harry) & Green(Harry) -> White(Harry))\n\nPremise: If Harry is nice and quiet then Harry is green.\nFOL: (Nice(Harry) & Quiet(Harry) -> Green(Harry))\n\nPremise: If Harry is nice and round then Harry is green.\nFOL: (Nice(Harry) & Round(Harry) -> Green(Harry))\n\nPremise: If Harry is nice and white then Harry is green.\nFOL: (Nice(Harry) & White(Harry) -> Green(Harry))\n\nPremise: If Harry is quiet and round then Harry is white.\nFOL: (Quiet(Harry) & Round(Harry) -> White(Harry))\n\nPremise: If Harry is quiet and green then Harry is white.\nFOL: (Quiet(Harry) & Green(Harry) -> White(Harry))\n\nPremise: If Harry is round and white then Harry is green.\nFOL: (Round(Harry) & White(Harry) -> Green(Harry))\n\nPremise: If Harry is nice and quiet then Harry is not cold.\nFOL: (Nice(Harry) & Quiet(Harry) -> -Cold(Harry))\n\nPremise: If Harry is nice and round then Harry is not cold.\nFOL: (Nice(Harry) & Round(Harry) -> -Cold(Harry))\n\nPremise: If Harry is nice and white then Harry is not cold.\nFOL: (Nice(Harry) & White(Harry) -> -Cold(Harry))\n\nPremise: If Harry is nice and green then Harry is not cold.\nFOL: (Nice(Harry) & Green(Harry) -> -Cold(Harry))\n\nPremise: If Harry is quiet and round then Harry is not cold.\nFOL: (Quiet(Harry) & Round(Harry) -> -Cold(Harry))\n\nPremise: If Harry is quiet and white then Harry is not cold.\nFOL: (Quiet(Harry) & White(Harry) -> -Cold(Harry))\n\nPremise: If Harry is quiet and green then Harry is not cold.\nFOL: (Quiet(Harry) & Green(Harry) -> -Cold(Harry))\n\nPremise: If Harry is round and white then Harry is not cold.\nFOL: (Round(Harry) & White(Harry) -> -Cold(Harry))\n\nPremise: If Harry is round and green then Harry is not cold.\nFOL: (Round(Harry) & Green(Harry) -> -Cold(Harry))\n\nPremise: If Harry is white and green then Harry is not cold.\nFOL: (White(Harry) & Green(Harry) -> -Cold(Harry))\n\nPremise: If Harry is nice and quiet then Harry is not round.\nFOL: (Nice(Harry) & Quiet(Harry) -> -Round(Harry))\n\nPremise: If Harry is nice and white then Harry is not round.\nFOL: (Nice(Harry) & White(Harry) -> -Round(Harry))\n\nPremise: If Harry is nice and green then Harry is not round.\nFOL: (Nice(Harry) & Green(Harry) -> -Round(Harry))\n\nPremise: If Harry is quiet and white then Harry is not round.\nFOL: (Quiet(Harry) & White(Harry) -> -Round(Harry))\n\nPremise: If Harry is quiet and green then Harry is not round.\nFOL: (Quiet(Harry) & Green(Harry) -> -Round(Harry))\n\nPremise: If Harry is round and white then Harry is not round.\nFOL: (Round(Harry) & White(Harry) -> -Round(Harry))\n\nPremise: If Harry is round and green then Harry is not round.\nFOL: (Round(Harry) & Green(Harry) -> -Round(Harry))\n\nPremise: If Harry is white and green then Harry is not round.\nFOL: (White(Harry) & Green(Harry) -> -Round(Harry))\n\nPremise: If Harry is nice and quiet then Harry is not white.\nFOL: (Nice(Harry) & Quiet(Harry) -> -White(Harry))\n\nPremise: If Harry is nice and round then Harry is not white.\nFOL: (Nice(Harry) & Round(Harry) -> -White(Harry))\n\nPremise: If Harry is nice and green then Harry is not white.\nFOL: (Nice(Harry) & Green(Harry) -> -White(Harry))\n\nPremise: If Harry is quiet and round then Harry is not white.\nFOL: (Quiet(Harry) & Round(Harry) -> -White(Harry))\n\nPremise: If Harry is quiet and green then Harry is not white.\nFOL: (Quiet(Harry) & Green(Harry) -> -White(Harry))\n\nPremise: If Harry is round and white then Harry is not white.\nFOL: (Round(Harry) & White(Harry) -> -White(Harry))\n\nPremise: If Harry is round and green then Harry is not white.\nFOL: (Round(Harry) & Green(Harry) -> -White(Harry))\n\nPremise: If Harry is white and green then Harry is not white.\nFOL: (White(Harry) & Green(Harry) -> -White(Harry))\n\nPremise: If Harry is nice and quiet then Harry is not green.\nFOL: (Nice(Harry) & Quiet(Harry) -> -Green(Harry))\n\nPremise: If Harry is nice and round then Harry is not green.\nFOL: (Nice(Harry) & Round(Harry) -> -Green(Harry))\n\nPremise: If Harry is nice and white then Harry is not green.\nFOL: (Nice(Harry) & White(Harry) -> -Green(Harry))\n\nPremise: If Harry is quiet and round then Harry is not green.\nFOL: (Quiet(Harry) & Round(Harry) -> -Green(Harry))\n\nPremise: If Harry is quiet and white then Harry is not green.\nFOL: (Quiet(Harry) & White(Harry) -> -Green(Harry))\n\nPremise: If Harry is round and white then Harry is not green.\nFOL: (Round(Harry) & White(Harry) -> -Green(Harry))\n\nPremise: If Harry is round and green then Harry is not green.\nFOL: (Round(Harry) & Green(Harry) -> -Green(Harry))\n\nPremise: If Harry is white and green then Harry is not green.\nFOL: (White(Harry) & Green(Harry) -> -Green(Harry))"], ["Premise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is cold.\nFOL: Cold(Charlie)\nPremise: Dave is rough.\nFOL: Rough(Dave)\nPremise: Dave is red.\nFOL: Red(Dave)\nPremise: Fiona is rough.\nFOL: Rough(Fiona)\nPremise: Harry is rough.\nFOL: Rough(Harry)\nPremise: Harry is kind.\nFOL: Kind(Harry)\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\nPremise: Furry things are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\nPremise: If Fiona is furry then Fiona is kind.\nFOL: Furry(Fiona) -> Kind(Fiona)\nPremise: Rough, kind things are furry.\nFOL: all x. (Rough(x) & Kind(x) -> Furry(x))\nPremise: White things are kind.\nFOL: all x. (White(x) -> Kind(x))\nPremise: Fiona is white.\nFOL: White(Fiona)\nPremise: Charlie is kind and rough.\nFOL: Kind(Charlie) & Rough(Charlie)\nPremise: Charlie is kind and furry.\nFOL: Kind(Charlie) & Furry(Charlie)\nPremise: Charlie is kind and red.\nFOL: Kind(Charlie) & Red(Charlie)\nPremise: Charlie is kind and cold.\nFOL: Kind(Charlie) & Cold(Charlie)\nPremise: Charlie is kind and nice.\nFOL: Kind(Charlie) & Nice(Charlie)\nPremise: Charlie is rough and furry.\nFOL: Rough(Charlie) & Furry(Charlie)\nPremise: Charlie is rough and red.\nFOL: Rough(Charlie) & Red(Charlie)\nPremise: Charlie is rough and cold.\nFOL: Rough(Charlie) & Cold(Charlie)\nPremise: Charlie is rough and nice.\nFOL: Rough(Charlie) & Nice(Charlie)\nPremise: Charlie is furry and red.\nFOL: Furry(Charlie) & Red(Charlie)\nPremise: Charlie is furry and cold.\nFOL: Furry(Charlie) & Cold(Charlie)\nPremise: Charlie is furry and nice.\nFOL: Furry(Charlie) & Nice(Charlie)\nPremise: Charlie is red and cold.\nFOL: Red(Charlie) & Cold(Charlie)\nPremise: Charlie is red and nice.\nFOL: Red(Charlie) & Nice(Charlie)\nPremise: Charlie is cold and nice.\nFOL: Cold(Charlie) & Nice(Charlie)\nPremise: Dave is rough and red.\nFOL: Rough(Dave) & Red(Dave)\nPremise: Dave is rough and cold.\nFOL: Rough(Dave) & Cold(Dave)\nPremise: Dave is rough and nice.\nFOL: Rough(Dave) & Nice(Dave)\nPremise: Dave is red and cold.\nFOL: Red(Dave) & Cold(Dave)\nPremise: Dave is red and nice.\nFOL: Red(Dave) & Nice(Dave)\nPremise: Dave is cold and nice.\nFOL: Cold(Dave) & Nice(Dave)\nPremise: Fiona is rough and red.\nFOL: Rough(Fiona) & Red(Fiona)\nPremise: Fiona is rough and cold.\nFOL: Rough(Fiona) & Cold(Fiona)\nPremise: Fiona is rough and nice.\nFOL: Rough(Fiona) & Nice(Fiona)\nPremise: Fiona is red and cold.\nFOL: Red(Fiona) & Cold(Fiona)\nPremise: Fiona is red and nice.\nFOL: Red(Fiona) & Nice(Fiona)\nPremise: Fiona is cold and nice.\nFOL: Cold(Fiona) & Nice(Fiona)\nPremise: Harry is rough and red.\nFOL: Rough(Harry) & Red(Harry)\nPremise: Harry is rough and cold.\nFOL: Rough(Harry) & Cold(Harry)\nPremise: Harry is rough and nice.\nFOL: Rough(Harry) & Nice(Harry)\nPremise: Harry is red and cold.\nFOL: Red(Harry) & Cold(Harry)\nPremise: Harry is red and nice.\nFOL: Red(Harry) & Nice(Harry)\nPremise: Harry is cold and nice.\nFOL: Cold(Harry) & Nice(Harry)"], ["Premise: Charlie is blue.\nFOL: Blue(Charlie)\n\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Fiona is blue.\nFOL: Blue(Fiona)\n\nPremise: Fiona is nice.\nFOL: Nice(Fiona)\n\nPremise: Harry is blue.\nFOL: Blue(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))"], ["Premise: Dave is a living being.\nFOL: LivingBeing(Dave)\n\nPremise: Erin is a living being.\nFOL: LivingBeing(Erin)\n\nPremise: Fiona is a living being.\nFOL: LivingBeing(Fiona)\n\nPremise: Gary is a living being.\nFOL: LivingBeing(Gary)\n\nPremise: All furry things are living beings.\nFOL: all x. (Furry(x) -> LivingBeing(x))\n\nPremise: All kind things are living beings.\nFOL: all x. (Kind(x) -> LivingBeing(x))\n\nPremise: All green things are living beings.\nFOL: all x. (Green(x) -> LivingBeing(x))\n\nPremise: All round things are living beings.\nFOL: all x. (Round(x) -> LivingBeing(x))\n\nPremise: All young things are living beings.\nFOL: all x. (Young(x) -> LivingBeing(x))\n\nPremise: All big things are living beings.\nFOL: all x. (Big(x) -> LivingBeing(x))\n\nPremise: All white things are living beings.\nFOL: all x. (White(x) -> LivingBeing(x))"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\n\nPremise: The bear is an animal.\nFOL: Animal(Bear)\n\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\n\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\n\nPremise: If something is round and it chases the mouse, then it is not red.\nFOL: all x. (Round(x) & Chases(x, Mouse) -> -Red(x))\n\nPremise: If something needs the tiger and the tiger eats the mouse, then it chases the mouse.\nFOL: all x. (Needs(x, Tiger) & Eats(Tiger, Mouse) -> Chases(x, Mouse))\n\nPremise: If something is red and it chases the mouse, then it does not eat the tiger.\nFOL: all x. (Red(x) & Chases(x, Mouse) -> -Eats(x, Tiger))\n\nPremise: If something is red and it chases the mouse, then it does not eat the bear.\nFOL: all x. (Red(x) & Chases(x, Mouse) -> -Eats(x, Bear))\n\nPremise: If something is red and it chases the mouse, then it does not eat the mouse.\nFOL: all x. (Red(x) & Chases(x, Mouse) -> -Eats(x, Mouse))\n\nPremise: If something is round and it chases the mouse, then it does not need the mouse.\nFOL: all x. (Round(x) & Chases(x, Mouse) -> -Needs(x, Mouse))\n\nPremise: If something is round and it chases the tiger, then it does not eat the tiger.\nFOL: all x. (Round(x) & Chases(x, Tiger) -> -Eats(x, Tiger))\n\nPremise: If something is round and it chases the bear, then it does not eat the bear.\nFOL: all x. (Round(x) & Chases(x, Bear) -> -Eats(x, Bear))\n\nPremise: If something is round and it chases the bald eagle, then it does not eat the bald eagle.\nFOL: all x. (Round(x) & Chases(x, BaldEagle) -> -Eats(x, BaldEagle))\n\nPremise: If something is round and it needs the mouse, then it does not eat the mouse.\nFOL: all x. (Round(x) & Needs(x, Mouse) -> -Eats(x, Mouse))\n\nPremise: If something is round and it needs the tiger, then it does not eat the tiger.\nFOL: all x. (Round(x) & Needs(x, Tiger) -> -Eats(x, Tiger))\n\nPremise: If something is round and it needs the bear, then it does not eat the bear.\nFOL: all x. (Round(x) & Needs(x, Bear) -> -Eats(x, Bear))\n\nPremise: If something is round and it needs the bald eagle, then it does not eat the bald eagle.\nFOL: all x. (Round(x) & Needs(x, BaldEagle) -> -Eats(x, BaldEagle))\n\nPremise: If something is round and it chases the tiger, then it needs the tiger.\nFOL: all x. (Round(x) & Chases(x, Tiger) -> Needs(x, Tiger))\n\nPremise: If something is round and it chases the bear, then it needs the bear.\nFOL: all x. (Round(x) & Chases(x, Bear) -> Needs(x, Bear))\n\nPremise: If something is round and it chases the bald eagle, then it needs the bald eagle.\nFOL: all x. (Round(x) & Chases(x, BaldEagle) -> Needs(x, BaldEagle))\n\nPremise: If something is round and it chases the mouse, then it needs the mouse.\nFOL: all x. (Round(x) & Chases(x, Mouse) -> Needs(x, Mouse))\n\nPremise: The bear does not chase the bald eagle.\nFOL: -Chases(Bear, BaldEagle)\n\nPremise: The tiger does not chase the bald eagle.\nFOL: -Chases(Tiger, BaldEagle)\n\nPremise: The tiger does not chase the bear.\nFOL: -Chases(Tiger, Bear)\n\nPremise: The tiger does not chase the mouse.\nFOL: -Chases(Tiger, Mouse)\n\nPremise: The bear does not chase the tiger.\nFOL: -Chases(Bear, Tiger)\n\nPremise: The mouse does not chase the tiger.\nFOL: -Chases(Mouse, Tiger)\n\nPremise: The mouse does not chase the bear.\nFOL: -Chases(Mouse, Bear)\n\nPremise: The bald eagle does not chase the tiger.\nFOL: -Chases(BaldEagle, Tiger)\n\nPremise: The bald eagle does not chase the bear.\nFOL: -Chases(BaldEagle, Bear)\n\nPremise: The bald eagle does not chase the mouse.\nFOL: -Chases(BaldEagle, Mouse)\n\nPremise: If something needs the tiger, then it chases the tiger.\nFOL: all x. (Needs(x, Tiger) -> Chases(x, Tiger))\n\nPremise: If something needs the bear, then it chases the bear.\nFOL: all x. (Needs(x, Bear) -> Chases(x, Bear))\n\nPremise: If something needs the bald eagle, then it chases the bald eagle.\nFOL: all x. (Needs(x, BaldEagle) -> Chases(x, BaldEagle))\n\nPremise: If something needs the mouse, then it chases the mouse.\nFOL: all x. (Needs(x, Mouse) -> Chases(x, Mouse))\n\nPremise: If something needs the tiger, then it does not eat the tiger.\nFOL: all x. (Needs(x, Tiger) -> -Eats(x, Tiger))\n\nPremise: If something needs the bear, then it does not eat the bear.\nFOL: all x. (Needs(x, Bear) -> -Eats(x, Bear))\n\nPremise: If something needs the bald eagle, then it does not eat the bald eagle.\nFOL: all x. (Needs(x, BaldEagle) -> -Eats(x, BaldEagle))\n\nPremise: If something needs the mouse, then it does not eat the mouse.\nFOL: all x. (Needs(x, Mouse) -> -Eats(x, Mouse))\n\nPremise: If something chases the tiger, then it does not eat the tiger.\nFOL: all x. (Chases(x, Tiger) -> -Eats(x, Tiger))\n\nPremise: If something chases the bear, then it does not eat the bear.\nFOL: all x. (Chases(x, Bear) -> -Eats(x, Bear))\n\nPremise: If something chases the bald eagle, then it does not eat the bald eagle.\nFOL: all x. (Chases(x, BaldEagle) -> -Eats(x, BaldEagle))\n\nPremise: If something chases the mouse, then it does not eat the mouse.\nFOL: all x. (Chases(x, Mouse) -> -Eats(x, Mouse))\n\nPremise: The tiger is not round.\nFOL: -Round(Tiger)\n\nPremise: The bear is not round.\nFOL: -Round(Bear)\n\nPremise: The bald eagle is not round.\nFOL: -Round(BaldEagle)\n\nPremise: The mouse is not round.\nFOL: -Round(Mouse)\n\nPremise: The tiger is not red.\nFOL: -Red(Tiger)\n\nPremise: The bear is not red.\nFOL: -Red(Bear)\n\nPremise: The bald eagle is not red.\nFOL: -Red(BaldEagle)\n\nPremise: The mouse is not red.\nFOL: -Red(Mouse)\n\nPremise: The tiger does not need the mouse.\nFOL: -Needs(Tiger, Mouse)\n\nPremise: The bear does not need the mouse.\nFOL: -Needs(Bear, Mouse)\n\nPremise: The bald eagle does not need the tiger.\nFOL: -Needs(BaldEagle, Tiger)\n\nPremise: The mouse does not need the tiger.\nFOL: -Needs(Mouse, Tiger)\n\nPremise: The tiger does not need the bear.\nFOL: -Needs(Tiger, Bear)\n\nPremise: The bald eagle does not need the bear.\nFOL: -Needs(BaldEagle, Bear)\n\nPremise: The mouse does not need the bear.\nFOL: -Needs(Mouse, Bear)\n\nPremise: The tiger does not need the bald eagle.\nFOL: -Needs(Tiger, BaldEagle)\n\nPremise: The bear does not need the bald eagle.\nFOL: -Needs(Bear, BaldEagle)\n\nPremise: The mouse does not need the bald eagle.\nFOL: -Needs(Mouse, BaldEagle)"], ["Premise: Anne is a person.\nFOL: Person(Anne)\nPremise: Erin is a person.\nFOL: Person(Erin)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: If something is nice then it is not rough.\nFOL: all x. (Nice(x) -> -Rough(x))\nPremise: If something is green then it is not rough.\nFOL: all x. (Green(x) -> -Rough(x))\nPremise: If something is white and green then it is not smart.\nFOL: all x. (White(x) & Green(x) -> -Smart(x))\nPremise: If Anne is rough then Anne is not green.\nFOL: Rough(Anne) -> -Green(Anne)\nPremise: If something is big then it is not quiet.\nFOL: all x. (Big(x) -> -Quiet(x))\nPremise: If something is nice and white then it is not quiet.\nFOL: all x. (Nice(x) & White(x) -> -Quiet(x))\nPremise: If something is green and smart then it is not big.\nFOL: all x. (Green(x) & Smart(x) -> -Big(x))\nPremise: If something is quiet and rough then it is not white.\nFOL: all x. (Quiet(x) & Rough(x) -> -White(x))"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If someone visits the dog, then they visit an animal.\nFOL: all x. (Visits(x, dog) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the lion, then they visit an animal.\nFOL: all x. (Visits(x, lion) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the mouse, then they visit an animal.\nFOL: all x. (Visits(x, mouse) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger, then they visit an animal.\nFOL: all x. (Visits(x, tiger) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone needs the lion, then they need an animal.\nFOL: all x. (Needs(x, lion) -> exists y. Animal(y) & Needs(x, y))\n\nPremise: If someone needs the mouse, then they need an animal.\nFOL: all x. (Needs(x, mouse) -> exists y. Animal(y) & Needs(x, y))\n\nPremise: If someone needs the tiger, then they need an animal.\nFOL: all x. (Needs(x, tiger) -> exists y. Animal(y) & Needs(x, y))\n\nPremise: If someone eats the lion, then they eat an animal.\nFOL: all x. (Eats(x, lion) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone eats the mouse, then they eat an animal.\nFOL: all x. (Eats(x, mouse) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone eats the tiger, then they eat an animal.\nFOL: all x. (Eats(x, tiger) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone visits the dog and the dog visits the lion, then they visit an animal.\nFOL: all x. (Visits(x, dog) & Visits(dog, lion) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the dog and the dog visits the mouse, then they visit an animal.\nFOL: all x. (Visits(x, dog) & Visits(dog, mouse) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the dog and the dog visits the tiger, then they visit an animal.\nFOL: all x. (Visits(x, dog) & Visits(dog, tiger) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the lion and the lion visits the mouse, then they visit an animal.\nFOL: all x. (Visits(x, lion) & Visits(lion, mouse) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the lion and the lion visits the tiger, then they visit an animal.\nFOL: all x. (Visits(x, lion) & Visits(lion, tiger) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the mouse and the mouse visits the tiger, then they visit an animal.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, tiger) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the mouse and the mouse visits the lion, then they visit an animal.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, lion) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger and the tiger visits the dog, then they visit an animal.\nFOL: all x. (Visits(x, tiger) & Visits(tiger, dog) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger and the tiger visits the lion, then they visit an animal.\nFOL: all x. (Visits(x, tiger) & Visits(tiger, lion) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger and the tiger visits the mouse, then they visit an animal.\nFOL: all x. (Visits(x, tiger) & Visits(tiger, mouse) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone eats the mouse and the mouse is blue, then they eat an animal.\nFOL: all x. ((Eats(x, mouse) & Blue(mouse)) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone eats the mouse and the mouse is rough, then they eat an animal.\nFOL: all x. ((Eats(x, mouse) & Rough(mouse)) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone eats the lion and the lion is round, then they eat an animal.\nFOL: all x. ((Eats(x, lion) & Round(lion)) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone eats the tiger and the tiger is round, then they eat an animal.\nFOL: all x. ((Eats(x, tiger) & Round(tiger)) -> exists y. Animal(y) & Eats(x, y))\n\nPremise: If someone needs the lion and the lion is round, then they need an animal.\nFOL: all x. ((Needs(x, lion) & Round(lion)) -> exists y. Animal(y) & Needs(x, y))\n\nPremise: If someone needs the mouse and the mouse is round, then they need an animal.\nFOL: all x. ((Needs(x, mouse) & Round(mouse)) -> exists y. Animal(y) & Needs(x, y))\n\nPremise: If someone needs the tiger and the tiger is round, then they need an animal.\nFOL: all x. ((Needs(x, tiger) & Round(tiger)) -> exists y. Animal(y) & Needs(x, y))\n\nPremise: If someone visits the lion and the lion is rough, then they visit an animal.\nFOL: all x. ((Visits(x, lion) & Rough(lion)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the lion and the lion is blue, then they visit an animal.\nFOL: all x. ((Visits(x, lion) & Blue(lion)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the lion and the lion is red, then they visit an animal.\nFOL: all x. ((Visits(x, lion) & Red(lion)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger and the tiger is rough, then they visit an animal.\nFOL: all x. ((Visits(x, tiger) & Rough(tiger)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger and the tiger is blue, then they visit an animal.\nFOL: all x. ((Visits(x, tiger) & Blue(tiger)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the tiger and the tiger is red, then they visit an animal.\nFOL: all x. ((Visits(x, tiger) & Red(tiger)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the dog and the dog is round, then they visit an animal.\nFOL: all x. ((Visits(x, dog) & Round(dog)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the dog and the dog is blue, then they visit an animal.\nFOL: all x. ((Visits(x, dog) & Blue(dog)) -> exists y. Animal(y) & Visits(x, y))\n\nPremise: If someone visits the dog and the dog is red, then they visit an animal.\nFOL: all x. ((Visits(x, dog) & Red(dog)) -> exists y. Animal(y) & Visits(x, y))"], ["Premise: Bob is big.\nFOL: Big(Bob)\n\nPremise: Erin is big.\nFOL: Big(Erin)\n\nPremise: Harry is not furry.\nFOL: -Furry(Harry)\n\nPremise: Harry is not white.\nFOL: -White(Harry)\n\nPremise: If someone is furry and kind, then they are smart.\nFOL: all x. (Furry(x) & Kind(x) -> Smart(x))\n\nPremise: If someone is kind and white, then they are young.\nFOL: all x. (Kind(x) & White(x) -> Young(x))\n\nPremise: If someone is smart and young, then they are not rough.\nFOL: all x. (Smart(x) & Young(x) -> -Rough(x))\n\nPremise: If someone is smart and rough, then they are not furry.\nFOL: all x. (Smart(x) & Rough(x) -> -Furry(x))\n\nPremise: If someone is young and big, then they are not furry.\nFOL: all x. (Young(x) & Big(x) -> -Furry(x))\n\nPremise: If someone is furry and kind, then they are not rough.\nFOL: all x. (Furry(x) & Kind(x) -> -Rough(x))\n\nPremise: If someone is furry and not rough, then they are not smart.\nFOL: all x. (Furry(x) & -Rough(x) -> -Smart(x))\n\nPremise: If someone is rough and furry, then they are not kind.\nFOL: all x. (Rough(x) & Furry(x) -> -Kind(x))"], ["Premise: The bear is an animal.\nFOL: Animal(Bear)\n\nPremise: The cat is an animal.\nFOL: Animal(Cat)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The dog is an animal.\nFOL: Animal(Dog)\n\nPremise: If someone is an animal and they see another animal, then they are aware of their presence.\nFOL: all x, y. (Animal(x) & Animal(y) & See(x, y) -> Aware(x, y))\n\nPremise: If someone is aware of the presence of another animal, then they do not get surprised by their presence.\nFOL: all x, y. (Aware(x, y) -> -Surprised(x, y))\n\nPremise: If someone gets surprised by the presence of another animal, then they react in some way.\nFOL: all x, y. (Surprised(x, y) -> React(x, y))\n\nPremise: If someone reacts to the presence of another animal, then they might run away.\nFOL: all x, y. (React(x, y) -> RunAway(x, y))\n\nPremise: If someone runs away from another animal, then they try to avoid any potential harm.\nFOL: all x, y. (RunAway(x, y) -> AvoidHarm(x, y))\n\nPremise: If someone avoids any potential harm, then they prioritize their own safety.\nFOL: all x, y. (AvoidHarm(x, y) -> PrioritizeSafety(x))"], ["Premise: Anne is not young.\nFOL: -Young(Anne)\nPremise: Anne is not round.\nFOL: -Round(Anne)\nPremise: Anne is not green.\nFOL: -Green(Anne)\nPremise: Dave is not cold.\nFOL: -Cold(Dave)\nPremise: Gary is not round.\nFOL: -Round(Gary)\nPremise: Harry is not big.\nFOL: -Big(Harry)\nPremise: Harry is not round.\nFOL: -Round(Harry)\nPremise: Harry is not green.\nFOL: -Green(Harry)\nPremise: Kind things are not cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nPremise: If Dave is big then Dave is not cold.\nFOL: all x. (Big(x) -> -Cold(x))\nPremise: If something is young then it is not round.\nFOL: all x. (Young(x) -> -Round(x))\nPremise: Round, cold things are not young.\nFOL: all x. (Round(x) & Cold(x) -> -Young(x))\nPremise: All kind, young things are not smart.\nFOL: all x. (Kind(x) & Young(x) -> -Smart(x))\nPremise: Kind, green things are not round.\nFOL: all x. (Kind(x) & Green(x) -> -Round(x))\nPremise: Young, round things are not green.\nFOL: all x. (Young(x) & Round(x) -> -Green(x))\nPremise: If Harry is young and Harry is cold then Harry is not green.\nFOL: all x. (Young(x) & Cold(x) -> -Green(x))\nPremise: Young, green things are not kind.\nFOL: all x. (Young(x) & Green(x) -> -Kind(x))\nPremise: Anne is not big and Anne is not round and Anne is not green.\nFOL: -Big(Anne) & -Round(Anne) & -Green(Anne)"], ["Premise: Fiona is nice.\nFOL: Nice(Fiona)\nPremise: Fiona is smart.\nFOL: Smart(Fiona)\nPremise: Fiona is young.\nFOL: Young(Fiona)\nPremise: Gary is round.\nFOL: Round(Gary)\nPremise: Gary is white.\nFOL: White(Gary)\nPremise: Harry is nice.\nFOL: Nice(Harry)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: Harry is young.\nFOL: Young(Harry)"], ["Premise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If someone is an animal, then they are not a book.\nFOL: all x. (Animal(x) -> -Book(x))\nPremise: If someone is an animal, then they are not a politician.\nFOL: all x. (Animal(x) -> -Politician(x))\nPremise: If someone is an animal, then they are not knowledge.\nFOL: all x. (Animal(x) -> -Knowledge(x))\nPremise: If someone is an animal, then they are not round.\nFOL: all x. (Animal(x) -> -Round(x))\nPremise: If someone is an animal, then they are not warm.\nFOL: all x. (Animal(x) -> -Warm(x))\nPremise: If someone is an animal, then they are not good.\nFOL: all x. (Animal(x) -> -Good(x))\nPremise: If someone is an animal, then they are not big.\nFOL: all x. (Animal(x) -> -Big(x))\nPremise: If someone is an animal, then they are not red.\nFOL: all x. (Animal(x) -> -Red(x))\nPremise: If someone is an animal, then they do not visit the dog.\nFOL: all x. (Animal(x) -> -Visit(x, Dog))\nPremise: If someone is an animal, then they do not see the lion.\nFOL: all x. (Animal(x) -> -See(x, Lion))\nPremise: If someone is an animal, then they do not see the rabbit.\nFOL: all x. (Animal(x) -> -See(x, Rabbit))\nPremise: If someone is an animal, then they do not chase the dog.\nFOL: all x. (Animal(x) -> -Chase(x, Dog))\nPremise: If someone is an animal, then they do not chase the lion.\nFOL: all x. (Animal(x) -> -Chase(x, Lion))\nPremise: If someone is an animal, then they do not chase the rabbit.\nFOL: all x. (Animal(x) -> -Chase(x, Rabbit))\nPremise: If someone is an animal, then they do not chase the tiger.\nFOL: all x. (Animal(x) -> -Chase(x, Tiger))\nPremise: If someone is an animal, then they are not nice.\nFOL: all x. (Animal(x) -> -Nice(x))\nPremise: If someone is an animal, then they are not cold.\nFOL: all x. (Animal(x) -> -Cold(x))\nPremise: If someone is an animal, then they are not bad.\nFOL: all x. (Animal(x) -> -Bad(x))\nPremise: If someone is an animal, then they do not gain knowledge.\nFOL: all x. (Animal(x) -> -Gains(x, Knowledge))\nPremise: If someone is an animal, then they do not read books.\nFOL: all x. (Animal(x) -> -Reads(x, y))\nPremise: If someone is an animal, then they do not visit the lion.\nFOL: all x. (Animal(x) -> -Visit(x, Lion))"], ["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: If something chases the cow, then it is an animal.\nFOL: all x. (Chases(x, Cow) -> Animal(x))\nPremise: If something eats the cow, then it is an animal.\nFOL: all x. (Eats(x, Cow) -> Animal(x))\nPremise: If something chases the dog, then it is an animal.\nFOL: all x. (Chases(x, Dog) -> Animal(x))\nPremise: If something eats the dog, then it is an animal.\nFOL: all x. (Eats(x, Dog) -> Animal(x))\nPremise: If something chases the bear, then it is an animal.\nFOL: all x. (Chases(x, Bear) -> Animal(x))\nPremise: If something eats the bear, then it is an animal.\nFOL: all x. (Eats(x, Bear) -> Animal(x))\nPremise: If something chases the rabbit, then it is an animal.\nFOL: all x. (Chases(x, Rabbit) -> Animal(x))\nPremise: If something eats the rabbit, then it is an animal.\nFOL: all x. (Eats(x, Rabbit) -> Animal(x))\nPremise: If something sees the dog, then it is an animal.\nFOL: all x. (Sees(x, Dog) -> Animal(x))\nPremise: If something sees the cow, then it is an animal.\nFOL: all x. (Sees(x, Cow) -> Animal(x))\nPremise: If something sees the rabbit, then it is an animal.\nFOL: all x. (Sees(x, Rabbit) -> Animal(x))\nPremise: If something sees the bear, then it is an animal.\nFOL: all x. (Sees(x, Bear) -> Animal(x))"], ["Premise: Anne is a thing.\nFOL: Thing(Anne)\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\nPremise: Erin is a thing.\nFOL: Thing(Erin)\nPremise: Harry is a thing.\nFOL: Thing(Harry)\nPremise: Nice things are things.\nFOL: all x. (Nice(x) -> Thing(x))\nPremise: Round things are things.\nFOL: all x. (Round(x) -> Thing(x))\nPremise: Young things are things.\nFOL: all x. (Young(x) -> Thing(x))\nPremise: Red things are things.\nFOL: all x. (Red(x) -> Thing(x))\nPremise: Blue things are things.\nFOL: all x. (Blue(x) -> Thing(x))\nPremise: White things are things.\nFOL: all x. (White(x) -> Thing(x))\nPremise: Rough things are things.\nFOL: all x. (Rough(x) -> Thing(x))"], ["Premise: Bob is a person.\nFOL: Person(Bob)\n\nPremise: Charlie is a person.\nFOL: Person(Charlie)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Bob is big.\nFOL: Big(Bob)\n\nPremise: Charlie is young.\nFOL: Young(Charlie)\n\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\n\nPremise: All big, rough people are round.\nFOL: all x. (Big(x) & Rough(x) -> Round(x))\n\nPremise: All nice, big people are blue.\nFOL: all x. (Nice(x) & Big(x) -> Blue(x))\n\nPremise: If someone is nice and big, then they are round.\nFOL: all x. (Nice(x) & Big(x) -> Round(x))\n\nPremise: If someone is nice and big, then they are blue.\nFOL: all x. (Nice(x) & Big(x) -> Blue(x))\n\nPremise: If someone is big, then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\n\nPremise: If someone is quiet and big, then they are round.\nFOL: all x. (Quiet(x) & Big(x) -> Round(x))\n\nPremise: If someone is nice and big, then they are blue.\nFOL: all x. (Nice(x) & Big(x) -> Blue(x))\n\nPremise: If someone is nice and big, then they are blue.\nFOL: all x. (Nice(x) & Big(x) -> Blue(x))\n\nPremise: If Charlie is nice and Charlie is big, then Charlie is round.\nFOL: ((Nice(Charlie) & Big(Charlie)) -> Round(Charlie))\n\nPremise: All nice people are big.\nFOL: all x. (Nice(x) -> Big(x))"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: The cat is an animal.\nFOL: Animal(cat)\n\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\n\nPremise: The bear is not cold.\nFOL: -Cold(bear)\n\nPremise: The bear does not need the cat.\nFOL: -Needs(bear, cat)\n\nPremise: The bear does not need the tiger.\nFOL: -Needs(bear, tiger)\n\nPremise: The tiger is not nice.\nFOL: -Nice(tiger)\n\nPremise: The tiger does not need the bear.\nFOL: -Needs(tiger, bear)\n\nPremise: The cat is not nice.\nFOL: -Nice(cat)\n\nPremise: The mouse is not nice.\nFOL: -Nice(mouse)\n\nPremise: The mouse does not need the cat.\nFOL: -Needs(mouse, cat)\n\nPremise: The mouse does not need the tiger.\nFOL: -Needs(mouse, tiger)\n\nPremise: If someone is nice then they are kind.\nFOL: all x. (Nice(x) -> Kind(x))\n\nPremise: If someone visits the bear then they are not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(x))\n\nPremise: If someone visits the cat then they see the mouse.\nFOL: all x. (Visits(x, cat) -> Sees(x, mouse))\n\nPremise: If someone visits the cat and the cat does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, cat) & -Visits(cat, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the bear and the bear does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the tiger and the tiger does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the tiger and the tiger does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the mouse and the mouse does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the mouse and the mouse does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the bear and the bear does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, bear) & -Visits(bear, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the bear and the bear does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, bear) & -Visits(bear, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the tiger and the tiger does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the cat and the cat does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, cat) & -Visits(cat, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the cat and the cat does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, cat) & -Visits(cat, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the mouse and the mouse does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the mouse and the mouse does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the tiger and the tiger does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the tiger and the tiger does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the bear and the bear does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, bear) & -Visits(bear, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the bear and the bear does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the cat and the cat does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, cat) & -Visits(cat, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the cat and the cat does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, cat) & -Visits(cat, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the mouse and the mouse does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the mouse and the mouse does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the mouse and the mouse does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the bear and the bear does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, bear) & -Visits(bear, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the bear and the bear does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the cat and the cat does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, cat) & -Visits(cat, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the cat and the cat does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, cat) & -Visits(cat, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the mouse and the mouse does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the mouse and the mouse does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the tiger and the tiger does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the tiger and the tiger does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the bear and the bear does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, bear) & -Visits(bear, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the bear and the bear does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, bear) & -Visits(bear, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the cat and the cat does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, cat) & -Visits(cat, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the cat and the cat does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, cat) & -Visits(cat, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the mouse and the mouse does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the mouse and the mouse does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the tiger and the tiger does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the tiger and the tiger does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, tiger) & -Visits(tiger, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the cat and the cat does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, cat) & -Visits(cat, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the cat and the cat does not visit the mouse then they do not need the mouse.\nFOL: all x. (Visits(x, cat) & -Visits(cat, mouse) -> -Needs(x, mouse))\n\nPremise: If someone visits the mouse and the mouse does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, tiger) -> -Needs(x, tiger))\n\nPremise: If someone visits the mouse and the mouse does not visit the bear then they do not need the bear.\nFOL: all x. (Visits(x, mouse) & -Visits(mouse, bear) -> -Needs(x, bear))\n\nPremise: If someone visits the bear and the bear does not visit the cat then they do not need the cat.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> -Needs(x, cat))\n\nPremise: If someone visits the bear and the bear does not visit the tiger then they do not need the tiger.\nFOL: all x. (Visits(x, bear) & -Visits(bear, tiger) -> -Needs(x, tiger))"], ["Premise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: The cow is not big.\nFOL: -Big(Cow)\n\nPremise: The cow is not round.\nFOL: -Round(Cow)\n\nPremise: The cow does not like the rabbit.\nFOL: -Likes(Cow, Rabbit)\n\nPremise: The rabbit is not big.\nFOL: -Big(Rabbit)\n\nPremise: The rabbit is not round.\nFOL: -Round(Rabbit)\n\nPremise: The squirrel does not like the rabbit.\nFOL: -Likes(Squirrel, Rabbit)\n\nPremise: The squirrel does not like the cow.\nFOL: -Likes(Squirrel, Cow)\n\nPremise: The bald eagle does not like the cow.\nFOL: -Likes(BaldEagle, Cow)\n\nPremise: The squirrel is not green.\nFOL: -Green(Squirrel)\n\nPremise: The bald eagle is not green.\nFOL: -Green(BaldEagle)"], ["Premise: The bald eagle is an animal.\nFOL: Animal(bald_eagle)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: If something is an animal, then it is alive.\nFOL: all x. (Animal(x) -> Alive(x))\n\nPremise: If something is an animal, then it is not a plant.\nFOL: all x. (Animal(x) -> -Plant(x))\n\nPremise: If something is alive, then it is not dead.\nFOL: all x. (Alive(x) -> -Dead(x))\n\nPremise: If something is an animal and it is not alive, then it is dead.\nFOL: all x. (Animal(x) & -Alive(x) -> Dead(x))\n\nPremise: If something is not dead, then it is alive.\nFOL: all x. (-Dead(x) -> Alive(x))\n\nPremise: If something is not a plant, then it is an animal.\nFOL: all x. (-Plant(x) -> Animal(x))\n\nPremise: If something is alive and it is not an animal, then it is a plant.\nFOL: all x. (Alive(x) & -Animal(x) -> Plant(x))\n\nPremise: If something is a plant, then it is not an animal.\nFOL: all x. (Plant(x) -> -Animal(x))\n\nPremise: If something is round, then it is not sharp.\nFOL: all x. (Round(x) -> -Sharp(x))\n\nPremise: If something is sharp, then it is not round.\nFOL: all x. (Sharp(x) -> -Round(x))\n\nPremise: If something is red, then it is not green.\nFOL: all x. (Red(x) -> -Green(x))\n\nPremise: If something is green, then it is not red.\nFOL: all x. (Green(x) -> -Red(x))\n\nPremise: If something is young, then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\n\nPremise: If something is old, then it is not young.\nFOL: all x. (Old(x) -> -Young(x))"], ["Premise: Bob is furry.\nFOL: Furry(Bob)\n\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\n\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\n\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\n\nPremise: All big things are furry.\nFOL: all x. (Big(x) -> Furry(x))\n\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\n\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: All furry things are big.\nFOL: all x. (Furry(x) -> Big(x))\n\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: All furry things are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: All big things are young.\nFOL: all x. (Big(x) -> Young(x))\n\nPremise: All young things are nice.\nFOL: all x. (Young(x) -> Nice(x))\n\nPremise: All nice things are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nPremise: All red things are quiet and furry.\nFOL: all x. (Red(x) -> Quiet(x) & Furry(x))\n\nPremise: All red things are young and nice.\nFOL: all x. (Red(x) -> Young(x) & Nice(x))\n\nPremise: All green things are quiet and furry.\nFOL: all x. (Green(x) -> Quiet(x) & Furry(x))\n\nPremise: All green things are young and nice.\nFOL: all x. (Green(x) -> Young(x) & Nice(x))\n\nPremise: If something is quiet then it is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If something is furry then it is quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: If something is green then it is quiet.\nFOL: all x. (Green(x) -> Quiet(x))\n\nPremise: If something is green then it is furry.\nFOL: all x. (Green(x) -> Furry(x))\n\nPremise: If something is quiet then it is green.\nFOL: all x. (Quiet(x) -> Green(x))\n\nPremise: If something is furry then it is green.\nFOL: all x. (Furry(x) -> Green(x))\n\nPremise: If something is quiet then it is young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: If something is furry then it is young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: If something is green then it is young.\nFOL: all x. (Green(x) -> Young(x))\n\nPremise: If something is quiet then it is nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: If something is green then it is nice.\nFOL: all x. (Green(x) -> Nice(x))\n\nPremise: If something is young then it is quiet.\nFOL: all x. (Young(x) -> Quiet(x))\n\nPremise: If something is young then it is furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nPremise: If something is young then it is green.\nFOL: all x. (Young(x) -> Green(x))\n\nPremise: If something is young then it is nice.\nFOL: all x. (Young(x) -> Nice(x))\n\nPremise: If something is nice then it is quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\n\nPremise: If something is nice then it is furry.\nFOL: all x. (Nice(x) -> Furry(x))\n\nPremise: If something is nice then it is green.\nFOL: all x. (Nice(x) -> Green(x))\n\nPremise: If something is nice then it is young.\nFOL: all x. (Nice(x) -> Young(x))"]]