[["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If something eats the bear then it is an animal.\nFOL: all x. (Eats(x, Bear) -> Animal(x))\nPremise: If something eats the dog then it is an animal.\nFOL: all x. (Eats(x, Dog) -> Animal(x))\nPremise: If something eats the rabbit then it is an animal.\nFOL: all x. (Eats(x, Rabbit) -> Animal(x))\nPremise: If something eats the tiger then it is an animal.\nFOL: all x. (Eats(x, Tiger) -> Animal(x))\nPremise: If something needs the bear then it is an animal.\nFOL: all x. (Needs(x, Bear) -> Animal(x))\nPremise: If something needs the dog then it is an animal.\nFOL: all x. (Needs(x, Dog) -> Animal(x))\nPremise: If something needs the rabbit then it is an animal.\nFOL: all x. (Needs(x, Rabbit) -> Animal(x))\nPremise: If something needs the tiger then it is an animal.\nFOL: all x. (Needs(x, Tiger) -> Animal(x))\nPremise: If something sees the bear then it is an animal.\nFOL: all x. (Sees(x, Bear) -> Animal(x))\nPremise: If something sees the dog then it is an animal.\nFOL: all x. (Sees(x, Dog) -> Animal(x))\nPremise: If something sees the rabbit then it is an animal.\nFOL: all x. (Sees(x, Rabbit) -> Animal(x))\nPremise: If something sees the tiger then it is an animal.\nFOL: all x. (Sees(x, Tiger) -> Animal(x))\nPremise: If something eats the bear and the bear sees the dog then it is an animal.\nFOL: all x. (Eats(x, Bear) & Sees(Bear, Dog) -> Animal(x))\nPremise: If something eats the bear and the bear sees the rabbit then it is an animal.\nFOL: all x. (Eats(x, Bear) & Sees(Bear, Rabbit) -> Animal(x))\nPremise: If something eats the bear and the bear sees the tiger then it is an animal.\nFOL: all x. (Eats(x, Bear) & Sees(Bear, Tiger) -> Animal(x))\nPremise: If something eats the dog and the dog eats the bear then it is an animal.\nFOL: all x. (Eats(x, Dog) & Eats(Dog, Bear) -> Animal(x))\nPremise: If something eats the dog and the dog eats the rabbit then it is an animal.\nFOL: all x. (Eats(x, Dog) & Eats(Dog, Rabbit) -> Animal(x))\nPremise: If something eats the dog and the dog eats the tiger then it is an animal.\nFOL: all x. (Eats(x, Dog) & Eats(Dog, Tiger) -> Animal(x))\nPremise: If something eats the rabbit and the rabbit eats the bear then it is an animal.\nFOL: all x. (Eats(x, Rabbit) & Eats(Rabbit, Bear) -> Animal(x))\nPremise: If something eats the rabbit and the rabbit eats the tiger then it is an animal.\nFOL: all x. (Eats(x, Rabbit) & Eats(Rabbit, Tiger) -> Animal(x))\nPremise: If something eats the tiger and the tiger eats the bear then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Eats(Tiger, Bear) -> Animal(x))\nPremise: If something eats the tiger and the tiger eats the dog then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Eats(Tiger, Dog) -> Animal(x))\nPremise: If something eats the tiger and the tiger eats the rabbit then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Eats(Tiger, Rabbit) -> Animal(x))\nPremise: If something eats the tiger and the tiger sees the bear then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Sees(Tiger, Bear) -> Animal(x))\nPremise: If something eats the tiger and the tiger sees the dog then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Sees(Tiger, Dog) -> Animal(x))\nPremise: If something eats the tiger and the tiger sees the rabbit then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Sees(Tiger, Rabbit) -> Animal(x))\nPremise: If something eats the tiger and the tiger sees the tiger then it is an animal.\nFOL: all x. (Eats(x, Tiger) & Sees(Tiger, Tiger) -> Animal(x))\nPremise: If something sees the dog and the dog eats the bear then it is an animal.\nFOL: all x. (Sees(x, Dog) & Eats(Dog, Bear) -> Animal(x))\nPremise: If something sees the dog and the dog eats the rabbit then it is an animal.\nFOL: all x. (Sees(x, Dog) & Eats(Dog, Rabbit) -> Animal(x))\nPremise: If something sees the dog and the dog eats the tiger then it is an animal.\nFOL: all x. (Sees(x, Dog) & Eats(Dog, Tiger) -> Animal(x))\nPremise: If something sees the rabbit and the rabbit eats the bear then it is an animal.\nFOL: all x. (Sees(x, Rabbit) & Eats(Rabbit, Bear) -> Animal(x))\nPremise: If something sees the rabbit and the rabbit eats the tiger then it is an animal.\nFOL: all x. (Sees(x, Rabbit) & Eats(Rabbit, Tiger) -> Animal(x))\nPremise: If something sees the tiger and the tiger eats the bear then it is an animal.\nFOL: all x. (Sees(x, Tiger) & Eats(Tiger, Bear) -> Animal(x))\nPremise: If something sees the tiger and the tiger eats the dog then it is an animal.\nFOL: all x. (Sees(x, Tiger) & Eats(Tiger, Dog) -> Animal(x))\nPremise: If something sees the tiger and the tiger eats the rabbit then it is an animal.\nFOL: all x. (Sees(x, Tiger) & Eats(Tiger, Rabbit) -> Animal(x))\nPremise: If something sees the tiger and the tiger sees the bear then it is an animal.\nFOL: all x. (Sees(x, Tiger) & Sees(Tiger, Bear) -> Animal(x))\nPremise: If something sees the tiger and the tiger sees the dog then it is an animal.\nFOL: all x. (Sees(x, Tiger) & Sees(Tiger, Dog) -> Animal(x))\nPremise: If something sees the tiger and the tiger sees the rabbit then it is an animal.\nFOL: all x. (Sees(x, Tiger) & Sees(Tiger, Rabbit) -> Animal(x))"], ["Premise: Erin is a person.\nFOL: Person(Erin)\n\nPremise: Fiona is a person.\nFOL: Person(Fiona)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Erin is not round.\nFOL: -Round(Erin)\n\nPremise: Fiona is not round.\nFOL: -Round(Fiona)\n\nPremise: Gary is not round.\nFOL: -Round(Gary)\n\nPremise: If someone is nice then they are not cold.\nFOL: all x. (Nice(x) -> -Cold(x))\n\nPremise: If someone is green then they are not cold.\nFOL: all x. (Green(x) -> -Cold(x))\n\nPremise: If someone is not nice then they are not smart.\nFOL: all x. (-Nice(x) -> -Smart(x))\n\nPremise: If someone is not green then they are not smart.\nFOL: all x. (-Green(x) -> -Smart(x))"], ["Premise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\nPremise: Furry things are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\nPremise: If Fiona is furry then Fiona is kind.\nFOL: Furry(Fiona) -> Kind(Fiona)\nPremise: Rough, kind things are furry.\nFOL: all x. (Rough(x) & Kind(x) -> Furry(x))\nPremise: White things are kind.\nFOL: all x. (White(x) -> Kind(x))\nPremise: Fiona is white.\nFOL: White(Fiona)\nPremise: Charlie is cold.\nFOL: Cold(Charlie)\nPremise: Dave is red.\nFOL: Red(Dave)\nPremise: Dave is rough.\nFOL: Rough(Dave)\nPremise: Harry is kind.\nFOL: Kind(Harry)\nPremise: Harry is rough.\nFOL: Rough(Harry)\nPremise: Fiona is rough.\nFOL: Rough(Fiona)\nPremise: Charlie is a human.\nFOL: Person(Charlie)\nPremise: Dave is a human.\nFOL: Person(Dave)\nPremise: Harry is a human.\nFOL: Person(Harry)\nPremise: Fiona is a human.\nFOL: Person(Fiona)"], ["Premise: Charlie is blue.\nFOL: Blue(Charlie)\n\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Charlie is red.\nFOL: Red(Charlie)\n\nPremise: Dave is cold.\nFOL: Cold(Dave)\n\nPremise: Dave is blue and nice.\nFOL: Blue(Dave) & Nice(Dave)\n\nPremise: Dave is red.\nFOL: Red(Dave)\n\nPremise: Dave is smart.\nFOL: Smart(Dave)\n\nPremise: Fiona is blue.\nFOL: Blue(Fiona)\n\nPremise: Fiona is cold.\nFOL: Cold(Fiona)\n\nPremise: Fiona is nice.\nFOL: Nice(Fiona)\n\nPremise: Fiona is smart.\nFOL: Smart(Fiona)\n\nPremise: Harry is blue.\nFOL: Blue(Harry)\n\nPremise: Harry is furry.\nFOL: Furry(Harry)\n\nPremise: Harry is nice.\nFOL: Nice(Harry)\n\nPremise: Harry is red.\nFOL: Red(Harry)"], ["Premise: Fiona is not furry.\nFOL: -Furry(Fiona)\n\nPremise: Gary is not round.\nFOL: -Round(Gary)\n\nPremise: Fiona is not green.\nFOL: -Green(Fiona)\n\nPremise: Dave is not green.\nFOL: -Green(Dave)\n\nPremise: Erin is not furry.\nFOL: -Furry(Erin)\n\nPremise: Fiona is not round.\nFOL: -Round(Fiona)\n\nPremise: Erin is not furry.\nFOL: -Furry(Erin)\n\nPremise: Dave is not round.\nFOL: -Round(Dave)\n\nPremise: Erin is not furry.\nFOL: -Furry(Erin)\n\nPremise: Dave is not round.\nFOL: -Round(Dave)\n\nPremise: Gary is not furry.\nFOL: -Furry(Gary)\n\nPremise: Fiona is not young.\nFOL: -Young(Fiona)\n\nPremise: Erin is not white.\nFOL: -White(Erin)\n\nPremise: Erin is not big.\nFOL: -Big(Erin)\n\nPremise: Dave is not big.\nFOL: -Big(Dave)\n\nPremise: Gary is not big.\nFOL: -Big(Gary)\n\nPremise: Dave is not green.\nFOL: -Green(Dave)\n\nPremise: Erin is not green.\nFOL: -Green(Erin)\n\nPremise: Dave is not young.\nFOL: -Young(Dave)\n\nPremise: Gary is not young.\nFOL: -Young(Gary)\n\nPremise: Dave is not furry.\nFOL: -Furry(Dave)\n\nPremise: Erin is not round.\nFOL: -Round(Erin)\n\nPremise: Dave is not round.\nFOL: -Round(Dave)\n\nPremise: Erin is not furry.\nFOL: -Furry(Erin)\n\nPremise: Dave is not round.\nFOL: -Round(Dave)\n\nPremise: Fiona is not green.\nFOL: -Green(Fiona)\n\nPremise: Fiona is not furry.\nFOL: -Furry(Fiona)\n\nPremise: Fiona is not kind.\nFOL: -Kind(Fiona)\n\nPremise: Fiona is not round.\nFOL: -Round(Fiona)\n\nPremise: Fiona is not white.\nFOL: -White(Fiona)"], ["Premise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The bear is an animal.\nFOL: Animal(Bear)\n\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\n\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\n\nPremise: If something is an animal, then it is not round.\nFOL: all x. (Animal(x) -> -Round(x))\n\nPremise: If something is not an animal, then it is round.\nFOL: all x. (-Animal(x) -> Round(x))\n\nPremise: If something eats the tiger, then it is not round.\nFOL: all x. (Eats(x, Tiger) -> -Round(x))\n\nPremise: If something does not eat the tiger, then it is round.\nFOL: all x. (-Eats(x, Tiger) -> Round(x))\n\nPremise: If something is red, then it is not round.\nFOL: all x. (Red(x) -> -Round(x))\n\nPremise: If something is not red, then it is round.\nFOL: all x. (-Red(x) -> Round(x))\n\nPremise: If something chases the mouse, then it is not the bear.\nFOL: all x. (Chases(x, Mouse) -> -Eats(x, Bear))\n\nPremise: If something does not chase the mouse, then it is the bear.\nFOL: all x. (-Chases(x, Mouse) -> Eats(x, Bear))\n\nPremise: If something chases the bear, then it is not the mouse.\nFOL: all x. (Chases(x, Bear) -> -Eats(x, Mouse))\n\nPremise: If something does not chase the bear, then it is the mouse.\nFOL: all x. (-Chases(x, Bear) -> Eats(x, Mouse))\n\nPremise: If something chases the bald eagle, then it is the mouse.\nFOL: all x. (Chases(x, BaldEagle) -> Eats(x, Mouse))\n\nPremise: If something does not chase the bald eagle, then it is not the mouse.\nFOL: all x. (-Chases(x, BaldEagle) -> -Eats(x, Mouse))"], ["Premise: Anne is nice and smart.\nFOL: Nice(Anne) & Smart(Anne)\n\nPremise: Erin is nice and quiet.\nFOL: Nice(Erin) & Quiet(Erin)\n\nPremise: Erin is white and smart.\nFOL: White(Erin) & Smart(Erin)\n\nPremise: Gary is nice and white.\nFOL: Nice(Gary) & White(Gary)\n\nPremise: Harry is not nice, quiet, and white.\nFOL: - Nice(Harry) & Quiet(Harry) & White(Harry)\n\nPremise: If something is nice, white, and green, then it is smart.\nFOL: all x. (Nice(x) & White(x) & Green(x) -> Smart(x))\n\nPremise: If Anne is rough, then Anne is green.\nFOL: (Rough(Anne) -> Green(Anne))\n\nPremise: If something is big, then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\n\nPremise: If something is nice, white, and smart, then it is quiet.\nFOL: all x. (Nice(x) & White(x) & Smart(x) -> Quiet(x))\n\nPremise: If something is green and smart, then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\n\nPremise: If something is quiet and rough, then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\n\nPremise: Anne is green and smart.\nFOL: Green(Anne) & Smart(Anne)"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\nPremise: The lion is an animal.\nFOL: Animal(lion)\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\nPremise: The dog is alive.\nFOL: Alive(dog)\nPremise: The lion is alive.\nFOL: Alive(lion)\nPremise: The mouse is alive.\nFOL: Alive(mouse)\nPremise: The tiger is alive.\nFOL: Alive(tiger)\nPremise: The dog has a mouth.\nFOL: Has(dog, Mouth)\nPremise: The lion has a mouth.\nFOL: Has(lion, Mouth)\nPremise: The mouse has a mouth.\nFOL: Has(mouse, Mouth)\nPremise: The tiger has a mouth.\nFOL: Has(tiger, Mouth)\nPremise: The dog has teeth.\nFOL: Has(dog, Teeth)\nPremise: The lion has teeth.\nFOL: Has(lion, Teeth)\nPremise: The mouse has teeth.\nFOL: Has(mouse, Teeth)\nPremise: The tiger has teeth.\nFOL: Has(tiger, Teeth)\nPremise: The dog has a stomach.\nFOL: Has(dog, Stomach)\nPremise: The lion has a stomach.\nFOL: Has(lion, Stomach)\nPremise: The mouse has a stomach.\nFOL: Has(mouse, Stomach)\nPremise: The tiger has a stomach.\nFOL: Has(tiger, Stomach)\nPremise: The dog has legs.\nFOL: Has(dog, Legs)\nPremise: The lion has legs.\nFOL: Has(lion, Legs)\nPremise: The mouse has legs.\nFOL: Has(mouse, Legs)\nPremise: The tiger has legs.\nFOL: Has(tiger, Legs)\nPremise: The dog is not a cat.\nFOL: -Cat(dog)\nPremise: The lion is not a cat.\nFOL: -Cat(lion)\nPremise: The mouse is not a cat.\nFOL: -Cat(mouse)\nPremise: The tiger is not a cat.\nFOL: -Cat(tiger)\nPremise: The dog is not a bird.\nFOL: -Bird(dog)\nPremise: The lion is not a bird.\nFOL: -Bird(lion)\nPremise: The mouse is not a bird.\nFOL: -Bird(mouse)\nPremise: The tiger is not a bird.\nFOL: -Bird(tiger)\nPremise: The dog is not a fish.\nFOL: -Fish(dog)\nPremise: The lion is not a fish.\nFOL: -Fish(lion)\nPremise: The mouse is not a fish.\nFOL: -Fish(mouse)\nPremise: The tiger is not a fish.\nFOL: -Fish(tiger)\nPremise: The dog is not a reptile.\nFOL: -Reptile(dog)\nPremise: The lion is not a reptile.\nFOL: -Reptile(lion)\nPremise: The mouse is not a reptile.\nFOL: -Reptile(mouse)\nPremise: The tiger is not a reptile.\nFOL: -Reptile(tiger)\nPremise: The dog is not a plant.\nFOL: -Plant(dog)\nPremise: The lion is not a plant.\nFOL: -Plant(lion)\nPremise: The mouse is not a plant.\nFOL: -Plant(mouse)\nPremise: The tiger is not a plant.\nFOL: -Plant(tiger)\nPremise: The dog is not inanimate.\nFOL: -Inanimate(dog)\nPremise: The lion is not inanimate.\nFOL: -Inanimate(lion)\nPremise: The mouse is not inanimate.\nFOL: -Inanimate(mouse)\nPremise: The tiger is not inanimate.\nFOL: -Inanimate(tiger)"], ["Premise: Bob is a person.\nFOL: Person(Bob)\nPremise: Erin is a person.\nFOL: Person(Erin)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Bob is big.\nFOL: Big(Bob)\nPremise: Erin is young.\nFOL: Young(Erin)\nPremise: Harry is not furry.\nFOL: -Furry(Harry)\nPremise: Gary is rough and furry.\nFOL: Rough(Gary) & Furry(Gary)\nPremise: If someone is big then they are furry.\nFOL: all x. (Big(x) -> Furry(x))\nPremise: If someone is young then they are furry.\nFOL: all x. (Young(x) -> Furry(x))\nPremise: If someone is smart and young then they are furry.\nFOL: all x. (Smart(x) & Young(x) -> Furry(x))\nPremise: If someone is rough then they are big and furry.\nFOL: all x. (Rough(x) -> Big(x) & Furry(x))\nPremise: If someone is furry and not rough then they are kind.\nFOL: all x. (Furry(x) & -Rough(x) -> Kind(x))\nPremise: If someone is rough and furry then they are white.\nFOL: all x. (Rough(x) & Furry(x) -> White(x))\nPremise: If someone is white then they are kind.\nFOL: all x. (White(x) -> Kind(x))"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The cat is an animal.\nFOL: Animal(cat)\nPremise: The cow is an animal.\nFOL: Animal(cow)\nPremise: The dog is an animal.\nFOL: Animal(dog)\nPremise: If someone is an animal and they see the cat, then they chase the dog.\nFOL: all x. (Animal(x) & See(x, cat) -> Chase(x, dog))\nPremise: If someone is green and they chase the dog, then they eat the cat.\nFOL: all x. (Green(x) & Chase(x, dog) -> Eat(x, cat))\nPremise: If someone is not nice and they eat the cat, then they chase the bear.\nFOL: all x. (-Nice(x) & Eat(x, cat) -> Chase(x, bear))\nPremise: If someone is red and they see the bear, then they eat the dog.\nFOL: all x. (Red(x) & See(x, bear) -> Eat(x, dog))\nPremise: If someone is kind and they eat the bear, then the bear does not chase the cat.\nFOL: all x. (Kind(x) & Eat(x, bear) -> -Chase(bear, cat))"], ["Premise: Anne is not young.\nFOL: -Young(Anne)\n\nPremise: Anne is not green.\nFOL: -Green(Anne)\n\nPremise: Anne is not round.\nFOL: -Round(Anne)\n\nPremise: Anne is not smart.\nFOL: -Smart(Anne)\n\nPremise: Dave is not cold.\nFOL: -Cold(Dave)\n\nPremise: Gary is not kind.\nFOL: -Kind(Gary)\n\nPremise: Gary is not round.\nFOL: -Round(Gary)\n\nPremise: Gary is not cold.\nFOL: -Cold(Gary)\n\nPremise: Gary is not smart.\nFOL: -Smart(Gary)\n\nPremise: Harry is not round.\nFOL: -Round(Harry)\n\nPremise: Harry is not cold.\nFOL: -Cold(Harry)\n\nPremise: Harry is not smart.\nFOL: -Smart(Harry)\n\nPremise: Harry is not green.\nFOL: -Green(Harry)\n\nPremise: Dave is not young.\nFOL: -Young(Dave)\n\nPremise: Anne is not smart.\nFOL: -Smart(Anne)\n\nPremise: Gary is not young.\nFOL: -Young(Gary)\n\nPremise: Dave is not smart.\nFOL: -Smart(Dave)\n\nPremise: Harry is not smart.\nFOL: -Smart(Harry)"], ["Premise: Dave is round.\nFOL: Round(Dave)\n\nPremise: Dave is white.\nFOL: White(Dave)\n\nPremise: Fiona is nice.\nFOL: Nice(Fiona)\n\nPremise: Fiona is young.\nFOL: Young(Fiona)\n\nPremise: Gary is round.\nFOL: Round(Gary)\n\nPremise: Gary is white.\nFOL: White(Gary)\n\nPremise: Harry is nice.\nFOL: Nice(Harry)\n\nPremise: Harry is round.\nFOL: Round(Harry)\n\nPremise: Harry is young.\nFOL: Young(Harry)\n\nPremise: Harry is smart.\nFOL: Smart(Harry)\n\nPremise: If Harry is cold, then Harry is round.\nFOL: all x. (Cold(x) -> Round(x))\n\nPremise: If Fiona is cold, then Fiona is round.\nFOL: all x. (Cold(x) -> Round(x))\n\nPremise: If Gary is cold, then Gary is round.\nFOL: all x. (Cold(x) -> Round(x))\n\nPremise: If Gary is nice, then Gary is round.\nFOL: all x. (Nice(x) -> Round(x))\n\nPremise: If Gary is smart, then Gary is round.\nFOL: all x. (Smart(x) -> Round(x))\n\nPremise: If Harry is cold, then Harry is white.\nFOL: all x. (Cold(x) -> White(x))\n\nPremise: If Harry is nice, then Harry is white.\nFOL: all x. (Nice(x) -> White(x))\n\nPremise: If Harry is smart, then Harry is white.\nFOL: all x. (Smart(x) -> White(x))\n\nPremise: If Fiona is cold, then Fiona is white.\nFOL: all x. (Cold(x) -> White(x))\n\nPremise: If Fiona is nice, then Fiona is white.\nFOL: all x. (Nice(x) -> White(x))\n\nPremise: If Fiona is smart, then Fiona is white.\nFOL: all x. (Smart(x) -> White(x))\n\nPremise: If Dave is round, then Dave is white.\nFOL: all x. (Round(x) -> White(x))\n\nPremise: If Dave is cold, then Dave is white.\nFOL: all x. (Cold(x) -> White(x))\n\nPremise: If Dave is nice, then Dave is white.\nFOL: all x. (Nice(x) -> White(x))\n\nPremise: If Dave is smart, then Dave is white.\nFOL: all x. (Smart(x) -> White(x))\n\nPremise: If Dave is young, then Dave is white.\nFOL: all x. (Young(x) -> White(x))\n\nPremise: If Dave is red, then Dave is white.\nFOL: all x. (Red(x) -> White(x))\n\nPremise: If Dave is red, then Dave is round.\nFOL: all x. (Red(x) -> Round(x))\n\nPremise: If Dave is red, then Dave is cold.\nFOL: all x. (Red(x) -> Cold(x))\n\nPremise: If Dave is red, then Dave is nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nPremise: If Dave is red, then Dave is young.\nFOL: all x. (Red(x) -> Young(x))"], ["Premise: The rabbit is an animal.\nFOL: Animal(rabbit)\nPremise: The dog is an animal.\nFOL: Animal(dog)\nPremise: The lion is an animal.\nFOL: Animal(lion)\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\nPremise: The lion is not cold.\nFOL: -Cold(lion)\nPremise: The tiger is not round.\nFOL: -Round(tiger)\nPremise: If someone is red, then they are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nPremise: If someone is cold, then they are not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If someone is hot, then they are not cold.\nFOL: all x. (Hot(x) -> -Cold(x))\nPremise: If someone is nice, then they are not mean.\nFOL: all x. (Nice(x) -> -Mean(x))\nPremise: If someone is mean, then they are not nice.\nFOL: all x. (Mean(x) -> -Nice(x))\nPremise: If someone is mean, then they are not kind.\nFOL: all x. (Mean(x) -> -Kind(x))\nPremise: If someone is kind, then they are not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\nPremise: If someone sees the dog, then the dog sees them.\nFOL: all x. (See(dog, x) -> See(x, dog))\nPremise: If someone sees the rabbit, then the rabbit sees them.\nFOL: all x. (See(rabbit, x) -> See(x, rabbit))\nPremise: If someone sees the lion, then the lion sees them.\nFOL: all x. (See(lion, x) -> See(x, lion))\nPremise: If someone sees the tiger, then the tiger sees them.\nFOL: all x. (See(tiger, x) -> See(x, tiger))\nPremise: If someone chases the dog, then the dog chases them.\nFOL: all x. (Chase(dog, x) -> Chase(x, dog))\nPremise: If someone chases the lion, then the lion chases them.\nFOL: all x. (Chase(lion, x) -> Chase(x, lion))\nPremise: If someone chases the rabbit, then the rabbit chases them.\nFOL: all x. (Chase(rabbit, x) -> Chase(x, rabbit))\nPremise: If someone chases the tiger, then the tiger chases them.\nFOL: all x. (Chase(tiger, x) -> Chase(x, tiger))\nPremise: If someone visits the lion, then the lion visits them.\nFOL: all x. (Visit(lion, x) -> Visit(x, lion))\nPremise: If someone visits the tiger, then the tiger visits them.\nFOL: all x. (Visit(tiger, x) -> Visit(x, tiger))\nPremise: If someone visits the dog, then the dog visits them.\nFOL: all x. (Visit(dog, x) -> Visit(x, dog))\nPremise: If someone visits the rabbit, then the rabbit visits them.\nFOL: all x. (Visit(rabbit, x) -> Visit(x, rabbit))\nPremise: If someone visits the lion and the lion visits the tiger, then they visit the tiger.\nFOL: all x. (Visit(x, lion) & Visit(lion, tiger) -> Visit(x, tiger))\nPremise: If someone visits the tiger and the tiger visits the rabbit, then they visit the rabbit.\nFOL: all x. (Visit(x, tiger) & Visit(tiger, rabbit) -> Visit(x, rabbit))\nPremise: If someone visits the dog and the dog visits the rabbit, then they visit the rabbit.\nFOL: all x. (Visit(x, dog) & Visit(dog, rabbit) -> Visit(x, rabbit))\nPremise: If someone visits the dog and the dog visits the lion, then they visit the lion.\nFOL: all x. (Visit(x, dog) & Visit(dog, lion) -> Visit(x, lion))\nPremise: If someone sees the lion and the lion sees the rabbit, then they see the rabbit.\nFOL: all x. (See(x, lion) & See(lion, rabbit) -> See(x, rabbit))\nPremise: If someone sees the lion and the lion sees the dog, then they see the dog.\nFOL: all x. (See(x, lion) & See(lion, dog) -> See(x, dog))\nPremise: If someone sees the lion and the lion sees the lion, then they see the lion.\nFOL: all x. (See(x, lion) & See(lion, lion) -> See(x, lion))\nPremise: If someone sees the tiger and the tiger sees the dog, then they see the dog.\nFOL: all x. (See(x, tiger) & See(tiger, dog) -> See(x, dog))\nPremise: If someone sees the tiger and the tiger sees the lion, then they see the lion.\nFOL: all x. (See(x, tiger) & See(tiger, lion) -> See(x, lion))\nPremise: If someone sees the tiger and the tiger sees the rabbit, then they see the rabbit.\nFOL: all x. (See(x, tiger) & See(tiger, rabbit) -> See(x, rabbit))\nPremise: If someone sees the rabbit and the rabbit sees the dog, then they see the dog.\nFOL: all x. (See(x, rabbit) & See(rabbit, dog) -> See(x, dog))\nPremise: If someone sees the rabbit and the rabbit sees the lion, then they see the lion.\nFOL: all x. (See(x, rabbit) & See(rabbit, lion) -> See(x, lion))\nPremise: If someone sees the rabbit and the rabbit sees the rabbit, then they see the rabbit.\nFOL: all x. (See(x, rabbit) & See(rabbit, rabbit) -> See(x, rabbit))\nPremise: If someone sees the dog and the dog sees the lion, then they see the lion.\nFOL: all x. (See(x, dog) & See(dog, lion) -> See(x, lion))\nPremise: If someone sees the dog and the dog sees the rabbit, then they see the rabbit.\nFOL: all x. (See(x, dog) & See(dog, rabbit) -> See(x, rabbit))\nPremise: If someone sees the dog and the dog sees the dog, then they see the dog.\nFOL: all x. (See(x, dog) & See(dog, dog) -> See(x, dog))\nPremise: If someone sees the lion and the lion does not visit the dog, then they see the lion but do not visit the lion.\nFOL: all x. (See(x, lion) & -Visit(lion, dog) -> (See(x, lion) & -Visit(x, lion)))\nPremise: If someone sees the lion and the lion visits the dog, then they see the lion and visit the lion.\nFOL: all x. (See(x, lion) & Visit(lion, dog) -> (See(x, lion) & Visit(x, lion)))\nPremise: If someone sees the rabbit and the rabbit does not visit the dog, then they see the rabbit but do not visit the rabbit.\nFOL: all x. (See(x, rabbit) & -Visit(rabbit, dog) -> (See(x, rabbit) & -Visit(x, rabbit)))\nPremise: If someone sees the rabbit and the rabbit visits the dog, then they see the rabbit and visit the rabbit.\nFOL: all x. (See(x, rabbit) & Visit(rabbit, dog) -> (See(x, rabbit) & Visit(x, rabbit)))\nPremise: If someone sees the dog and the dog does not visit the rabbit, then they see the dog but do not visit the dog.\nFOL: all x. (See(x, dog) & -Visit(dog, rabbit) -> (See(x, dog) & -Visit(x, dog)))\nPremise: If someone sees the dog and the dog visits the rabbit, then they see the dog and visit the dog.\nFOL: all x. (See(x, dog) & Visit(dog, rabbit) -> (See(x, dog) & Visit(x, dog)))\nPremise: If someone sees the tiger and the tiger does not visit the rabbit, then they see the tiger but do not visit the tiger.\nFOL: all x. (See(x, tiger) & -Visit(tiger, rabbit) -> (See(x, tiger) & -Visit(x, tiger)))\nPremise: If someone sees the tiger and the tiger visits the rabbit, then they see the tiger and visit the tiger.\nFOL: all x. (See(x, tiger) & Visit(tiger, rabbit) -> (See(x, tiger) & Visit(x, tiger)))\nPremise: If someone sees the lion, then they are not round.\nFOL: all x. (See(x, lion) -> -Round(x))\nPremise: If someone sees the tiger, then they are nice.\nFOL: all x. (See(x, tiger) -> Nice(x))\nPremise: If someone sees the tiger and the tiger does not visit the rabbit, then they are not nice.\nFOL: all x. (See(x, tiger) & -Visit(tiger, rabbit) -> -Nice(x))\nPremise: If someone visits the dog, then the dog is not cold.\nFOL: all x. (Visit(x, dog) -> -Cold(dog))\nPremise: If someone is cold and red, then they do not chase the tiger.\nFOL: all x. (Cold(x) & Red(x) -> -Chase(x, tiger))\nPremise: If someone is cold, then they visit the lion.\nFOL: all x. (Cold(x) -> Visit(x, lion))\nPremise: If someone is nice, then they are cold.\nFOL: all x. (Nice(x) -> Cold(x))\nPremise: If someone is cold, then they are not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If someone is red, then they are not cold.\nFOL: all x. (Red(x) -> -Cold(x))\nPremise: If someone is hot, then they are not cold.\nFOL: all x. (Hot(x) -> -Cold(x))\nPremise: If someone is nice, then they are not mean.\nFOL: all x. (Nice(x) -> -Mean(x))\nPremise: If someone is mean, then they are not nice.\nFOL: all x. (Mean(x) -> -Nice(x))\nPremise: If someone is mean, then they are not kind.\nFOL: all x. (Mean(x) -> -Kind(x))\nPremise: If someone is kind, then they are not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\nPremise: If someone visits the lion, then the lion visits the tiger.\nFOL: all x. (Visit(x, lion) -> Visit(lion, tiger))\nPremise: If someone chases the rabbit, then they chase the dog.\nFOL: all x. (Chase(x, rabbit) -> Chase(x, dog))\nPremise: If someone visits the lion, then they visit the lion.\nFOL: all x. Visit(x, lion)"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The cow is an animal.\nFOL: Animal(cow)\nPremise: The dog is an animal.\nFOL: Animal(dog)\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\nPremise: If something is big, it is not small.\nFOL: all x. (Big(x) -> ~Small(x))\nPremise: If something is round, it is not square.\nFOL: all x. (Round(x) -> ~Square(x))\nPremise: If something is round, it is not flat.\nFOL: all x. (Round(x) -> ~Flat(x))\nPremise: If something is round, it is not triangular.\nFOL: all x. (Round(x) -> ~Triangular(x))\nPremise: If something chases the cow, then the cow is afraid.\nFOL: all x. (Chases(x, cow) -> Afraid(cow))\nPremise: If something chases the bear, then the bear is afraid.\nFOL: all x. (Chases(x, bear) -> Afraid(bear))\nPremise: If something chases the rabbit, then the rabbit is afraid.\nFOL: all x. (Chases(x, rabbit) -> Afraid(rabbit))\nPremise: If something chases the dog, then the dog is afraid.\nFOL: all x. (Chases(x, dog) -> Afraid(dog))\nPremise: If something sees the cow, then the cow is visible.\nFOL: all x. (Sees(x, cow) -> Visible(cow))\nPremise: If something sees the bear, then the bear is visible.\nFOL: all x. (Sees(x, bear) -> Visible(bear))\nPremise: If something sees the rabbit, then the rabbit is visible.\nFOL: all x. (Sees(x, rabbit) -> Visible(rabbit))\nPremise: If something sees the dog, then the dog is visible.\nFOL: all x. (Sees(x, dog) -> Visible(dog))\nPremise: If something eats the cow, then the cow is food.\nFOL: all x. (Eats(x, cow) -> Food(cow))\nPremise: If something eats the bear, then the bear is food.\nFOL: all x. (Eats(x, bear) -> Food(bear))\nPremise: If something eats the rabbit, then the rabbit is food.\nFOL: all x. (Eats(x, rabbit) -> Food(rabbit))\nPremise: If something eats the dog, then the dog is food.\nFOL: all x. (Eats(x, dog) -> Food(dog))\nPremise: If something is food, then it is edible.\nFOL: all x. (Food(x) -> Edible(x))\nPremise: If something is food, then it is consumable.\nFOL: all x. (Food(x) -> Consumable(x))\nPremise: If something is food, then it is digestible.\nFOL: all x. (Food(x) -> Digestible(x))\nPremise: If something is food, then it provides nourishment.\nFOL: all x. (Food(x) -> ProvidesNourishment(x))\nPremise: If something is red, then it is colorful.\nFOL: all x. (Red(x) -> Colorful(x))\nPremise: If something is colorful, then it is not monochromatic.\nFOL: all x. (Colorful(x) -> ~Monochromatic(x))\nPremise: If something is colorful, then it is not dull.\nFOL: all x. (Colorful(x) -> ~Dull(x))\nPremise: If something is colorful, then it is not plain.\nFOL: all x. (Colorful(x) -> ~Plain(x))\nPremise: If something is colorful, then it is not boring.\nFOL: all x. (Colorful(x) -> ~Boring(x))\nPremise: If something is visible, then it can be seen.\nFOL: all x. (Visible(x) -> CanBeSeen(x))\nPremise: If something is afraid, then it is not brave.\nFOL: all x. (Afraid(x) -> ~Brave(x))\nPremise: If something is afraid, then it is not courageous.\nFOL: all x. (Afraid(x) -> ~Courageous(x))\nPremise: If something is afraid, then it is not fearless.\nFOL: all x. (Afraid(x) -> ~Fearless(x))\nPremise: If something is afraid, then it is not confident.\nFOL: all x. (Afraid(x) -> ~Confident(x))\nPremise: If something is edible, then it can be eaten.\nFOL: all x. (Edible(x) -> CanBeEaten(x))\nPremise: If something is consumable, then it can be consumed.\nFOL: all x. (Consumable(x) -> CanBeConsumed(x))\nPremise: If something is digestible, then it can be digested.\nFOL: all x. (Digestible(x) -> CanBeDigested(x))\nPremise: If something provides nourishment, then it is nutritious.\nFOL: all x. (ProvidesNourishment(x) -> Nutritious(x))"], ["Premise: Anne is nice.\nFOL: Nice(Anne)\nPremise: Erin is nice.\nFOL: Nice(Erin)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: All red things are blue.\nFOL: all x. (Red(x) -> Blue(x))\nPremise: All white things are blue.\nFOL: all x. (White(x) -> Blue(x))\nPremise: All blue things are white.\nFOL: all x. (Blue(x) -> White(x))\nPremise: All blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nPremise: All white things are nice.\nFOL: all x. (White(x) -> Nice(x))\nPremise: All nice things are blue.\nFOL: all x. (Nice(x) -> Blue(x))\nPremise: All rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\nPremise: All round things are rough.\nFOL: all x. (Round(x) -> Rough(x))\nPremise: All young things are red.\nFOL: all x. (Young(x) -> Red(x))\nPremise: All red things are young.\nFOL: all x. (Red(x) -> Young(x))\nPremise: All nice things are round.\nFOL: all x. (Nice(x) -> Round(x))\nPremise: All round things are nice.\nFOL: all x. (Round(x) -> Nice(x))\nPremise: All rough things are blue.\nFOL: all x. (Rough(x) -> Blue(x))\nPremise: All blue things are rough.\nFOL: all x. (Blue(x) -> Rough(x))\nPremise: All young things are nice.\nFOL: all x. (Young(x) -> Nice(x))"], ["Premise: Bob is a person.\nFOL: Person(Bob)\n\nPremise: Charlie is a person.\nFOL: Person(Charlie)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: All people who are quiet, round, and big are young.\nFOL: all x. (Quiet(x) & Round(x) & Big(x) -> Young(x))\n\nPremise: All people who are young, blue, and round are rough.\nFOL: all x. (Young(x) & Blue(x) & Round(x) -> Rough(x))\n\nPremise: All people who are round and big are young.\nFOL: all x. (Round(x) & Big(x) -> Young(x))\n\nPremise: All blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\n\nPremise: All rough people are quiet.\nFOL: all x. (Rough(x) -> Quiet(x))\n\nPremise: All big people are rough.\nFOL: all x. (Big(x) -> Rough(x))\n\nPremise: All quiet and big people are round.\nFOL: all x. (Quiet(x) & Big(x) -> Round(x))\n\nPremise: If Charlie is nice and Charlie is big, then Charlie is blue.\nFOL: (Nice(Charlie) & Big(Charlie)) -> Blue(Charlie)\n\nPremise: All nice people are big.\nFOL: all x. (Nice(x) -> Big(x))\n\nPremise: Bob is blue.\nFOL: Blue(Bob)"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\nPremise: The cat is an animal.\nFOL: Animal(cat)\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\nPremise: If someone is nice, then they are kind.\nFOL: all x. (Nice(x) -> Kind(x))\nPremise: If someone is cold, then they are not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\nPremise: If someone does not need the tiger, then they do not visit the tiger.\nFOL: all x. (-Needs(x, tiger) -> -Visits(x, tiger))\nPremise: If someone is not rough, then they are gentle.\nFOL: all x. (-Rough(x) -> Gentle(x))\nPremise: If someone visits the bear, then the bear is visited by someone.\nFOL: all x. (Visits(x, bear) -> exists y. Visits(y, bear))\nPremise: If someone is kind and needs the mouse, then they visit the mouse.\nFOL: all x. (Kind(x) & Needs(x, mouse) -> Visits(x, mouse))\nPremise: If someone needs the bear and does not visit the cat, then they do not need the cat.\nFOL: all x. (Needs(x, bear) & -Visits(x, cat) -> -Needs(x, cat))\nPremise: If someone visits the cat, then someone visits the cat and the bear.\nFOL: all x. (Visits(x, cat) -> exists y. (Visits(y, cat) & Visits(y, bear)))\nPremise: If someone sees the bear, then the bear is seen by someone.\nFOL: all x. (Sees(x, bear) -> exists y. Sees(y, bear))\nPremise: If someone visits the bear and the bear is not nice, then they do not need the bear.\nFOL: all x. (Visits(x, bear) & -Nice(bear) -> -Needs(x, bear))\nPremise: If someone is gentle and visits the mouse, then they see the mouse.\nFOL: all x. (Gentle(x) & Visits(x, mouse) -> Sees(x, mouse))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. Visits(y, tiger))\nPremise: If someone is gentle and needs the mouse, then they are kind.\nFOL: all x. (Gentle(x) & Needs(x, mouse) -> Kind(x))\nPremise: If someone sees the cat and does not visit the bear, then they do not need the bear.\nFOL: all x. (Sees(x, cat) & -Visits(x, bear) -> -Needs(x, bear))\nPremise: If someone visits the mouse and the mouse is not nice, then they do not need the mouse.\nFOL: all x. (Visits(x, mouse) & -Nice(mouse) -> -Needs(x, mouse))\nPremise: If someone visits the bear and the bear visits the mouse, then someone visits the mouse.\nFOL: all x. (Visits(x, bear) & Visits(bear, mouse) -> exists y. Visits(y, mouse))\nPremise: If someone is nice and needs the bear, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, bear) -> Kind(x))\nPremise: If someone visits the bear and the bear does not visit the cat, then someone does not visit the cat.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> -Visits(x, cat))\nPremise: If someone visits the cat and the cat visits the bear, then someone visits the bear.\nFOL: all x. (Visits(x, cat) & Visits(cat, bear) -> exists y. Visits(y, bear))\nPremise: If someone sees the bear and does not visit the cat, then someone does not visit the cat.\nFOL: all x. (Sees(x, bear) & -Visits(x, cat) -> -Visits(x, cat))\nPremise: If someone sees the bear and does not visit the cat, then someone does not visit the cat and the bear.\nFOL: all x. (Sees(x, bear) & -Visits(x, cat) -> exists y. (-Visits(y, cat) & -Visits(y, bear)))\nPremise: If someone visits the cat and the cat is not nice, then they do not need the cat.\nFOL: all x. (Visits(x, cat) & -Nice(cat) -> -Needs(x, cat))\nPremise: If someone visits the bear and the bear visits the mouse, then someone visits the mouse.\nFOL: all x. (Visits(x, bear) & Visits(bear, mouse) -> exists y. Visits(y, mouse))\nPremise: If someone visits the bear and the bear visits the mouse, then someone visits the bear and the mouse.\nFOL: all x. (Visits(x, bear) & Visits(bear, mouse) -> exists y. (Visits(y, bear) & Visits(y, mouse)))\nPremise: If someone is nice and needs the mouse, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, mouse) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. Visits(y, tiger))\nPremise: If someone is nice and needs the bear, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, bear) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the bear and the tiger.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. (Visits(y, bear) & Visits(y, tiger)))\nPremise: If someone visits the mouse and the mouse visits the bear, then someone visits the bear.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, bear) -> exists y. Visits(y, bear))\nPremise: If someone is nice and needs the cat, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, cat) -> Kind(x))\nPremise: If someone visits the mouse and the mouse visits the bear, then someone visits the bear and the mouse.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, bear) -> exists y. (Visits(y, bear) & Visits(y, mouse)))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the bear.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. Visits(y, bear))\nPremise: If someone is nice and needs the tiger, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, tiger) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger and the bear.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. (Visits(y, tiger) & Visits(y, bear)))\nPremise: If someone visits the bear and the bear does not visit the cat, then they do not visit the cat and the bear.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> exists y. (-Visits(y, cat) & -Visits(y, bear)))\nPremise: If someone visits the cat and the cat visits the bear, then someone visits the bear.\nFOL: all x. (Visits(x, cat) & Visits(cat, bear) -> exists y. Visits(y, bear))\nPremise: If someone sees the bear, then someone sees the bear and the mouse.\nFOL: all x. (Sees(x, bear) -> exists y. (Sees(y, bear) & Sees(y, mouse)))\nPremise: If someone visits the cat and the cat visits the bear, then someone visits the bear and the cat.\nFOL: all x. (Visits(x, cat) & Visits(cat, bear) -> exists y. (Visits(y, bear) & Visits(y, cat)))\nPremise: If someone sees the cat and does not visit the bear, then they do not visit the bear and the cat.\nFOL: all x. (Sees(x, cat) & -Visits(x, bear) -> exists y. (-Visits(y, bear) & -Visits(y, cat)))\nPremise: If someone visits the mouse and the mouse visits the bear, then someone visits the bear.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, bear) -> exists y. Visits(y, bear))\nPremise: If someone is nice and needs the cat, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, cat) -> Kind(x))\nPremise: If someone visits the mouse and the mouse visits the bear, then someone visits the bear and the mouse.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, bear) -> exists y. (Visits(y, bear) & Visits(y, mouse)))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. Visits(y, tiger))\nPremise: If someone is nice and needs the tiger, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, tiger) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger and the bear.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. (Visits(y, tiger) & Visits(y, bear)))\nPremise: If someone visits the bear and the bear does not visit the cat, then someone does not visit the cat.\nFOL: all x. (Visits(x, bear) & -Visits(bear, cat) -> -Visits(x, cat))\nPremise: If someone visits the cat and the cat visits the bear, then someone visits the bear and the cat.\nFOL: all x. (Visits(x, cat) & Visits(cat, bear) -> exists y. (Visits(y, bear) & Visits(y, cat)))\nPremise: If someone sees the bear and does not visit the cat, then someone does not visit the cat.\nFOL: all x. (Sees(x, bear) & -Visits(x, cat) -> -Visits(x, cat))\nPremise: If someone sees the bear and does not visit the cat, then someone does not visit the cat and the bear.\nFOL: all x. (Sees(x, bear) & -Visits(x, cat) -> exists y. (-Visits(y, cat) & -Visits(y, bear)))\nPremise: If someone visits the cat and the cat is not nice, then they do not need the cat.\nFOL: all x. (Visits(x, cat) & -Nice(cat) -> -Needs(x, cat))\nPremise: If someone visits the bear and the bear visits the mouse, then someone visits the mouse.\nFOL: all x. (Visits(x, bear) & Visits(bear, mouse) -> exists y. Visits(y, mouse))\nPremise: If someone visits the bear and the bear visits the mouse, then someone visits the bear and the mouse.\nFOL: all x. (Visits(x, bear) & Visits(bear, mouse) -> exists y. (Visits(y, bear) & Visits(y, mouse)))\nPremise: If someone is nice and needs the cat, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, cat) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. Visits(y, tiger))\nPremise: If someone is nice and needs the tiger, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, tiger) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger and the bear.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. (Visits(y, tiger) & Visits(y, bear)))\nPremise: If someone visits the mouse and the mouse visits the bear, then someone visits the bear.\nFOL: all x. (Visits(x, mouse) & Visits(mouse, bear) -> exists y. Visits(y, bear))\nPremise: If someone is nice and needs the mouse, then they are kind.\nFOL: all x. (Nice(x) & Needs(x, mouse) -> Kind(x))\nPremise: If someone visits the bear and the bear visits the tiger, then someone visits the tiger and the bear.\nFOL: all x. (Visits(x, bear) & Visits(bear, tiger) -> exists y. (Visits(y, tiger) & Visits(y, bear)))\nPremise: If someone visits the"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: The cow is not round.\nFOL: -Round(Cow)\n\nPremise: The cow does not like the rabbit.\nFOL: -Likes(Cow, Rabbit)\n\nPremise: The squirrel does not chase the cow.\nFOL: -Chases(Squirrel, Cow)\n\nPremise: The squirrel does not chase the rabbit.\nFOL: -Chases(Squirrel, Rabbit)\n\nPremise: If someone is kind, they do not chase the cow.\nFOL: all x. (Kind(x) -> -Chases(x, Cow))\n\nPremise: If someone likes the squirrel, then they do not like the rabbit.\nFOL: all x. (Likes(x, Squirrel) -> -Likes(x, Rabbit))\n\nPremise: If someone likes the squirrel, then they do not chase the squirrel.\nFOL: all x. (Likes(x, Squirrel) -> -Chases(x, Squirrel))\n\nPremise: If someone needs the squirrel, then they do not chase the squirrel.\nFOL: all x. (Needs(x, Squirrel) -> -Chases(x, Squirrel))\n\nPremise: If someone needs the rabbit, then they do not chase the rabbit.\nFOL: all x. (Needs(x, Rabbit) -> -Chases(x, Rabbit))\n\nPremise: If someone needs the cow, then they do not chase the cow.\nFOL: all x. (Needs(x, Cow) -> -Chases(x, Cow))\n\nPremise: If someone needs the squirrel, then they do not like the squirrel.\nFOL: all x. (Needs(x, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone needs the rabbit, then they do not like the rabbit.\nFOL: all x. (Needs(x, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone needs the cow, then they do not like the cow.\nFOL: all x. (Needs(x, Cow) -> -Likes(x, Cow))\n\nPremise: If someone needs the bald eagle, then they do not like the bald eagle.\nFOL: all x. (Needs(x, BaldEagle) -> -Likes(x, BaldEagle))\n\nPremise: If someone needs the rabbit, then they need the cow.\nFOL: all x. (Needs(x, Rabbit) -> Needs(x, Cow))\n\nPremise: If someone needs the squirrel, then they need the cow.\nFOL: all x. (Needs(x, Squirrel) -> Needs(x, Cow))\n\nPremise: If someone needs the cow, then they need the rabbit.\nFOL: all x. (Needs(x, Cow) -> Needs(x, Rabbit))\n\nPremise: If someone needs the cow, then they need the squirrel.\nFOL: all x. (Needs(x, Cow) -> Needs(x, Squirrel))"], ["Premise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: If something is green, then it is not red.\nFOL: all x. (Green(x) -> -Red(x))\nPremise: If something is young, then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\nPremise: If something chases the lion, then it is not the lion.\nFOL: all x. (Chases(x, Lion) -> -x=Lion)\nPremise: If something eats the lion, then it is not the lion.\nFOL: all x. (Eats(x, Lion) -> -x=Lion)\nPremise: If something chases the dog, then it is not the dog.\nFOL: all x. (Chases(x, Dog) -> -x=Dog)\nPremise: If something likes the lion, then it is not the lion.\nFOL: all x. (Likes(x, Lion) -> -x=Lion)\nPremise: If something likes the bald eagle, then it is not the bald eagle.\nFOL: all x. (Likes(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something chases the bald eagle, then it is not the bald eagle.\nFOL: all x. (Chases(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something eats the bald eagle, then it is not the bald eagle.\nFOL: all x. (Eats(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something is red, then it is not green.\nFOL: all x. (Red(x) -> -Green(x))\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, then it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is round, then it is not sharp.\nFOL: all x. (Round(x) -> -Sharp(x))\nPremise: If something is round, then it is not angular.\nFOL: all x. (Round(x) -> -Angular(x))\nPremise: If something is round, then it is not edgy.\nFOL: all x. (Round(x) -> -Edgy(x))\nPremise: If something is round, then it is not pointy.\nFOL: all x. (Round(x) -> -Pointy(x))\nPremise: If something is round, then it is not spiky.\nFOL: all x. (Round(x) -> -Spiky(x))\nPremise: If something is round, then it is not rough.\nFOL: all x. (Round(x) -> -Rough(x))\nPremise: If something is round, then it is not bumpy.\nFOL: all x. (Round(x) -> -Bumpy(x))\nPremise: If something is round, then it is not uneven.\nFOL: all x. (Round(x) -> -Uneven(x))\nPremise: If something is round, then it is not jagged.\nFOL: all x. (Round(x) -> -Jagged(x))\nPremise: If something is round, then it is not uneven.\nFOL: all x. (Round(x) -> -Uneven(x))\nPremise: If something is round, then it is not jagged.\nFOL: all x. (Round(x) -> -Jagged(x))\nPremise: If something is round, then it is not bumpy.\nFOL: all x. (Round(x) -> -Bumpy(x))\nPremise: If something is round, then it is not rough.\nFOL: all x. (Round(x) -> -Rough(x))\nPremise: If something is round, then it is not spiky.\nFOL: all x. (Round(x) -> -Spiky(x))\nPremise: If something is round, then it is not pointy.\nFOL: all x. (Round(x) -> -Pointy(x))\nPremise: If something is round, then it is not edgy.\nFOL: all x. (Round(x) -> -Edgy(x))\nPremise: If something is round, then it is not angular.\nFOL: all x. (Round(x) -> -Angular(x))\nPremise: If something is round, then it is not sharp.\nFOL: all x. (Round(x) -> -Sharp(x))\nPremise: If something is round, then it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If something is red, then it is not green.\nFOL: all x. (Red(x) -> -Green(x))\nPremise: If something eats the lion, then it is not the lion.\nFOL: all x. (Eats(x, Lion) -> -x=Lion)\nPremise: If something chases the dog, then it is not the dog.\nFOL: all x. (Chases(x, Dog) -> -x=Dog)\nPremise: If something likes the lion, then it is not the lion.\nFOL: all x. (Likes(x, Lion) -> -x=Lion)\nPremise: If something is green, then it is not red.\nFOL: all x. (Green(x) -> -Red(x))\nPremise: If something is young, then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\nPremise: If something chases the lion, then it is not the lion.\nFOL: all x. (Chases(x, Lion) -> -x=Lion)\nPremise: If something eats the lion, then it is not the lion.\nFOL: all x. (Eats(x, Lion) -> -x=Lion)\nPremise: If something chases the dog, then it is not the dog.\nFOL: all x. (Chases(x, Dog) -> -x=Dog)\nPremise: If something likes the lion, then it is not the lion.\nFOL: all x. (Likes(x, Lion) -> -x=Lion)\nPremise: If something likes the bald eagle, then it is not the bald eagle.\nFOL: all x. (Likes(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something chases the bald eagle, then it is not the bald eagle.\nFOL: all x. (Chases(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something eats the bald eagle, then it is not the bald eagle.\nFOL: all x. (Eats(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something is red, then it is not green.\nFOL: all x. (Red(x) -> -Green(x))\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, then it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is round, then it is not sharp.\nFOL: all x. (Round(x) -> -Sharp(x))\nPremise: If something is round, then it is not angular.\nFOL: all x. (Round(x) -> -Angular(x))\nPremise: If something is round, then it is not edgy.\nFOL: all x. (Round(x) -> -Edgy(x))\nPremise: If something is round, then it is not pointy.\nFOL: all x. (Round(x) -> -Pointy(x))\nPremise: If something is round, then it is not spiky.\nFOL: all x. (Round(x) -> -Spiky(x))\nPremise: If something is round, then it is not rough.\nFOL: all x. (Round(x) -> -Rough(x))\nPremise: If something is round, then it is not bumpy.\nFOL: all x. (Round(x) -> -Bumpy(x))\nPremise: If something is round, then it is not uneven.\nFOL: all x. (Round(x) -> -Uneven(x))\nPremise: If something is round, then it is not jagged.\nFOL: all x. (Round(x) -> -Jagged(x))\nPremise: If something is round, then it is not uneven.\nFOL: all x. (Round(x) -> -Uneven(x))\nPremise: If something is round, then it is not jagged.\nFOL: all x. (Round(x) -> -Jagged(x))\nPremise: If something is round, then it is not bumpy.\nFOL: all x. (Round(x) -> -Bumpy(x))\nPremise: If something is round, then it is not rough.\nFOL: all x. (Round(x) -> -Rough(x))\nPremise: If something is round, then it is not spiky.\nFOL: all x. (Round(x) -> -Spiky(x))\nPremise: If something is round, then it is not pointy.\nFOL: all x. (Round(x) -> -Pointy(x))\nPremise: If something is round, then it is not edgy.\nFOL: all x. (Round(x) -> -Edgy(x))\nPremise: If something is round, then it is not angular.\nFOL: all x. (Round(x) -> -Angular(x))\nPremise: If something is round, then it is not sharp.\nFOL: all x. (Round(x) -> -Sharp(x))\nPremise: If something is round, then it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If something is red, then it is not green.\nFOL: all x. (Red(x) -> -Green(x))\nPremise: If something eats the lion, then it is not the lion.\nFOL: all x. (Eats(x, Lion) -> -x=Lion)\nPremise: If something chases the dog, then it is not the dog.\nFOL: all x. (Chases(x, Dog) -> -x=Dog)\nPremise: If something likes the lion, then it is not the lion.\nFOL: all x. (Likes(x, Lion) -> -x=Lion)\nPremise: If something likes the bald eagle, then it is not the bald eagle.\nFOL: all x. (Likes(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something chases the bald eagle, then it is not the bald eagle.\nFOL: all x. (Chases(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something eats the bald eagle, then it is not the bald eagle.\nFOL: all x. (Eats(x, BaldEagle) -> -x=BaldEagle)\nPremise: If something is red, then it is not green.\nFOL: all x. (Red(x) -> -Green(x))\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, then it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is round, then it is not sharp.\nFOL: all x. (Round(x) -> -Sharp(x))\nPremise: If something is round, then it is not angular.\nFOL: all x. (Round(x) -> -Angular(x))\nPremise: If something is round, then it is not edgy.\nFOL: all x. (Round(x) -> -Edgy(x))\nPremise: If something is round, then it is not pointy.\nFOL: all x. (Round(x) -> -Pointy(x))\nPremise: If something is round, then it is not spiky.\nFOL: all x. (Round(x) -> -Spiky(x))\nPremise: If something is round, then it is not rough.\nFOL: all x. (Round(x) -> -Rough(x))\nPremise: If something is round, then it is not bumpy.\nFOL: all x. (Round(x) -> -Bumpy(x))\nPremise: If something is round, then it is not uneven.\nFOL: all x. (Round(x) -> -Uneven(x))\nPremise: If something is round, then it is not jagged.\nFOL: all x. (Round(x) -> -Jagged(x))\nPrem"], ["Premise: Bob is quiet and red.\nFOL: Quiet(Bob) & Red(Bob)\n\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\n\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n\nPremise: Charlie is quiet and furry.\nFOL: Quiet(Charlie) & Furry(Charlie)\n\nPremise: Erin is quiet and red.\nFOL: Quiet(Erin) & Red(Erin)\n\nPremise: Erin is quiet and furry.\nFOL: Quiet(Erin) & Furry(Erin)\n\nPremise: Erin is quiet, red, and furry.\nFOL: Quiet(Erin) & Red(Erin) & Furry(Erin)\n\nPremise: Harry is quiet and red.\nFOL: Quiet(Harry) & Red(Harry)\n\nPremise: Harry is quiet and furry.\nFOL: Quiet(Harry) & Furry(Harry)\n\nPremise: Harry is quiet, red, and furry.\nFOL: Quiet(Harry) & Red(Harry) & Furry(Harry)\n\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\n\nPremise: All furry things are big.\nFOL: all x. (Furry(x) -> Big(x))\n\nPremise: All furry things are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\n\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\n\nPremise: All red things are big and quiet.\nFOL: all x. (Red(x) -> Big(x) & Quiet(x))\n\nPremise: All red things are young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: All red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\n\nPremise: All big things are young.\nFOL: all x. (Big(x) -> Young(x))\n\nPremise: All big things are nice.\nFOL: all x. (Big(x) -> Nice(x))\n\nPremise: All young things are nice.\nFOL: all x. (Young(x) -> Nice(x))\n\nPremise: If something is quiet and red, then it is furry.\nFOL: all x. (Quiet(x) & Red(x) -> Furry(x))\n\nPremise: If something is quiet and big, then it is furry.\nFOL: all x. (Quiet(x) & Big(x) -> Furry(x))\n\nPremise: If something is quiet and young, then it is furry.\nFOL: all x. (Quiet(x) & Young(x) -> Furry(x))\n\nPremise: If something is quiet and nice, then it is furry.\nFOL: all x. (Quiet(x) & Nice(x) -> Furry(x))\n\nPremise: If something is red and big, then it is furry.\nFOL: all x. (Red(x) & Big(x) -> Furry(x))\n\nPremise: If something is red and young, then it is furry.\nFOL: all x. (Red(x) & Young(x) -> Furry(x))\n\nPremise: If something is red and nice, then it is furry.\nFOL: all x. (Red(x) & Nice(x) -> Furry(x))\n\nPremise: If something is big and young, then it is furry.\nFOL: all x. (Big(x) & Young(x) -> Furry(x))\n\nPremise: If something is big and nice, then it is furry.\nFOL: all x. (Big(x) & Nice(x) -> Furry(x))\n\nPremise: If something is young and nice, then it is furry.\nFOL: all x. (Young(x) & Nice(x) -> Furry(x))\n\nPremise: If Bob is quiet and red, then Bob is furry.\nFOL: Quiet(Bob) & Red(Bob) -> Furry(Bob)\n\nPremise: If Bob is quiet and big, then Bob is furry.\nFOL: Quiet(Bob) & Big(Bob) -> Furry(Bob)\n\nPremise: If Bob is quiet and young, then Bob is furry.\nFOL: Quiet(Bob) & Young(Bob) -> Furry(Bob)\n\nPremise: If Bob is quiet and nice, then Bob is furry.\nFOL: Quiet(Bob) & Nice(Bob) -> Furry(Bob)\n\nPremise: If Bob is red and big, then Bob is furry.\nFOL: Red(Bob) & Big(Bob) -> Furry(Bob)\n\nPremise: If Bob is red and young, then Bob is furry.\nFOL: Red(Bob) & Young(Bob) -> Furry(Bob)\n\nPremise: If Bob is red and nice, then Bob is furry.\nFOL: Red(Bob) & Nice(Bob) -> Furry(Bob)\n\nPremise: If Bob is big and young, then Bob is furry.\nFOL: Big(Bob) & Young(Bob) -> Furry(Bob)\n\nPremise: If Bob is big and nice, then Bob is furry.\nFOL: Big(Bob) & Nice(Bob) -> Furry(Bob)\n\nPremise: If Bob is young and nice, then Bob is furry.\nFOL: Young(Bob) & Nice(Bob) -> Furry(Bob)\n\nPremise: If Charlie is quiet, then Charlie is furry.\nFOL: Quiet(Charlie) -> Furry(Charlie)\n\nPremise: If Charlie is red, then Charlie is furry.\nFOL: Red(Charlie) -> Furry(Charlie)\n\nPremise: If Charlie is big, then Charlie is furry.\nFOL: Big(Charlie) -> Furry(Charlie)\n\nPremise: If Charlie is young, then Charlie is furry.\nFOL: Young(Charlie) -> Furry(Charlie)\n\nPremise: If Charlie is nice, then Charlie is furry.\nFOL: Nice(Charlie) -> Furry(Charlie)\n\nPremise: If Erin is quiet, then Erin is furry.\nFOL: Quiet(Erin) -> Furry(Erin)\n\nPremise: If Erin is red, then Erin is furry.\nFOL: Red(Erin) -> Furry(Erin)\n\nPremise: If Erin is big, then Erin is furry.\nFOL: Big(Erin) -> Furry(Erin)\n\nPremise: If Erin is young, then Erin is furry.\nFOL: Young(Erin) -> Furry(Erin)\n\nPremise: If Erin is nice, then Erin is furry.\nFOL: Nice(Erin) -> Furry(Erin)\n\nPremise: If Harry is quiet, then Harry is furry.\nFOL: Quiet(Harry) -> Furry(Harry)\n\nPremise: If Harry is red, then Harry is furry.\nFOL: Red(Harry) -> Furry(Harry)\n\nPremise: If Harry is big, then Harry is furry.\nFOL: Big(Harry) -> Furry(Harry)\n\nPremise: If Harry is young, then Harry is furry.\nFOL: Young(Harry) -> Furry(Harry)\n\nPremise: If Harry is nice, then Harry is furry.\nFOL: Nice(Harry) -> Furry(Harry)"]]