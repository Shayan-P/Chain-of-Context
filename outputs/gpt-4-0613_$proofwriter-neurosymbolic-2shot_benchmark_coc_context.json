[["Premise: The bear is a living creature.\nFOL: Living(Bear)\nPremise: The dog is a living creature.\nFOL: Living(Dog)\nPremise: The rabbit is a living creature.\nFOL: Living(Rabbit)\nPremise: The tiger is a living creature.\nFOL: Living(Tiger)\nPremise: If something is round, it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is young, it is not old.\nFOL: all x. (Young(x) -> -Old(x))\nPremise: If something is cold, it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If something needs something, it lacks it.\nFOL: all x. all y. (Needs(x, y) -> Lacks(x, y))\nPremise: If a creature eats another, the one being eaten is not alive.\nFOL: all x. all y. (Eats(x, y) -> -Living(y))\n\n<CONTEXT>\nPremise: The bear is a living creature.\nFOL: Living(Bear)\nPremise: The dog is a living creature.\nFOL: Living(Dog)\nPremise: The rabbit is a living creature.\nFOL: Living(Rabbit)\nPremise: The tiger is a living creature.\nFOL: Living(Tiger)\nPremise: If something needs something, it lacks it.\nFOL: all x. all y. (Needs(x, y) -> Lacks(x, y))\n</CONTEXT>"], ["Premise: Erin is round.\nFOL: Round(Erin)\nPremise: Erin is smart.\nFOL: Smart(Erin)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: Gary is not smart.\nFOL: -Smart(Gary)\nPremise: Fiona is round.\nFOL: Round(Fiona)\n"], ["Premise: Charlie is white.\nFOL: White(Charlie)\nPremise: Dave is white.\nFOL: White(Dave)\nPremise: Harry is furry.\nFOL: Furry(Harry)\nPremise: Fiona is kind.\nFOL: Kind(Fiona)\nPremise: Dave is cold.\nFOL: Cold(Dave)\n"], ["Premise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Dave is red.\nFOL: Red(Dave)\nPremise: Fiona is blue.\nFOL: Blue(Fiona)\nPremise: Harry is nice.\nFOL: Nice(Harry)\nPremise: If something is cold then it is blue.\nFOL: all x. (Cold(x) -> Blue(x))\n"], ["Premise: Dave is green.\nFOL: Green(Dave)\nPremise: Fiona is not green.\nFOL: -Green(Fiona)\nPremise: Gary is big.\nFOL: Big(Gary)\nPremise: Erin is not big.\nFOL: -Big(Erin)\nPremise: Gary is not round.\nFOL: -Round(Gary)\n\n<CONTEXT>\nPremise: Dave is green.\nFOL: Green(Dave)\nPremise: Fiona is not green.\nFOL: -Green(Fiona)\nPremise: Gary is big.\nFOL: Big(Gary)\nPremise: Erin is not big.\nFOL: -Big(Erin)\nPremise: Gary is not round.\nFOL: -Round(Gary)\n</CONTEXT>"], ["Premise: The tiger is not round.\nFOL: -Round(Tiger)\nPremise: The bear does not chase the bald eagle.\nFOL: -Chases(Bear, BaldEagle)\nPremise: The bear does not need the tiger.\nFOL: -Needs(Bear, Tiger)\nPremise: The mouse does not eat the tiger.\nFOL: -Eats(Mouse, Tiger)\nPremise: The bald eagle does not chase the bear.\nFOL: -Chases(BaldEagle, Bear)\n\n<CONTEXT>\nPremise: The tiger is not round.\nFOL: -Round(Tiger)\nPremise: The bear does not chase the bald eagle.\nFOL: -Chases(Bear, BaldEagle)\nPremise: The bear does not need the tiger.\nFOL: -Needs(Bear, Tiger)\nPremise: The mouse does not eat the tiger.\nFOL: -Eats(Mouse, Tiger)\nPremise: The bald eagle does not chase the bear.\nFOL: -Chases(BaldEagle, Bear)\n</CONTEXT>"], ["Premise: Since Anne is nice and green, Anne is rough according to the provided logic.\nFOL: Rough(Anne)\nPremise: Since Anne is nice and white, Anne is quiet.\nFOL: Quiet(Anne)\nPremise: If Anne is rough, then she is smart as per the given logic. \nFOL: Smart(Anne)\nPremise: Erin, being nice, is also rough.\nFOL: Rough(Erin)\nPremise: Since Gary is nice and white, Gary is quiet.\nFOL: Quiet(Gary)\n\n<CONTEXT>\nPremise: Since Anne is nice and green, Anne is rough according to the provided logic.\nFOL: Rough(Anne)\nPremise: Since Anne is nice and white, Anne is quiet.\nFOL: Quiet(Anne)\nPremise: If Anne is rough, then she is smart as per the given logic. \nFOL: Smart(Anne)\nPremise: Erin, being nice, is also rough.\nFOL: Rough(Erin)\nPremise: Since Gary is nice and white, Gary is quiet.\nFOL: Quiet(Gary)\n</CONTEXT>"], ["Premise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: If an animal eats another, the first is a predator.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Predator(x))\nPremise: If an animal visits another, they interact.\nFOL: all x. all y. (Animal(x) & Animal(y) & Visits(x, y) -> Interacts(x, y))\nPremise: If an animal needs another, it is dependent.\nFOL: all x. all y. (Animal(x) & Animal(y) & Needs(x, y) -> Dependent(x))\nPremise: If an animal is blue, it is not naturally colored.\nFOL: all x. (Animal(x) & Blue(x) -> -NaturalColor(x))\nPremise: If an animal is rough, it has a coarse texture.\nFOL: all x. (Animal(x) & Rough(x) -> CoarseTexture(x))\nPremise: If an animal is round, it has a circular shape.\nFOL: all x. (Animal(x) & Round(x) -> CircularShape(x))\nPremise: If a lion is red, it is not naturally colored.\nFOL: Red(Lion) -> -NaturalColor(Lion)\nPremise: If an animal does not need another, it is independent.\nFOL: all x. all y. (Animal(x) & Animal(y) & -Needs(x, y) -> Independent(x))\n"], ["Premise: Bob is not rough.\nFOL: -Rough(Bob)\nPremise: Erin is not furry.\nFOL: -Furry(Erin)\nPremise: Bob is young.\nFOL: Young(Bob)\nPremise: Erin is young.\nFOL: Young(Erin)\nPremise: Gary is furry.\nFOL: Furry(Gary)\nPremise: Harry is not big.\nFOL: -Big(Harry)\nPremise: Harry is not young.\nFOL: -Young(Harry)\nPremise: Harry is not furry.\nFOL: -Furry(Harry)\nPremise: If someone is big and not smart then they are rough.\nFOL: all x. ((Big(x) & -Smart(x)) -> Rough(x))\nPremise: If someone is big and not young then they are smart.\nFOL: all x. ((Big(x) & -Young(x)) -> Smart(x))\nPremise: If someone is smart and not furry then they are rough.\nFOL: all x. ((Smart(x) & -Furry(x)) -> Rough(x))\n\n<CONTEXT>\nPremise: Bob is not rough.\nFOL: -Rough(Bob)\nPremise: Erin is not furry.\nFOL: -Furry(Erin)\nPremise: Bob is young.\nFOL: Young(Bob)\nPremise: Erin is young.\nFOL: Young(Erin)\nPremise: Gary is furry.\nFOL: Furry(Gary)\n</CONTEXT>"], ["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: If a bear eats an animal, the animal is not alive.\nFOL: all x. (Animal(x) & Eats(Bear, x) -> -Alive(x))\n\n<CONTEXT>\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: If a bear eats an animal, the animal is not alive.\nFOL: all x. (Animal(x) & Eats(Bear, x) -> -Alive(x))\n</CONTEXT>"], ["Premise: Anne is a person.\nFOL: Person(Anne)\nPremise: Dave is a person.\nFOL: Person(Dave)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: If something is round and cold, it is not young.\nFOL: all x. (Round(x) & Cold(x) -> -Young(x))\nPremise: If something is kind and young, it is not green.\nFOL: all x. (Kind(x) & Young(x) -> -Green(x))\nPremise: If something is kind, it is not big.\nFOL: all x. (Kind(x) -> -Big(x))\nPremise: If something is young, it is not big.\nFOL: all x. (Young(x) -> -Big(x))\nPremise: If something is green, it is not big.\nFOL: all x. (Green(x) -> -Big(x))\nPremise: If something is round, it is not kind.\nFOL: all x. (Round(x) -> -Kind(x))\nPremise: If something is green and round, it is not young.\nFOL: all x. (Green(x) & Round(x) -> -Young(x))\nPremise: If something is round, it is not green.\nFOL: all x. (Round(x) -> -Green(x))\nPremise: If something is young and kind, it is not round.\nFOL: all x. (Young(x) & Kind(x) -> -Round(x))\nPremise: If something is young, it is not kind.\nFOL: all x. (Young(x) -> -Kind(x))\nPremise: If something is green, it is not kind.\nFOL: all x. (Green(x) -> -Kind(x))\n\n<CONTEXT>\nPremise: Anne is a person.\nFOL: Person(Anne)\nPremise: Dave is a person.\nFOL: Person(Dave)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: If something is young, it is not big.\nFOL: all x. (Young(x) -> -Big(x))\n</CONTEXT>"], ["Premise: If something is red, it cannot be white.\nFOL: all x. (Red(x) -> -White(x))\nPremise: If something is white, it cannot be red.\nFOL: all x. (White(x) -> -Red(x))\nPremise: If something is cold, it is not nice.\nFOL: all x. (Cold(x) -> -Nice(x))\nPremise: If something is nice, it cannot be cold.\nFOL: all x. (Nice(x) -> -Cold(x))\nPremise: If something is round, it cannot be smart.\nFOL: all x. (Round(x) -> -Smart(x))\n"], ["Premise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If someone is nice, then they are not bad.\nFOL: all x. (Nice(x) -> -Bad(x))\nPremise: If someone is big, then they are not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: Red is a color.\nFOL: Color(Red)\nPremise: If someone chases someone, then they are not avoiding them.\nFOL: all x. all y. (Chases(x, y) -> -Avoids(x, y))\nPremise: Seeing is a form of perception.\nFOL: Perception(Sees)\nPremise: Visiting is a form of interaction.\nFOL: Interaction(Visits)\nPremise: If someone chases someone, then they see them.\nFOL: all x. all y. (Chases(x, y) -> Sees(x, y))\n\n<CONTEXT>\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If someone chases someone, then they see them.\nFOL: all x. all y. (Chases(x, y) -> Sees(x, y))\n</CONTEXT>"], ["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: If an animal chases another, it is likely predator and prey.\nFOL: all x. all y. (Animal(x) & Animal(y) & Chases(x, y) -> Predator(x) & Prey(y))\nPremise: If an animal eats another, the one being eaten is prey.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Prey(y))\nPremise: Seeing is a common trait among animals.\nFOL: all x. (Animal(x) -> CanSee(x))\nPremise: If something is big, it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, it is not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If something is red, it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\n"], ["Premise: If something is round, it can also be nice.\nFOL: all x. (Round(x) -> Nice(x))\nPremise: If something is white, it can be nice.\nFOL: all x. (White(x) -> Nice(x))\nPremise: If something is blue, it can also be rough.\nFOL: all x. (Blue(x) -> Rough(x))\nPremise: If something is red, it can also be young.\nFOL: all x. (Red(x) -> Young(x))\nPremise: If something is nice, it can also be white.\nFOL: all x. (Nice(x) -> White(x))\nPremise: If something is rough, it can also be blue.\nFOL: all x. (Rough(x) -> Blue(x))\nPremise: If something is round, it can also be blue.\nFOL: all x. (Round(x) -> Blue(x))\nPremise: If something is young, it can also be nice.\nFOL: all x. (Young(x) -> Nice(x))\nPremise: Anne can be nice.\nFOL: Nice(Anne)\nPremise: Harry can be round.\nFOL: Round(Harry)\nPremise: Erin can be rough.\nFOL: Rough(Erin)\nPremise: Charlie can be nice.\nFOL: Nice(Charlie)\n\n<CONTEXT>\nPremise: If something is round, it can also be nice.\nFOL: all x. (Round(x) -> Nice(x))\nPremise: If something is blue, it can also be rough.\nFOL: all x. (Blue(x) -> Rough(x))\nPremise: If something is red, it can also be young.\nFOL: all x. (Red(x) -> Young(x))\nPremise: If something is rough, it can also be blue.\nFOL: all x. (Rough(x) -> Blue(x))\nPremise: If something is young, it can also be nice.\nFOL: all x. (Young(x) -> Nice(x))\n</CONTEXT>"], ["Premise: Bob is round.\nFOL: Round(Bob)\nPremise: Bob is rough.\nFOL: Rough(Bob)\nPremise: Charlie is blue.\nFOL: Blue(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is young.\nFOL: Young(Charlie)\nPremise: Gary is big.\nFOL: Big(Gary)\nPremise: Harry is big.\nFOL: Big(Harry)\nPremise: Harry is young.\nFOL: Young(Harry)\n"], ["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: If someone is nice, they are not rough.\nFOL: all x. (Nice(x) -> -Rough(x))\nPremise: If someone is cold, they are not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\nPremise: If someone sees the cat, they are aware of the cat.\nFOL: all x. (Sees(x, Cat) -> Aware(x, Cat))\nPremise: If someone needs the bear, they are dependent on the bear.\nFOL: all x. (Needs(x, Bear) -> Dependent(x, Bear))\nPremise: If someone visits the tiger, they are aware of the tiger.\nFOL: all x. (Visits(x, Tiger) -> Aware(x, Tiger))\nPremise: If someone is not rough, they are gentle.\nFOL: all x. (-Rough(x) -> Gentle(x))\n\n<CONTEXT>\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: If someone is nice, they are not rough.\nFOL: all x. (Nice(x) -> -Rough(x))\n</CONTEXT>"], ["Premise: The bald eagle is a creature.\nFOL: Creature(BaldEagle)\nPremise: The cow is a creature.\nFOL: Creature(Cow)\nPremise: The rabbit is a creature.\nFOL: Creature(Rabbit)\nPremise: The squirrel is a creature.\nFOL: Creature(Squirrel)\nPremise: If the rabbit is big, it is not small.\nFOL: Big(Rabbit) -> -Small(Rabbit)\nPremise: If the rabbit is round, it is not square.\nFOL: Round(Rabbit) -> -Square(Rabbit)\nPremise: If someone is kind, they are not unkind.\nFOL: all x. (Kind(x) -> -Unkind(x))\nPremise: If someone is green, they are not another color.\nFOL: all x. (Green(x) -> -Blue(x), -Yellow(x), -Red(x))\nPremise: If a creature likes another creature, they do not hate them.\nFOL: all x. all y. (Likes(x, y) -> -Hates(x, y))\n\n<CONTEXT>\nPremise: The bald eagle is a creature.\nFOL: Creature(BaldEagle)\nPremise: The cow is a creature.\nFOL: Creature(Cow)\nPremise: The rabbit is a creature.\nFOL: Creature(Rabbit)\nPremise: The squirrel is a creature.\nFOL: Creature(Squirrel)\nPremise: If someone is kind, they are not unkind.\nFOL: all x. (Kind(x) -> -Unkind(x))\n</CONTEXT>"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: Animals are not objects.\nFOL: all x. (Animal(x) -> -Object(x))\n\n<CONTEXT>\nPremise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: Animals are not objects.\nFOL: all x. (Animal(x) -> -Object(x))\n</CONTEXT>"], ["Premise: Charlie is quiet because all green things are quiet.\nFOL: Quiet(Charlie)\nPremise: Erin is quiet because all green things are quiet.\nFOL: Quiet(Erin)\nPremise: Charlie is red because furry things are red.\nFOL: Red(Charlie)\nPremise: Erin is red because furry things are red.\nFOL: Red(Erin)\nPremise: Bob is red because furry things are red.\nFOL: Red(Bob)\nPremise: Since Bob is big and young, Bob is furry.\nFOL: Furry(Bob)\nPremise: Since Charlie is quiet, Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Since Erin is quiet and red, Erin is young.\nFOL: Young(Erin)\nPremise: Since Charlie is quiet and red, Charlie is young.\nFOL: Young(Charlie)\nPremise: Since young things are nice, Harry is nice.\nFOL: Nice(Harry)\nPremise: Since young things are nice, Erin is nice.\nFOL: Nice(Erin)\nPremise: Since young things are nice, Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Since Bob is red, Bob is big.\nFOL: Big(Bob)\n\n<CONTEXT>\nPremise: Charlie is quiet because all green things are quiet.\nFOL: Quiet(Charlie)\nPremise: Erin is quiet because all green things are quiet.\nFOL: Quiet(Erin)\nPremise: Since Bob is big and young, Bob is furry.\nFOL: Furry(Bob)\nPremise: Since Erin is quiet and red, Erin is young.\nFOL: Young(Erin)\nPremise: Since young things are nice, Harry is nice.\nFOL: Nice(Harry)\n</CONTEXT>"], ["Premise: Dave is white.\nFOL: White(Dave)\nPremise: Fiona is white.\nFOL: White(Fiona)\nPremise: Gary is young.\nFOL: Young(Gary)\nPremise: Harry is blue.\nFOL: Blue(Harry)\nPremise: Fiona is young.\nFOL: Young(Fiona)\n\n<CONTEXT>\nPremise: Dave is white.\nFOL: White(Dave)\nPremise: Fiona is white.\nFOL: White(Fiona)\nPremise: Gary is young.\nFOL: Young(Gary)\nPremise: Harry is blue.\nFOL: Blue(Harry)\nPremise: Fiona is young.\nFOL: Young(Fiona)\n</CONTEXT>"], ["<CONTEXT>\nPremise: The rabbit is a living being.\nFOL: LivingBeing(Rabbit)\nPremise: The cat is a living being.\nFOL: LivingBeing(Cat)\nPremise: The cow is a living being.\nFOL: LivingBeing(Cow)\nPremise: The mouse is a living being.\nFOL: LivingBeing(Mouse)\nPremise: If a living being is young, then it is not old.\nFOL: all x. (LivingBeing(x) & Young(x) -> -Old(x))\n</CONTEXT>"], ["Premise: The cat is a living creature.\nFOL: Living(Cat)\n\nPremise: The tiger is a living creature.\nFOL: Living(Tiger)\n\nPremise: The lion is a living creature.\nFOL: Living(Lion)\n\nPremise: The rabbit is a living creature.\nFOL: Living(Rabbit)\n\nPremise: The tiger can be cold.\nFOL: CanBeCold(Tiger)\n\nPremise: The lion can chase.\nFOL: CanChase(Lion)\n\nPremise: The cat can chase.\nFOL: CanChase(Cat)\n\nPremise: Someone can chase the tiger.\nFOL: \u2203x (CanChase(x) & Tiger)\n\nPremise: The tiger can like.\nFOL: CanLike(Tiger)\n\nPremise: The lion can like.\nFOL: CanLike(Lion)\n\nPremise: The tiger does not chase itself.\nFOL: \u00acChases(Tiger, Tiger)\n\nPremise: The rabbit is a color.\nFOL: HasColor(Rabbit)\n\nPremise: The rabbit can be liked.\nFOL: CanBeLiked(Rabbit)\n\nPremise: The lion can be rough.\nFOL: CanBeRough(Lion)\n\nPremise: The tiger can be young.\nFOL: CanBeYoung(Tiger)\n\n<CONTEXT>\nPremise: The cat is a living creature.\nFOL: Living(Cat)\n\nPremise: The tiger is a living creature.\nFOL: Living(Tiger)\n\nPremise: The lion is a living creature.\nFOL: Living(Lion)\n\nPremise: The rabbit is a living creature.\nFOL: Living(Rabbit)\n\nPremise: The tiger does not chase itself.\nFOL: \u00acChases(Tiger, Tiger)\n</CONTEXT>"], ["Premise: Anne is smart.\nFOL: Smart(Anne)\nPremise: Fiona is green.\nFOL: Green(Fiona)\nPremise: Gary is smart.\nFOL: Smart(Gary)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: If something is quiet then it is smart.\nFOL: all x. (Quiet(x) -> Smart(x))\n\n<CONTEXT>\nPremise: Anne is smart.\nFOL: Smart(Anne)\nPremise: Fiona is green.\nFOL: Green(Fiona)\nPremise: Gary is smart.\nFOL: Smart(Gary)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: If something is quiet then it is smart.\nFOL: all x. (Quiet(x) -> Smart(x))\n</CONTEXT>"], ["Premise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\nPremise: If an animal is round, it is also big.\nFOL: all x. (Animal(x) & Round(x) -> Big(x))\nPremise: If an animal eats another, it can see it.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Sees(x, y))\nPremise: If an animal likes another, it does not eat it.\nFOL: all x. all y. (Animal(x) & Animal(y) & Likes(x, y) -> -Eats(x, y))\nPremise: If an animal is big, it does not eat the cat.\nFOL: all x. (Animal(x) & Big(x) -> -Eats(x, Cat))\nPremise: If the cat is not green, it is not big.\nFOL: -Green(Cat) -> -Big(Cat)\nPremise: If an animal is round, it is not eaten by the cat.\nFOL: all x. (Animal(x) & Round(x) -> -Eats(Cat, x))\n\n<CONTEXT>\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\nPremise: If an animal eats another, it can see it.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Sees(x, y))\n</CONTEXT>"], ["Premise: Anne is young.\nFOL: Young(Anne)\nPremise: Anne is cold.\nFOL: Cold(Anne)\nPremise: Anne is nice.\nFOL: Nice(Anne)\nPremise: Anne is not nice.\nFOL: -Nice(Anne)\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Dave is cold.\nFOL: Cold(Dave)\nPremise: Dave is quiet.\nFOL: Quiet(Dave)\nPremise: Fiona is young.\nFOL: Young(Fiona)\nPremise: Fiona is cold.\nFOL: Cold(Fiona)\nPremise: Green things are young.\nFOL: all x. (Green(x) -> Young(x))\nPremise: Green things are cold.\nFOL: all x. (Green(x) -> Cold(x))\nPremise: Quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: Quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: Nice things are green.\nFOL: all x. (Nice(x) -> Green(x))\nPremise: Young things are green.\nFOL: all x. (Young(x) -> Green(x))\nPremise: Smart things are not nice.\nFOL: all x. (Smart(x) -> -Nice(x))\nPremise: Cold things are furry.\nFOL: all x. (Cold(x) -> Furry(x))\n\n<CONTEXT>\nPremise: Anne is young.\nFOL: Young(Anne)\nPremise: Anne is cold.\nFOL: Cold(Anne)\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\nPremise: Dave is cold.\nFOL: Cold(Dave)\nPremise: Fiona is young.\nFOL: Young(Fiona)\n</CONTEXT>"], ["Premise: The dog is liked by the mouse and squirrel.\nFOL: Likes(Mouse, Dog) & Likes(Squirrel, Dog)\nPremise: The squirrel and mouse are food for other animals.\nFOL: Eats(Tiger, Squirrel) & Eats(Mouse, Dog)\nPremise: The squirrel has the ability to change the color green.\nFOL: Green(Squirrel)\nPremise: The squirrel can also eat other animals.\nFOL: Eats(Squirrel, Tiger)\nPremise: Cold creatures have the ability to see the squirrel.\nFOL: all x. (Cold(x) -> Sees(x, Squirrel))\n\n<CONTEXT>\nPremise: The dog is liked by the mouse and squirrel.\nFOL: Likes(Mouse, Dog) & Likes(Squirrel, Dog)\nPremise: The squirrel and mouse are food for other animals.\nFOL: Eats(Tiger, Squirrel) & Eats(Mouse, Dog)\nPremise: The squirrel has the ability to change the color green.\nFOL: Green(Squirrel)\nPremise: The squirrel can also eat other animals.\nFOL: Eats(Squirrel, Tiger)\nPremise: Cold creatures have the ability to see the squirrel.\nFOL: all x. (Cold(x) -> Sees(x, Squirrel))\n</CONTEXT>"], ["Premise: The bald eagle is an entity.\nFOL: Entity(BaldEagle)\nPremise: The bear is an entity.\nFOL: Entity(Bear)\nPremise: The lion is an entity.\nFOL: Entity(Lion)\nPremise: The squirrel is an entity.\nFOL: Entity(Squirrel)\nPremise: If an entity is kind, it is not unkind.\nFOL: all x. (Kind(x) -> -Unkind(x))\nPremise: If an entity needs another, it has a relationship with the other.\nFOL: all x. all y. (Needs(x, y) -> Relationship(x, y))\nPremise: If an entity visits another, it moves.\nFOL: all x. all y. (Visits(x, y) -> Moves(x))\nPremise: If an entity is blue, it is not red.\nFOL: all x. (Blue(x) -> -Red(x))\nPremise: If an entity is rough, it is not smooth.\nFOL: all x. (Rough(x) -> -Smooth(x))\nPremise: If an entity eats another, it consumes food.\nFOL: all x. all y. (Eats(x, y) -> ConsumesFood(x))\nPremise: If an entity eats another, the other becomes food.\nFOL: all x. all y. (Eats(x, y) -> Food(y))\nPremise: If an entity is not kind, it may be unkind.\nFOL: all x. (-Kind(x) -> MayBeUnkind(x))\n\n<CONTEXT>\nPremise: The bald eagle is an entity.\nFOL: Entity(BaldEagle)\nPremise: The bear is an entity.\nFOL: Entity(Bear)\nPremise: The lion is an entity.\nFOL: Entity(Lion)\nPremise: The squirrel is an entity.\nFOL: Entity(Squirrel)\nPremise: If an entity is kind, it is not unkind.\nFOL: all x. (Kind(x) -> -Unkind(x))\n</CONTEXT>"], ["Premise: Dave is not green.\nFOL: -Green(Dave)\nPremise: Erin is not green.\nFOL: -Green(Erin)\nPremise: Erin is not rough.\nFOL: -Rough(Erin)\nPremise: Fiona is green.\nFOL: Green(Fiona)\nPremise: Gary is not rough.\nFOL: -Rough(Gary)\nPremise: Gary is quiet.\nFOL: Quiet(Gary)\nPremise: Fiona is quiet.\nFOL: Quiet(Fiona)\nPremise: Dave is not nice.\nFOL: -Nice(Dave)\nPremise: Erin is not nice.\nFOL: -Nice(Erin)\nPremise: Dave is round.\nFOL: Round(Dave)\nPremise: Fiona is not young.\nFOL: -Young(Fiona)\nPremise: Dave is not quiet.\nFOL: -Quiet(Dave)\nPremise: Erin is not quiet.\nFOL: -Quiet(Erin)\nPremise: Fiona is not round.\nFOL: -Round(Fiona)\nPremise: Dave is not nice or quiet.\nFOL: -Nice(Dave) & -Quiet(Dave)\nPremise: Erin is not nice or quiet.\nFOL: -Nice(Erin) & -Quiet(Erin)\n\n<CONTEXT>\nPremise: Fiona is green.\nFOL: Green(Fiona)\nPremise: Gary is not rough.\nFOL: -Rough(Gary)\nPremise: Gary is quiet.\nFOL: Quiet(Gary)\nPremise: Fiona is quiet.\nFOL: Quiet(Fiona)\nPremise: Dave is round.\nFOL: Round(Dave)\n</CONTEXT>"], ["Premise: Anne is kind.\nFOL: Kind(Anne)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Fiona is kind.\nFOL: Kind(Fiona)\nPremise: Harry is kind.\nFOL: Kind(Harry)\nPremise: If something is white then it is nice.\nFOL: all x. (White(x) -> Nice(x))\n"], ["Premise: If something is red then it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nPremise: If something is blue then it is not red.\nFOL: all x. (Blue(x) -> -Red(x))\nPremise: If something is furry then it is not rough.\nFOL: all x. (Furry(x) -> -Rough(x))\nPremise: If something is rough then it is not furry.\nFOL: all x. (Rough(x) -> -Furry(x))\nPremise: If something is young then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\nPremise: If something is old then it is not young.\nFOL: all x. (Old(x) -> -Young(x))\nPremise: If something is cold then it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If something is hot then it is not cold.\nFOL: all x. (Hot(x) -> -Cold(x))\nPremise: If something is quiet then it is not loud.\nFOL: all x. (Quiet(x) -> -Loud(x))\nPremise: If something is loud then it is not quiet.\nFOL: all x. (Loud(x) -> -Quiet(x))\n\n<CONTEXT>\nPremise: If something is red then it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nPremise: If something is furry then it is not rough.\nFOL: all x. (Furry(x) -> -Rough(x))\nPremise: If something is young then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\nPremise: If something is cold then it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If something is quiet then it is not loud.\nFOL: all x. (Quiet(x) -> -Loud(x))\n</CONTEXT>"], ["Premise: The cow is a living thing.\nFOL: LivingThing(Cow)\nPremise: The bear is a living thing.\nFOL: LivingThing(Bear)\nPremise: The mouse is a living thing.\nFOL: LivingThing(Mouse)\nPremise: The rabbit is a living thing.\nFOL: LivingThing(Rabbit)\nPremise: The bear is big and rough.\nFOL: (Big(Bear) & Rough(Bear))\nPremise: If something is red and rough, it is nice.\nFOL: all x. ((Red(x) & Rough(x)) -> Nice(x))\nPremise: If something chases the cow, it is red.\nFOL: all x. (Chases(x, Cow) -> Red(x))\nPremise: If something is big, it is rough.\nFOL: all x. (Big(x) -> Rough(x))\nPremise: If the cow needs the rabbit, the rabbit is rough.\nFOL: (Needs(Cow, Rabbit) -> Rough(Rabbit))\n\n<CONTEXT>\nPremise: The cow is a living thing.\nFOL: LivingThing(Cow)\nPremise: The bear is a living thing.\nFOL: LivingThing(Bear)\nPremise: The mouse is a living thing.\nFOL: LivingThing(Mouse)\nPremise: The rabbit is a living thing.\nFOL: LivingThing(Rabbit)\nPremise: The bear is big and rough.\nFOL: (Big(Bear) & Rough(Bear))\n</CONTEXT>"], ["Premise: Bob is furry.\nFOL: Furry(Bob)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Erin is furry.\nFOL: Furry(Erin)\nPremise: Bob is rough.\nFOL: Rough(Bob)\nPremise: Erin is rough.\nFOL: Rough(Erin)\n"], ["Premise: If Bob is smart, then Bob is furry.\nFOL: Smart(Bob) -> Furry(Bob)\nPremise: If Bob is furry and Bob is not nice, then Bob is not red.\nFOL: (Furry(Bob) & -Nice(Bob)) -> -Red(Bob)\nPremise: Erin is not red, because she is smart and not furry.\nFOL: (Smart(Erin) & -Furry(Erin)) -> -Red(Erin)\nPremise: All quiet things, including Fiona and Erin, are young.\nFOL: (Quiet(Fiona) & Quiet(Erin)) -> (Young(Fiona) & Young(Erin))\nPremise: Erin, being both smart and furry, is red.\nFOL: (Smart(Erin) & Furry(Erin)) -> Red(Erin)\n\n<CONTEXT>\nPremise: If Bob is smart, then Bob is furry.\nFOL: Smart(Bob) -> Furry(Bob)\nPremise: If Bob is furry and Bob is not nice, then Bob is not red.\nFOL: (Furry(Bob) & -Nice(Bob)) -> -Red(Bob)\nPremise: Erin is not red, because she is smart and not furry.\nFOL: (Smart(Erin) & -Furry(Erin)) -> -Red(Erin)\nPremise: All quiet things, including Fiona and Erin, are young.\nFOL: (Quiet(Fiona) & Quiet(Erin)) -> (Young(Fiona) & Young(Erin))\nPremise: Erin, being both smart and furry, is red.\nFOL: (Smart(Erin) & Furry(Erin)) -> Red(Erin)\n</CONTEXT>"], ["Premise: Bob is a rough thing.\nFOL: RoughThing(Bob)\nPremise: Bob is a round thing.\nFOL: RoundThing(Bob)\nPremise: Dave is a nice thing.\nFOL: NiceThing(Dave)\nPremise: Erin is a cold thing.\nFOL: ColdThing(Erin)\nPremise: Erin is a round thing.\nFOL: RoundThing(Erin)\nPremise: Harry is a green thing.\nFOL: GreenThing(Harry)\nPremise: Harry is a quiet thing.\nFOL: QuietThing(Harry)\nPremise: If something is rough, it is also nice.\nFOL: all x. (Rough(x) -> Nice(x))\nPremise: If something is nice, it is also rough.\nFOL: all x. (Nice(x) -> Rough(x))\nPremise: If something is round and quiet, it is also cold.\nFOL: all x. ((Round(x) & Quiet(x)) -> Cold(x))\nPremise: If something is big and round, it is also green.\nFOL: all x. ((Big(x) & Round(x)) -> Green(x))\nPremise: If something is big and quiet, it is also round.\nFOL: all x. ((Big(x) & Quiet(x)) -> Round(x))\nPremise: If something is rough and quiet, it is also green.\nFOL: all x. ((Rough(x) & Quiet(x)) -> Green(x))\nPremise: If something is rough, it is also quiet.\nFOL: all x. (Rough(x) -> Quiet(x))\nPremise: If something is green, it is also big.\nFOL: all x. (Green(x) -> Big(x))\n\n<CONTEXT>\nPremise: Bob is a rough thing.\nFOL: RoughThing(Bob)\nPremise: Erin is a cold thing.\nFOL: ColdThing(Erin)\nPremise: Harry is a green thing.\nFOL: GreenThing(Harry)\nPremise: If something is round and quiet, it is also cold.\nFOL: all x. ((Round(x) & Quiet(x)) -> Cold(x))\nPremise: If something is green, it is also big.\nFOL: all x. (Green(x) -> Big(x))\n</CONTEXT>"], ["Premise: Dave is smart.\nFOL: Smart(Dave)\nPremise: Gary is big.\nFOL: Big(Gary)\nPremise: Gary is furry.\nFOL: Furry(Gary)\nPremise: Erin is young.\nFOL: Young(Erin)\nPremise: Anne is red.\nFOL: Red(Anne)\n<CONTEXT>\nPremise: Dave is smart.\nFOL: Smart(Dave)\nPremise: Gary is big.\nFOL: Big(Gary)\nPremise: Gary is furry.\nFOL: Furry(Gary)\nPremise: Erin is young.\nFOL: Young(Erin)\nPremise: Anne is red.\nFOL: Red(Anne)\n</CONTEXT>"], ["Premise: The bear is a living entity.\nFOL: LivingEntity(Bear)\nPremise: The cat is a living entity.\nFOL: LivingEntity(Cat)\nPremise: The lion is a living entity.\nFOL: LivingEntity(Lion)\nPremise: The mouse is a living entity.\nFOL: LivingEntity(Mouse)\nPremise: If something is round, it cannot be flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is kind, it is not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\nPremise: If something chases another, it sees that entity.\nFOL: all x. all y. (Chases(x, y) -> Sees(x, y))\nPremise: If something is chased, it fears the chaser.\nFOL: all x. all y. (Chases(x, y) -> Fears(y, x))\nPremise: If something sees another, it knows about the presence of that entity.\nFOL: all x. all y. (Sees(x, y) -> Knows(x, y))\nPremise: If something needs another, it lacks that entity.\nFOL: all x. all y. (Needs(x, y) -> Lacks(x, y))\n"], ["Premise: Bob is not warm.\nFOL: -Warm(Bob)\nPremise: Dave is not loud.\nFOL: -Loud(Dave)\nPremise: If something is red and smart, it is not cold.\nFOL: all x. ((Red(x) & Smart(x)) -> -Cold(x))\nPremise: If something is green and white, it is not loud.\nFOL: all x. ((Green(x) & White(x)) -> -Loud(x))\nPremise: Charlie is not loud.\nFOL: -Loud(Charlie)\n"], ["Premise: Anne is not young.\nFOL: -Young(Anne)\nPremise: Anne is not big.\nFOL: -Big(Anne)\nPremise: Anne is not round.\nFOL: -Round(Anne)\nPremise: Bob is not quiet.\nFOL: -Quiet(Bob)\nPremise: Bob is young.\nFOL: Young(Bob)\nPremise: Bob is big.\nFOL: Big(Bob)\nPremise: Bob is not white.\nFOL: -White(Bob)\nPremise: Gary is not young.\nFOL: -Young(Gary)\nPremise: Gary is not blue.\nFOL: -Blue(Gary)\nPremise: Harry is not blue.\nFOL: -Blue(Harry)\nPremise: Harry is big.\nFOL: Big(Harry)\nPremise: Harry is round.\nFOL: Round(Harry)\n\n<CONTEXT>\nPremise: Anne is not young.\nFOL: -Young(Anne)\nPremise: Anne is not big.\nFOL: -Big(Anne)\nPremise: Anne is not round.\nFOL: -Round(Anne)\nPremise: Bob is young.\nFOL: Young(Bob)\nPremise: Bob is big.\nFOL: Big(Bob)\n</CONTEXT>"], ["Premise: The bald eagle is not young.\nFOL: -Young(BaldEagle)\nPremise: The lion is not kind.\nFOL: -Kind(Lion)\nPremise: The bear does not chase the dog.\nFOL: -Chases(Bear, Dog)\nPremise: The lion is not young.\nFOL: -Young(Lion)\nPremise: The dog does not chase the bald eagle.\nFOL: -Chases(Dog, BaldEagle)\n\n<CONTEXT>\nPremise: The bald eagle is not young.\nFOL: -Young(BaldEagle)\nPremise: The lion is not kind.\nFOL: -Kind(Lion)\nPremise: The bear does not chase the dog.\nFOL: -Chases(Bear, Dog)\nPremise: The lion is not young.\nFOL: -Young(Lion)\nPremise: The dog does not chase the bald eagle.\nFOL: -Chases(Dog, BaldEagle)\n</CONTEXT>"], ["<CONTEXT>\nPremise: If something is big, it is not Fiona or Gary.\nFOL: all x. (Big(x) -> -(x=Fiona) & -(x=Gary))\nPremise: If something is round and not blue, it cannot be Fiona.\nFOL: all x. ((Round(x) & -Blue(x)) -> -(x=Fiona))\nPremise: All quiet things are either Charlie or young.\nFOL: all x. (Quiet(x) -> (x=Charlie) | Young(x))\nPremise: If something is rough and not big, it is Gary.\nFOL: all x. ((Rough(x) & -Big(x)) -> (x=Gary))\nPremise: If something is blue and not round, it is Fiona.\nFOL: all x. ((Blue(x) & -Round(x)) -> (x=Fiona))\n</CONTEXT>"], ["Premise: The tiger is not green.\nFOL: -Green(Tiger)\nPremise: The cow is not red.\nFOL: -Red(Cow)\nPremise: The cow does not visit the mouse.\nFOL: -Visits(Cow, Mouse)\nPremise: The cat does not visit the tiger.\nFOL: -Visits(Cat, Tiger)\nPremise: If something is blue then it does not need the tiger.\nFOL: all x. (Blue(x) -> -Needs(x, Tiger))\n<CONTEXT>\nPremise: The tiger is not green.\nFOL: -Green(Tiger)\nPremise: The cow is not red.\nFOL: -Red(Cow)\nPremise: The cow does not visit the mouse.\nFOL: -Visits(Cow, Mouse)\nPremise: The cat does not visit the tiger.\nFOL: -Visits(Cat, Tiger)\nPremise: If something is blue then it does not need the tiger.\nFOL: all x. (Blue(x) -> -Needs(x, Tiger))\n</CONTEXT>"], ["Premise: Bob is not big.\nFOL: -Big(Bob)\nPremise: Dave is not big.\nFOL: -Big(Dave)\nPremise: Erin is not big.\nFOL: -Big(Erin)\nPremise: Erin is furry.\nFOL: Furry(Erin)\nPremise: Erin is smart.\nFOL: Smart(Erin)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is green.\nFOL: Green(Charlie)\nPremise: If something is young and furry then it is not big.\nFOL: all x. (Young(x) & Furry(x) -> -Big(x))\n\n<CONTEXT>\nPremise: Bob is not big.\nFOL: -Big(Bob)\nPremise: Dave is not big.\nFOL: -Big(Dave)\nPremise: Erin is furry.\nFOL: Furry(Erin)\nPremise: Erin is smart.\nFOL: Smart(Erin)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n</CONTEXT>"], ["Premise: If Fiona is cold then Fiona is not white.\nFOL: Cold(Fiona) -> -White(Fiona)\nPremise: Erin being cold implies Erin is also kind.\nFOL: Cold(Erin) -> Kind(Erin)\nPremise: If Erin is white and kind then Erin is quiet.\nFOL: (White(Erin) & Kind(Erin)) -> Quiet(Erin)\nPremise: If Dave is round then Dave is smart.\nFOL: Round(Dave) -> Smart(Dave)\nPremise: If Dave is smart then Dave is white.\nFOL: Smart(Dave) -> White(Dave)\n\n<CONTEXT>\nPremise: If Fiona is cold then Fiona is not white.\nFOL: Cold(Fiona) -> -White(Fiona)\nPremise: Erin being cold implies Erin is also kind.\nFOL: Cold(Erin) -> Kind(Erin)\nPremise: If Erin is white and kind then Erin is quiet.\nFOL: (White(Erin) & Kind(Erin)) -> Quiet(Erin)\nPremise: If Dave is round then Dave is smart.\nFOL: Round(Dave) -> Smart(Dave)\nPremise: If Dave is smart then Dave is white.\nFOL: Smart(Dave) -> White(Dave)\n</CONTEXT>"], ["Premise: Harry is round.\nFOL: Round(Harry)\nPremise: Harry is young.\nFOL: Young(Harry)\nPremise: Harry is green.\nFOL: Green(Harry)\nPremise: Harry is not young.\nFOL: -Young(Harry)\nPremise: Fiona is round.\nFOL: Round(Fiona)\n\n<CONTEXT>\nPremise: Harry is round.\nFOL: Round(Harry)\nPremise: Harry is young.\nFOL: Young(Harry)\nPremise: Harry is green.\nFOL: Green(Harry)\nPremise: Harry is not young.\nFOL: -Young(Harry)\nPremise: Fiona is round.\nFOL: Round(Fiona)\n</CONTEXT>"], ["Premise: Charlie is a living being.\nFOL: LivingBeing(Charlie)\nPremise: Dave is a living being.\nFOL: LivingBeing(Dave)\nPremise: Fiona is a living being.\nFOL: LivingBeing(Fiona)\nPremise: Harry is a living being.\nFOL: LivingBeing(Harry)\nPremise: If something is big then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is cold then it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If something is green then it is not any other color.\nFOL: all x. (Green(x) -> (-Red(x) & -Blue(x) & -Yellow(x)))\nPremise: If something is red then it is not any other color.\nFOL: all x. (Red(x) -> (-Green(x) & -Blue(x) & -Yellow(x)))\nPremise: If something is smart then it is not dumb.\nFOL: all x. (Smart(x) -> -Dumb(x))\nPremise: If something is young then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\n\n<CONTEXT>\nPremise: Charlie is a living being.\nFOL: LivingBeing(Charlie)\nPremise: Dave is a living being.\nFOL: LivingBeing(Dave)\nPremise: Fiona is a living being.\nFOL: LivingBeing(Fiona)\nPremise: Harry is a living being.\nFOL: LivingBeing(Harry)\nPremise: If something is big then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\n</CONTEXT>"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If something is red, it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nPremise: If something is kind, it is not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\nPremise: If something is round, it is not flat.\nFOL: all x. (Round(x) -> -Flat(x))\nPremise: If something is cold, it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If something is not nice, it is not kind.\nFOL: all x. (-Nice(x) -> -Kind(x))\n\n<CONTEXT>\nPremise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: If something is kind, it is not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\n</CONTEXT>"], ["Premise: Harry is cold.\nFOL: Cold(Harry)\nPremise: Bob is furry.\nFOL: Furry(Bob)\nPremise: Fiona is smart.\nFOL: Smart(Fiona)\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\nPremise: If someone is red then they are round.\nFOL: all x. (Red(x) -> Round(x))\n"], ["Premise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: If someone is round, they are not square.\nFOL: all x. (Round(x) -> -Square(x))\nPremise: If someone is nice, they are not mean.\nFOL: all x. (Nice(x) -> -Mean(x))\nPremise: If someone likes someone, they do not hate them.\nFOL: all x. all y. (Likes(x, y) -> -Hates(x, y))\nPremise: If someone chases someone, they do not run from them.\nFOL: all x. all y. (Chases(x, y) -> -RunsFrom(x, y))\nPremise: If someone eats someone, they are not eaten by them.\nFOL: all x. all y. (Eats(x, y) -> -EatenBy(y, x))\nPremise: If someone is young, they are not old.\nFOL: all x. (Young(x) -> -Old(x))\n"], ["Premise: Charlie is not big.\nFOL: -Big(Charlie)\nPremise: Dave is not white.\nFOL: -White(Dave)\nPremise: Dave is big.\nFOL: Big(Dave)\nPremise: Fiona is not white.\nFOL: -White(Fiona)\nPremise: Gary is blue.\nFOL: Blue(Gary)\nPremise: Fiona is kind.\nFOL: Kind(Fiona)\nPremise: Fiona is not rough.\nFOL: -Rough(Fiona)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is not rough.\nFOL: -Rough(Charlie)\nPremise: Gary is not big.\nFOL: -Big(Gary)\nPremise: Dave is not rough.\nFOL: -Rough(Dave)\n\n<CONTEXT>\nPremise: Charlie is not big.\nFOL: -Big(Charlie)\nPremise: Dave is big.\nFOL: Big(Dave)\nPremise: Fiona is not white.\nFOL: -White(Fiona)\nPremise: Gary is blue.\nFOL: Blue(Gary)\nPremise: Fiona is not rough.\nFOL: -Rough(Fiona)\n</CONTEXT>"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: If an animal is blue, it cannot be of any other color.\nFOL: all x. (Blue(x) -> -Red(x) & -Green(x) & -Yellow(x) & -Black(x))\nPremise: If an animal sees another, it must have eyes.\nFOL: all x. all y. (Sees(x, y) -> HasEyes(x))\nPremise: If an animal likes another, it has feelings.\nFOL: all x. all y. (Likes(x, y) -> HasFeelings(x))\nPremise: If an animal needs another, it depends on that animal.\nFOL: all x. all y. (Needs(x, y) -> DependsOn(x, y))\nPremise: If someone is rough, they are not smooth.\nFOL: all x. (Rough(x) -> -Smooth(x))\nPremise: If an animal is not blue, it could be of any other color.\nFOL: all x. (-Blue(x) -> Red(x) | Green(x) | Yellow(x) | Black(x))\n\n<CONTEXT>\nPremise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: If an animal sees another, it must have eyes.\nFOL: all x. all y. (Sees(x, y) -> HasEyes(x))\n</CONTEXT>"], ["Premise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: If someone is green and they eat something, that thing is not a bear.\nFOL: all x. all y. ((Green(x) & Eat(x, y)) -> -Bear(y))\nPremise: If someone is red and they see something, that thing is not a lion.\nFOL: all x. all y. ((Red(x) & See(x, y)) -> -Lion(y))\nPremise: If someone is nice and they are a bear, they do not eat lions.\nFOL: all x. (Nice(x) & Bear(x) -> -Eat(x, Lion))\nPremise: If something is a cat and it sees a bear, it does not eat lions.\nFOL: all x. (Cat(x) & See(x, Bear) -> -Eat(x, Lion))\nPremise: If something is a bear and it is nice, it does not eat cats.\nFOL: all x. (Bear(x) & Nice(x) -> -Eat(x, Cat))\nPremise: If something is a bald eagle and it is nice, it does not eat bears.\nFOL: all x. (BaldEagle(x) & Nice(x) -> -Eat(x, Bear))\n\n<CONTEXT>\nPremise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The lion is an animal.\nFOL: Animal(Lion)\nPremise: If someone is nice and they are a bear, they do not eat lions.\nFOL: all x. (Nice(x) & Bear(x) -> -Eat(x, Lion))\n</CONTEXT>"], ["Premise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: If an animal eats another, it is a predator.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Predator(x))\nPremise: If an animal is chased by another, it is prey.\nFOL: all x. all y. (Animal(x) & Animal(y) & Chases(y, x) -> Prey(x))\nPremise: If someone is nice, they are not bad.\nFOL: all x. (Nice(x) -> -Bad(x))\nPremise: If something is green, it is not blue.\nFOL: all x. (Green(x) -> -Blue(x))\nPremise: If something is big, it is not small.\nFOL: all x. (Big(x) -> -Small(x))\nPremise: If something is round, it is not square.\nFOL: all x. (Round(x) -> -Square(x))\n\n<CONTEXT>\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: The tiger is an animal.\nFOL: Animal(Tiger)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: If an animal eats another, it is a predator.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Predator(x))\n</CONTEXT>"], ["Premise: Dave is green.\nFOL: Green(Dave)\nPremise: Dave is kind.\nFOL: Kind(Dave)\nPremise: Fiona is kind.\nFOL: Kind(Fiona)\nPremise: Fiona is furry.\nFOL: Furry(Fiona)\nPremise: Fiona is green.\nFOL: Green(Fiona)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: Harry is big.\nFOL: Big(Harry)\nPremise: Harry is kind.\nFOL: Kind(Harry)\nPremise: Gary is smart.\nFOL: Smart(Gary)\n\n<CONTEXT>\nPremise: Dave is green.\nFOL: Green(Dave)\nPremise: Dave is kind.\nFOL: Kind(Dave)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: Harry is big.\nFOL: Big(Harry)\nPremise: Gary is smart.\nFOL: Smart(Gary)\n</CONTEXT>"], ["Premise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The cat is a potential food source for other animals.\nFOL: FoodSource(Cat)\nPremise: The cat is not always bigger than what it eats.\nFOL: all x. (Eats(Cat, x) -> -Bigger(Cat, x))\nPremise: A big animal may eat a smaller animal.\nFOL: all x. all y. ((Big(x) & Smaller(y)) -> Likely(Eats(x, y)))\nPremise: A rough animal may not be liked by others.\nFOL: all x. (Rough(x) -> all y. (-Likes(y, x)))\nPremise: An animal may need another animal for various reasons.\nFOL: all x. all y. (Animal(x) & Animal(y) -> Possible(Needs(x, y)))\nPremise: Animals can have different shapes.\nFOL: all x. (Animal(x) -> Exists(y. Shape(x, y)))\n\n<CONTEXT>\nPremise: The cat is an animal.\nFOL: Animal(Cat)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The mouse is an animal.\nFOL: Animal(Mouse)\nPremise: The cat is a potential food source for other animals.\nFOL: FoodSource(Cat)\n</CONTEXT>"], ["Premise: Anne is furry.\nFOL: Furry(Anne)\nPremise: Fiona is young.\nFOL: Young(Fiona)\nPremise: Gary is young.\nFOL: Young(Gary)\nPremise: Erin is cold.\nFOL: Cold(Erin)\nPremise: Erin is not green.\nFOL: -Green(Erin)\n"], ["Premise: The bear is a living creature.\nFOL: LivingCreature(Bear)\nPremise: The tiger is a living creature.\nFOL: LivingCreature(Tiger)\nPremise: The dog is a living creature.\nFOL: LivingCreature(Dog)\nPremise: The mouse is a living creature.\nFOL: LivingCreature(Mouse)\nPremise: If something is kind, it is not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\nPremise: If something is rough, it is not smooth.\nFOL: all x. (Rough(x) -> -Smooth(x))\nPremise: If something is red, it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\nPremise: If something is cold, it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\nPremise: If something is chased, it is not at rest.\nFOL: all x. (Chased(x) -> -AtRest(x))\nPremise: If something is needed, it is not unneeded.\nFOL: all x. (Needed(x) -> -Unneeded(x))\n"], ["<CONTEXT>\nPremise: Bob is a person.\nFOL: Person(Bob)\nPremise: Charlie is a person.\nFOL: Person(Charlie)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: If something is green and white then it's not blue.\nFOL: all x. ((Green(x) & White(x)) -> -Blue(x))\n</CONTEXT>"], ["Premise: If Erin is red, then Erin is furry.\nFOL: (Red(Erin) -> Furry(Erin))\nPremise: If Erin is furry, then Erin is smart.\nFOL: (Furry(Erin) -> Smart(Erin))\nPremise: If Bob is smart, then Bob is cold.\nFOL: (Smart(Bob) -> Cold(Bob))\nPremise: If someone is kind, they are not unkind.\nFOL: all x. (Kind(x) -> -Unkind(x))\nPremise: If someone is cold, they are not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\n\n<CONTEXT>\nPremise: If Erin is red, then Erin is furry.\nFOL: (Red(Erin) -> Furry(Erin))\nPremise: If Erin is furry, then Erin is smart.\nFOL: (Furry(Erin) -> Smart(Erin))\nPremise: If Bob is smart, then Bob is cold.\nFOL: (Smart(Bob) -> Cold(Bob))\nPremise: If someone is kind, they are not unkind.\nFOL: all x. (Kind(x) -> -Unkind(x))\nPremise: If someone is cold, they are not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\n</CONTEXT>"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\nPremise: If something is kind, it is not rough.\nFOL: all x. (Kind(x) -> -Rough(x))\nPremise: If something is cold, it is not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\nPremise: If something is green, it is not red.\nFOL: all x. (Green(x) -> -Red(x))\nPremise: If something chases another, it does not need the other.\nFOL: all x. all y. (Chases(x, y) -> -Needs(x, y))\nPremise: If something eats another, it does not need the other.\nFOL: all x. all y. (Eats(x, y) -> -Needs(x, y))\nPremise: If something needs another, it does not chase the other.\nFOL: all x. all y. (Needs(x, y) -> -Chases(x, y))\n\n<CONTEXT>\nPremise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\nPremise: If something is kind, it is not rough.\nFOL: all x. (Kind(x) -> -Rough(x))\n</CONTEXT>"]]