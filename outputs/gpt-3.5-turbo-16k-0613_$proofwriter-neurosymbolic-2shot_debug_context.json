[["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If something needs the rabbit, then it is an animal.\nFOL: all x. (Needs(x, rabbit) -> Animal(x))\n\nPremise: If something needs the tiger, then it is an animal.\nFOL: all x. (Needs(x, tiger) -> Animal(x))\n\nPremise: If something sees the rabbit, then it is an animal.\nFOL: all x. (Sees(x, rabbit) -> Animal(x))\n\nPremise: If something sees the dog, then it is an animal.\nFOL: all x. (Sees(x, dog) -> Animal(x))\n\nPremise: If something sees the tiger, then it is an animal.\nFOL: all x. (Sees(x, tiger) -> Animal(x))\n\nPremise: If something eats the dog, then it is an animal.\nFOL: all x. (Eats(x, dog) -> Animal(x))\n\nPremise: If something eats the rabbit, then it is an animal.\nFOL: all x. (Eats(x, rabbit) -> Animal(x))\n\nPremise: If something eats the tiger, then it is an animal.\nFOL: all x. (Eats(x, tiger) -> Animal(x))\n\nPremise: If something eats the bear, then it is an animal.\nFOL: all x. (Eats(x, bear) -> Animal(x))\n\nPremise: If something is round, then it is an object.\nFOL: all x. (Round(x) -> Object(x))\n\nPremise: If something is cold, then it is not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\n\nPremise: If something is young, then it is not old.\nFOL: all x. (Young(x) -> -Old(x))\n"], ["Premise: All nice people are round.\nFOL: all x. (Nice(x) -> Round(x))\n\nPremise: If someone is white then they are not quiet.\nFOL: all x. (White(x) -> -Quiet(x))\n\nPremise: If someone is smart then they are not quiet.\nFOL: all x. (Smart(x) -> -Quiet(x))\n\nPremise: If someone is smart then they are not cold.\nFOL: all x. (Smart(x) -> -Cold(x))\n\nPremise: If someone is round then they are not cold.\nFOL: all x. (Round(x) -> -Cold(x))\n\nPremise: If someone is not quiet then they are not round.\nFOL: all x. (-Quiet(x) -> -Round(x))\n\nPremise: If someone is not nice then they are not round.\nFOL: all x. (-Nice(x) -> -Round(x))\n\nPremise: If someone is green then they are not white.\nFOL: all x. (Green(x) -> -White(x))\n\nPremise: If someone is not cold then they are not nice.\nFOL: all x. (-Cold(x) -> -Nice(x))\n\nPremise: If someone is not nice then they are not smart.\nFOL: all x. (-Nice(x) -> -Smart(x))"], ["Premise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Nice things are kind.\nFOL: all x. (Nice(x) -> Kind(x))\nPremise: Kind things are nice.\nFOL: all x. (Kind(x) -> Nice(x))\nPremise: Nice things are furry.\nFOL: all x. (Nice(x) -> Furry(x))\nPremise: Kind things are furry.\nFOL: all x. (Kind(x) -> Furry(x))\nPremise: Furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise"], ["Premise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All red things are blue.\nFOL: all x. (Red(x) -> Blue(x))\n\nPremise: All smart things are nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nPremise: All cold things are furry.\nFOL: all x. (Cold(x) -> Furry(x))\n\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: All quiet things are smart.\nFOL: all x. (Quiet(x) -> Smart(x))\n\nPremise: All red, nice things are furry.\nFOL: all x. (Red(x) & Nice(x) -> Furry(x))\n\nPremise: All blue, nice things are furry.\nFOL: all x. (Blue(x) & Nice(x) -> Furry(x))\n\nPremise: All blue, quiet things are furry.\nFOL: all x. (Blue(x) & Quiet(x) -> Furry(x))\n\nPremise: All smart, cold things are furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red, quiet things are smart.\nFOL: all x. (Red(x) & Quiet(x) -> Smart(x))\n\nPremise: All blue, nice things are smart.\nFOL: all x. (Blue(x) & Nice(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)"], ["Premise: Dave is a living being.\nFOL: LivingBeing(Dave)\n\nPremise: Erin is a living being.\nFOL: LivingBeing(Erin)\n\nPremise: Fiona is a living being.\nFOL: LivingBeing(Fiona)\n\nPremise: Gary is a living being.\nFOL: LivingBeing(Gary)\n\nPremise: If something is furry, it is a living being.\nFOL: all x. (Furry(x) -> LivingBeing(x))\n\nPremise: If something is kind, it is a living being.\nFOL: all x. (Kind(x) -> LivingBeing(x))\n\nPremise: If something is green, it is a living being.\nFOL: all x. (Green(x) -> LivingBeing(x))\n\nPremise: If something is round, it is a living being.\nFOL: all x. (Round(x) -> LivingBeing(x))\n\nPremise: If something is young, it is a living being.\nFOL: all x. (Young(x) -> LivingBeing(x))\n\nPremise: If something is big, it is a living being.\nFOL: all x. (Big(x) -> LivingBeing(x))\n\nPremise: If something is white, it is a living being.\nFOL: all x. (White(x) -> LivingBeing(x))\n\nPremise: If something is not kind, it is a living being.\nFOL: all x. (-Kind(x) -> LivingBeing(x))\n\nPremise: If something is not young, it is a living being.\nFOL: all x. (-Young(x) -> LivingBeing(x))\n\nPremise: If something is not furry, it is a living being.\nFOL: all x. (-Furry(x) -> LivingBeing(x))\n\nPremise: If something is not green, it is a living being.\nFOL: all x. (-Green(x) -> LivingBeing(x))\n\nPremise: If something is not round, it is a living being.\nFOL: all x. (-Round(x) -> LivingBeing(x))\n\nPremise: If something is not big, it is a living being.\nFOL: all x. (-Big(x) -> LivingBeing(x))\n\nPremise: If something is not white, it is a living being.\nFOL: all x. (-White(x) -> LivingBeing(x))"], ["Premise: The mouse is not round.\nFOL: -Round(Mouse)\nPremise: The tiger is not round.\nFOL: -Round(Tiger)\nPremise: The bear is not round.\nFOL: -Round(Bear)\nPremise: The mouse does not need the tiger.\nFOL: -Needs(Mouse, Tiger)\nPremise: The bear does not need the tiger.\nFOL: -Needs(Bear, Tiger)\nPremise: The bald eagle does not chase the mouse.\nFOL: -Chases(BaldEagle, Mouse)\nPremise: If something needs the tiger, then it does not chase the tiger.\nFOL: all x. (Needs(x, Tiger) -> -Chases(x, Tiger))\nPremise: If something chases the bald eagle, then it does not eat the mouse.\nFOL: all x. (Chases(x, BaldEagle) -> -Eats(x, Mouse))\nPremise: If something chases the tiger, then it does not eat the mouse.\nFOL: all x. (Chases(x, Tiger) -> -Eats(x, Mouse))\nPremise: If something chases the bald eagle, then it does not eat the tiger.\nFOL: all x. (Chases(x, BaldEagle) -> -Eats(x, Tiger))\nPremise: If something eats the mouse, then it does not need the mouse.\nFOL: all x. (Eats(x, Mouse) -> -Needs(x, Mouse))\nPremise: If something eats the tiger, then it does not need the tiger.\nFOL: all x. (Eats(x, Tiger) -> -Needs(x, Tiger))\nPremise: If something eats the bald eagle, then it does not need the bald eagle.\nFOL: all x. (Eats(x, BaldEagle) -> -Needs(x, BaldEagle))\nPremise: If something eats the mouse, then it does not chase the mouse.\nFOL: all x. (Eats(x, Mouse) -> -Chases(x, Mouse))\nPremise: If something eats the tiger, then it does not chase the tiger.\nFOL: all x. (Eats(x, Tiger) -> -Chases(x, Tiger))\nPremise: If something eats the bald eagle, then it does not chase the bald eagle.\nFOL: all x. (Eats(x, BaldEagle) -> -Chases(x, BaldEagle))\nPremise: If something chases the mouse, then it does not eat the mouse.\nFOL: all x. (Chases(x, Mouse) -> -Eats(x, Mouse))\nPremise: If something chases the tiger, then it does not eat the tiger.\nFOL: all x. (Chases(x, Tiger) -> -Eats(x, Tiger))\nPremise: If something chases the bald eagle, then it does not eat the bald eagle.\nFOL: all x. (Chases(x, BaldEagle) -> -Eats(x, BaldEagle))"], ["Premise: Erin is smart.\nFOL: Smart(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\nPremise: Gary is white.\nFOL: White(Gary)\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\nPremise: Harry is white.\nFOL: White(Harry)\nPremise: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and green then it is smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nPremise: If Anne is rough then Anne is green.\nFOL: (Rough(Anne) -> Green(Anne))\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is nice and white then it is quiet.\nFOL: all x. (Nice(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Anne is green.\nFOL: Green(Anne)\nPremise: Erin is nice.\nFOL: Nice(Erin)\nPremise: Gary is nice.\nFOL: Nice(Gary)\nPremise: Harry is not nice.\nFOL: -Nice(Harry)\nPremise: Anne is nice.\nFOL: Nice(Anne)"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: The dog is not a cat.\nFOL: -Cat(dog)\n\nPremise: The lion is not a dog.\nFOL: -Dog(lion)\n\nPremise: The mouse is not a lion.\nFOL: -Lion(mouse)\n\nPremise: The tiger is not a mouse.\nFOL: -Mouse(tiger)\n\nPremise: If someone eats the tiger, then the tiger is no longer alive.\nFOL: all x. (Eats(x, tiger) -> -Alive(tiger))\n\nPremise: If someone eats the mouse, then the mouse is no longer alive.\nFOL: all x. (Eats(x, mouse) -> -Alive(mouse))\n\nPremise: If someone eats the lion, then the lion is no longer alive.\nFOL: all x. (Eats(x, lion) -> -Alive(lion))\n\nPremise: If someone eats the dog, then the dog is no longer alive.\nFOL: all x. (Eats(x, dog) -> -Alive(dog))\n\nPremise: If someone visits the cat, then the cat is aware of their presence.\nFOL: all x. (Visits(x, cat) -> Aware(cat, x))\n\nPremise: If someone visits the dog, then the dog is aware of their presence.\nFOL: all x. (Visits(x, dog) -> Aware(dog, x))\n\nPremise: If someone visits the lion, then the lion is aware of their presence.\nFOL: all x. (Visits(x, lion) -> Aware(lion, x))\n\nPremise: If someone visits the mouse, then the mouse is aware of their presence.\nFOL: all x. (Visits(x, mouse) -> Aware(mouse, x))\n\nPremise: If someone visits the tiger, then the tiger is aware of their presence.\nFOL: all x. (Visits(x, tiger) -> Aware(tiger, x))\n\nPremise: If someone visits the animal, then the animal is aware of their presence.\nFOL: all x. (Visits(x, animal) -> Aware(animal, x))\n\nPremise: If someone needs the dog, then the dog is essential to their well-being.\nFOL: all x. (Needs(x, dog) -> Essential(dog, x))\n\nPremise: If someone needs the lion, then the lion is essential to their well-being.\nFOL: all x. (Needs(x, lion) -> Essential(lion, x))\n\nPremise: If someone needs the mouse, then the mouse is essential to their well-being.\nFOL: all x. (Needs(x, mouse) -> Essential(mouse, x))\n\nPremise: If someone needs the tiger, then the tiger is essential to their well-being.\nFOL: all x. (Needs(x, tiger) -> Essential(tiger, x))\n"], ["Premise: Bob is a person.\nFOL: Person(Bob)\nPremise: Erin is a person.\nFOL: Person(Erin)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: If someone is rough then they are big.\nFOL: all x. (Rough(x) -> Big(x))\nPremise: If someone is smart and rough then they are big.\nFOL: all x. all y. (Smart(x) & Rough(y) -> Big(x))\nPremise: If someone is young then they are big.\nFOL: all x. (Young(x) -> Big(x))\nPremise: If someone is furry and not rough then they are kind.\nFOL: all x. (Furry(x) & -Rough(x) -> Kind(x))\nPremise: If someone is rough and furry then they are white.\nFOL: all x. (Rough(x) & Furry(x) -> White(x))\nPremise: All smart, young people are furry.\nFOL: all x. (Smart(x) & Young(x) -> Furry(x))\nPremise: If Bob is rough then Bob is furry.\nFOL: all x. (Rough(x) -> Furry(x))\nPremise: If someone is white then they are young.\nFOL: all x. (White(x) -> Young(x))\nPremise: All big, furry people are not smart.\nFOL: all x. (Big(x) & Furry(x) -> -Smart(x))\nPremise: Bob is furry.\nFOL: Furry(Bob)\nPremise: Bob is kind.\nFOL: Kind(Bob)\nPremise: Bob is white.\nFOL: White(Bob)\nPremise: Erin is kind.\nFOL: Kind(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\nPremise: Gary is rough.\nFOL: Rough(Gary)\nPremise: Harry is not smart.\nFOL: -Smart(Harry)\nPremise: Gary is big.\nFOL: Big(Gary)"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The cat is an animal.\nFOL: Animal(cat)\n\nPremise: The cow is an animal.\nFOL: Animal(cow)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: If someone is kind and they see the dog then the dog is kind.\nFOL: all x. (Kind(x) & See(x, dog)) -> Kind(dog)\n\nPremise: If someone eats the bear and the bear chases the dog then the dog chases the bear.\nFOL: all x. (Eat(x, bear) & Chase(bear, dog)) -> Chase(dog, bear)\n\nPremise: If someone sees the bear then the bear sees them.\nFOL: all x. See(x, bear) -> See(bear, x)\n\nPremise: If someone sees the cat and the cat sees the bear then they see each other.\nFOL: all x. (See(x, cat) & See(cat, bear)) -> (See(x, bear) & See(bear, x))\n\nPremise: If someone is nice and they eat the cow then the cow is not nice.\nFOL: all x. (Nice(x) & Eat(x, cow)) -> -Nice(cow)\n\nPremise: If someone sees the cow then the cow sees them.\nFOL: all x. See(x, cow) -> See(cow, x)\n\nPremise: If someone is green then they are not red.\nFOL: all x. Green(x) -> -Red(x)\n\nPremise: If someone eats the dog then they are not kind.\nFOL: all x. Eat(x, dog) -> -Kind(x)"], ["Premise: Anne is not smart.\nFOL: -Smart(Anne)\nPremise: Dave is not cold.\nFOL: -Cold(Dave)\nPremise: Gary is not round.\nFOL: -Round(Gary)\nPremise: Harry is not big.\nFOL: -Big(Harry)"], ["Premise: If something is round, then it is cold.\nFOL: all x. (Round(x) -> Cold(x))\n\nPremise: If something is white, then it is round.\nFOL: all x. (White(x) -> Round(x))\n\nPremise: If something is red, then it is round.\nFOL: all x. (Red(x) -> Round(x))\n\nPremise: If something is red, then it is white.\nFOL: all x. (Red(x) -> White(x))\n\nPremise: If something is round, then it is young.\nFOL: all x. (Round(x) -> Young(x))\n\nPremise: If something is white, then it is young.\nFOL: all x. (White(x) -> Young(x))\n\nPremise: If something is red, then it is young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: If something is smart, then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: An animal can see.\nFOL: all x. (Animal(x) -> CanSee(x))\n\nPremise: An animal can chase.\nFOL: all x. (Animal(x) -> CanChase(x))\n\nPremise: The lion is not round.\nFOL: -Round(lion)\n\nPremise: The lion is not nice.\nFOL: -Nice(lion)\n\nPremise: The lion does not chase itself.\nFOL: -Chases(lion, lion)\n\nPremise: The lion does not chase the tiger.\nFOL: -Chases(lion, tiger)\n\nPremise: The lion does not visit the rabbit.\nFOL: -Visits(lion, rabbit)\n\nPremise: The dog does not visit the lion.\nFOL: -Visits(dog, lion)\n\nPremise: The rabbit does not visit the dog.\nFOL: -Visits(rabbit, dog)\n\nPremise: The rabbit does not visit the lion.\nFOL: -Visits(rabbit, lion)\n\nPremise: The rabbit does not visit the tiger.\nFOL: -Visits(rabbit, tiger)\n\nPremise: The tiger does not visit the rabbit.\nFOL: -Visits(tiger, rabbit)\n\nPremise: The tiger does not visit the lion.\nFOL: -Visits(tiger, lion)\n\nPremise: The tiger does not visit the dog.\nFOL: -Visits(tiger, dog)\n\nPremise: The dog is not round.\nFOL: -Round(dog)\n\nPremise: The dog is not nice.\nFOL: -Nice(dog)\n\nPremise: The dog does not visit itself.\nFOL: -Visits(dog, dog)"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The cow is an animal.\nFOL: Animal(cow)\nPremise: The dog is an animal.\nFOL: Animal(dog)\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\nPremise: If something chases the rabbit then it is a predator.\nFOL: all x. (Chases(x, rabbit) -> Predator(x))\nPremise: If something chases the cow then it is a predator.\nFOL: all x. (Chases(x, cow) -> Predator(x))\nPremise: If something chases the bear then it is a predator.\nFOL: all x. (Chases(x, bear) -> Predator(x))\nPremise: If something chases the dog then it is a predator.\nFOL: all x. (Chases(x, dog) -> Predator(x))\nPremise: If something eats the cow then it is a herbivore.\nFOL: all x. (Eats(x, cow) -> Herbivore(x))\nPremise: If something eats the bear then it is a carnivore.\nFOL: all x. (Eats(x, bear) -> Carnivore(x))\nPremise: If something eats the dog then it is a carnivore.\nFOL: all x. (Eats(x, dog) -> Carnivore(x))\nPremise: If something eats the rabbit then it is a carnivore.\nFOL: all x. (Eats(x, rabbit) -> Carnivore(x))\nPremise: If something is big then it is larger than something small.\nFOL: all x. all y. (Big(x) & Small(y) -> Larger(x, y))\nPremise: If something is red then it is a color.\nFOL: all x. (Red(x) -> Color(x))\nPremise: If something is round then it is a shape.\nFOL: all x. (Round(x) -> Shape(x))\nPremise: If something is round and big then it is a ball.\nFOL: all x. (Round(x) & Big(x) -> Ball(x))\nPremise: If something is round and not big then it is a circle.\nFOL: all x. (Round(x) & -Big(x) -> Circle(x))\nPremise: If something is larger than a bear and smaller than a cow then it is an animal.\nFOL: all x. (Larger(x, bear) & Smaller(x, cow) -> Animal(x))\nPremise: If something is larger than a rabbit and smaller than a cow then it is an animal.\nFOL: all x. (Larger(x, rabbit) & Smaller(x, cow) -> Animal(x))\nPremise: If something is larger than a bear and smaller than a rabbit then it is an animal.\nFOL: all x. (Larger(x, bear) & Smaller(x, rabbit) -> Animal(x))\nPremise: If something is larger than a bear and smaller than a cow then it is an animal.\nFOL: all x. (Larger(x, bear) & Smaller(x, cow) -> Animal(x))\nPremise: If something is larger than a rabbit and smaller than a cow then it is an animal.\nFOL: all x. (Larger(x, rabbit) & Smaller(x, cow) -> Animal(x))"], ["Premise: Anne is nice.\nFOL: Nice(Anne)\n\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Erin is nice.\nFOL: Nice(Erin)\n\nPremise: All rough things are not nice.\nFOL: all x. (Rough(x) -> -Nice(x))\n\nPremise: All blue things are not nice.\nFOL: all x. (Blue(x) -> -Nice(x))\n\nPremise: All white things are not nice.\nFOL: all x. (White(x) -> -Nice(x))\n\nPremise: All round things are not nice.\nFOL: all x. (Round(x) -> -Nice(x))\n\nPremise: All young things are not nice.\nFOL: all x. (Young(x) -> -Nice(x))"], ["Premise: Bob is a person.\nFOL: Person(Bob)\n\nPremise: Charlie is a person.\nFOL: Person(Charlie)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Quiet people are young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: Big people are young.\nFOL: all x. (Big(x) -> Young(x))\n\nPremise: All people who are quiet and big are round.\nFOL: all x. (Quiet(x) & Big(x) -> Round(x))\n\nPremise: If Charlie is nice, Charlie is big, and Charlie is round, then Charlie is blue.\nFOL: (Nice(Charlie) & Big(Charlie) & Round(Charlie)) -> Blue(Charlie)\n\nPremise: All nice people are big.\nFOL: all x. (Nice(x) -> Big(x))\n\nPremise: Bob is round.\nFOL: Round(Bob)"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The cat is an animal.\nFOL: Animal(cat)\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\nPremise: If someone is cold then they are not warm.\nFOL: all x. (Cold(x) -> -Warm(x))\nPremise: If someone visits the bear then the bear is visited.\nFOL: all x. (Visits(x, bear) -> Visited(bear))\nPremise: If someone sees the cat then the cat is seen.\nFOL: all x. (Sees(x, cat) -> Seen(cat))\nPremise: If someone visits the bear then they are not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(x))\nPremise: If someone sees the mouse then the mouse is seen.\nFOL: all x. (Sees(x, mouse) -> Seen(mouse))\nPremise: If someone visits the mouse then they are not cold.\nFOL: all x. (Visits(x, mouse) -> -Cold(x))\nPremise: If someone visits the bear then they are not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(x))\nPremise: If someone visits the cat then the cat is visited.\nFOL: all x. (Visits(x, cat) -> Visited(cat))\nPremise: If someone visits the mouse then the mouse is visited.\nFOL: all x. (Visits(x, mouse) -> Visited(mouse))\nPremise: If someone visits the mouse then they are not warm.\nFOL: all x. (Visits(x, mouse) -> -Warm(x))\nPremise: If someone visits the mouse then they are not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(x))\nPremise: If someone visits the bear then the bear is not rough.\nFOL: all x. (Visits(x, bear) -> -Rough(bear))\nPremise: If someone sees the bear then they are not warm.\nFOL: all x. (Sees(x, bear) -> -Warm(x))\nPremise: If someone sees the bear then they are not cold.\nFOL: all x. (Sees(x, bear) -> -Cold(x))\nPremise: If someone visits the cat then the cat is not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(cat))\nPremise: If someone sees the bear and the bear does not visit the cat then someone does not need the mouse.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Needs(x, mouse))\nPremise: If someone visits the cat then they are not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(x))\nPremise: If someone visits the cat then the cat is not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(cat))\nPremise: The mouse is not rough.\nFOL: -Rough(mouse)\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone sees the bear and the bear does not visit the cat then someone does not need the cat.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Needs(x, cat))\nPremise: If someone visits the bear then the bear is not seen.\nFOL: all x. (Visits(x, bear) -> -Seen(bear))\nPremise: If someone sees the bear and the bear does not visit the cat then the bear does not visit the mouse.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Visits(bear, mouse))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the mouse then the mouse is not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(mouse))\nPremise: If someone visits the cat then the cat is not seen.\nFOL: all x. (Visits(x, cat) -> -Seen(cat))\nPremise: If someone visits the mouse then the mouse is not cold.\nFOL: all x. (Visits(x, mouse) -> -Cold(mouse))\nPremise: If someone visits the mouse then the mouse is not warm.\nFOL: all x. (Visits(x, mouse) -> -Warm(mouse))\nPremise: If someone visits the bear then the bear is not seen.\nFOL: all x. (Visits(x, bear) -> -Seen(bear))\nPremise: If someone visits the bear then the bear is not rough.\nFOL: all x. (Visits(x, bear) -> -Rough(bear))\nPremise: If someone sees the bear and the bear does not visit the cat then someone does not see the cat.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Sees(x, cat))\nPremise: If someone visits the bear then the bear is not rough.\nFOL: all x. (Visits(x, bear) -> -Rough(bear))\nPremise: If someone visits the cat then the cat is not seen.\nFOL: all x. (Visits(x, cat) -> -Seen(cat))\nPremise: If someone visits the cat then the cat is not cold.\nFOL: all x. (Visits(x, cat) -> -Cold(cat))\nPremise: If someone visits the cat then the cat is not warm.\nFOL: all x. (Visits(x, cat) -> -Warm(cat))\nPremise: If someone visits the bear then the bear is not seen.\nFOL: all x. (Visits(x, bear) -> -Seen(bear))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the mouse then the mouse is not cold.\nFOL: all x. (Visits(x, mouse) -> -Cold(mouse))\nPremise: If someone visits the mouse then the mouse is not warm.\nFOL: all x. (Visits(x, mouse) -> -Warm(mouse))\nPremise: If someone visits the mouse then the mouse is not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(mouse))\nPremise: If someone visits the mouse then the mouse is not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(mouse))\nPremise: If someone visits the mouse then the mouse is not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(mouse))\nPremise: If someone visits the cat then the cat is not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(cat))\nPremise: If someone visits the cat then the cat is not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(cat))\nPremise: If someone visits the cat then the cat is not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(cat))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone sees the bear and the bear does not visit the cat then someone does not need the bear.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Needs(x, bear))\nPremise: If someone visits the bear then they see the bear.\nFOL: all x. (Visits(x, bear) -> Sees(x, bear))\nPremise: If someone visits the cat then the cat is not warm.\nFOL: all x. (Visits(x, cat) -> -Warm(cat))\nPremise: If someone visits the cat then the cat is not cold.\nFOL: all x. (Visits(x, cat) -> -Cold(cat))\nPremise: If someone visits the cat then the cat is not seen.\nFOL: all x. (Visits(x, cat) -> -Seen(cat))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the mouse then the mouse is not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(mouse))\nPremise: If someone visits the mouse then the mouse is not cold.\nFOL: all x. (Visits(x, mouse) -> -Cold(mouse))\nPremise: If someone visits the mouse then the mouse is not warm.\nFOL: all x. (Visits(x, mouse) -> -Warm(mouse))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the bear then the bear is not seen.\nFOL: all x. (Visits(x, bear) -> -Seen(bear))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone sees the bear and the bear does not visit the cat then someone does not need the mouse.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Needs(x, mouse))\nPremise: If someone visits the cat then the cat is not warm.\nFOL: all x. (Visits(x, cat) -> -Warm(cat))\nPremise: If someone visits the cat then the cat is not cold.\nFOL: all x. (Visits(x, cat) -> -Cold(cat))\nPremise: If someone visits the cat then the cat is not seen.\nFOL: all x. (Visits(x, cat) -> -Seen(cat))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the mouse then the mouse is not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(mouse))\nPremise: If someone visits the mouse then the mouse is not cold.\nFOL: all x. (Visits(x, mouse) -> -Cold(mouse))\nPremise: If someone visits the mouse then the mouse is not warm.\nFOL: all x. (Visits(x, mouse) -> -Warm(mouse))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the bear then the bear is not seen.\nFOL: all x. (Visits(x, bear) -> -Seen(bear))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone sees the bear and the bear does not visit the cat then someone does not need the mouse.\nFOL: all x. (Sees(x, bear) & -Visits(bear, cat) -> -Needs(x, mouse))\nPremise: If someone visits the bear then the bear is not seen.\nFOL: all x. (Visits(x, bear) -> -Seen(bear))\nPremise: If someone visits the bear then the bear is not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(bear))\nPremise: If someone visits the bear then the bear is not warm.\nFOL: all x. (Visits(x, bear) -> -Warm(bear))\nPremise: If someone visits the mouse then the mouse is not seen.\nFOL: all x. (Visits(x, mouse) -> -Seen(mouse))\nPremise: If someone visits the mouse then the mouse is not cold.\n"], ["Premise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: If someone is kind then they are not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\n\nPremise: If someone is green then they are not blue.\nFOL: all x. (Green(x) -> -Blue(x))\n\nPremise: If someone is kind and they do not chase the bald eagle then they like the cow.\nFOL: all x. (Kind(x) & -Chases(x, BaldEagle) -> Likes(x, Cow))\n\nPremise: If someone is mean and they like the cow then they chase the cow.\nFOL: all x. (Mean(x) & Likes(x, Cow) -> Chases(x, Cow))\n\nPremise: If someone is blue and they like the bald eagle then they chase the bald eagle.\nFOL: all x. (Blue(x) & Likes(x, BaldEagle) -> Chases(x, BaldEagle))\n\nPremise: If someone likes the rabbit and the rabbit is round then they need the rabbit.\nFOL: all x. (Likes(x, Rabbit) & Round(Rabbit) -> Needs(x, Rabbit))\n\nPremise: If someone needs the cow and the cow chases the rabbit then they do not like the rabbit.\nFOL: all x. (Needs(x, Cow) & Chases(Cow, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone needs the squirrel and the squirrel chases the cow then they do not like the cow.\nFOL: all x. (Needs(x, Squirrel) & Chases(Squirrel, Cow) -> -Likes(x, Cow))\n\nPremise: If someone needs the squirrel and the squirrel chases the rabbit then they do not like the rabbit.\nFOL: all x. (Needs(x, Squirrel) & Chases(Squirrel, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone needs the rabbit and the rabbit is big then they like the rabbit.\nFOL: all x. (Needs(x, Rabbit) & Big(Rabbit) -> Likes(x, Rabbit))\n\nPremise: If someone likes the squirrel and the squirrel chases the cow then they do not like the cow.\nFOL: all x. (Likes(x, Squirrel) & Chases(Squirrel, Cow) -> -Likes(x, Cow))\n\nPremise: If someone likes the squirrel and the squirrel chases the rabbit then they do not like the rabbit.\nFOL: all x. (Likes(x, Squirrel) & Chases(Squirrel, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone likes the cow and the cow chases the squirrel then they do not like the squirrel.\nFOL: all x. (Likes(x, Cow) & Chases(Cow, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone likes the cow and the cow chases the rabbit then they do not like the rabbit.\nFOL: all x. (Likes(x, Cow) & Chases(Cow, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone is green and they need the squirrel then they like the squirrel.\nFOL: all x. (Green(x) & Needs(x, Squirrel) -> Likes(x, Squirrel))\n\nPremise: If someone is green and they need the rabbit then they like the rabbit.\nFOL: all x. (Green(x) & Needs(x, Rabbit) -> Likes(x, Rabbit))\n\nPremise: If someone is green and they need the cow then they like the cow.\nFOL: all x. (Green(x) & Needs(x, Cow) -> Likes(x, Cow))\n\nPremise: If someone is mean and they need the squirrel then they do not like the squirrel.\nFOL: all x. (Mean(x) & Needs(x, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone is mean and they need the rabbit then they do not like the rabbit.\nFOL: all x. (Mean(x) & Needs(x, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone is mean and they need the cow then they do not like the cow.\nFOL: all x. (Mean(x) & Needs(x, Cow) -> -Likes(x, Cow))\n\nPremise: If someone is blue and they need the squirrel then they do not like the squirrel.\nFOL: all x. (Blue(x) & Needs(x, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone is blue and they need the rabbit then they do not like the rabbit.\nFOL: all x. (Blue(x) & Needs(x, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone is blue and they need the cow then they do not like the cow.\nFOL: all x. (Blue(x) & Needs(x, Cow) -> -Likes(x, Cow))\n\nPremise: If someone is kind and they need the squirrel then they like the squirrel.\nFOL: all x. (Kind(x) & Needs(x, Squirrel) -> Likes(x, Squirrel))\n\nPremise: If someone is kind and they need the rabbit then they like the rabbit.\nFOL: all x. (Kind(x) & Needs(x, Rabbit) -> Likes(x, Rabbit))\n\nPremise: If someone is kind and they need the cow then they like the cow.\nFOL: all x. (Kind(x) & Needs(x, Cow) -> Likes(x, Cow))\n\nPremise: If someone is not mean and they need the squirrel then they like the squirrel.\nFOL: all x. (-Mean(x) & Needs(x, Squirrel) -> Likes(x, Squirrel))\n\nPremise: If someone is not mean and they need the rabbit then they like the rabbit.\nFOL: all x. (-Mean(x) & Needs(x, Rabbit) -> Likes(x, Rabbit))\n\nPremise: If someone is not mean and they need the cow then they like the cow.\nFOL: all x. (-Mean(x) & Needs(x, Cow) -> Likes(x, Cow))\n\nPremise: If someone is not blue and they need the squirrel then they like the squirrel.\nFOL: all x. (-Blue(x) & Needs(x, Squirrel) -> Likes(x, Squirrel))\n\nPremise: If someone is not blue and they need the rabbit then they like the rabbit.\nFOL: all x. (-Blue(x) & Needs(x, Rabbit) -> Likes(x, Rabbit))\n\nPremise: If someone is not blue and they need the cow then they like the cow.\nFOL: all x. (-Blue(x) & Needs(x, Cow) -> Likes(x, Cow))\n\nPremise: If someone is not green and they need the squirrel then they like the squirrel.\nFOL: all x. (-Green(x) & Needs(x, Squirrel) -> Likes(x, Squirrel))\n\nPremise: If someone is not green and they need the rabbit then they like the rabbit.\nFOL: all x. (-Green(x) & Needs(x, Rabbit) -> Likes(x, Rabbit))\n\nPremise: If someone is not green and they need the cow then they like the cow.\nFOL: all x. (-Green(x) & Needs(x, Cow) -> Likes(x, Cow))\n\nPremise: If someone chases the squirrel and the squirrel chases the cow then they chase the cow.\nFOL: all x. (Chases(x, Squirrel) & Chases(Squirrel, Cow) -> Chases(x, Cow))\n\nPremise: If someone chases the squirrel and the squirrel chases the rabbit then they chase the rabbit.\nFOL: all x. (Chases(x, Squirrel) & Chases(Squirrel, Rabbit) -> Chases(x, Rabbit))\n\nPremise: If someone chases the cow and the cow chases the squirrel then they chase the squirrel.\nFOL: all x. (Chases(x, Cow) & Chases(Cow, Squirrel) -> Chases(x, Squirrel))\n\nPremise: If someone chases the cow and the cow chases the rabbit then they chase the rabbit.\nFOL: all x. (Chases(x, Cow) & Chases(Cow, Rabbit) -> Chases(x, Rabbit))\n\nPremise: If someone chases the rabbit and the rabbit chases the cow then they chase the cow.\nFOL: all x. (Chases(x, Rabbit) & Chases(Rabbit, Cow) -> Chases(x, Cow))\n\nPremise: If someone chases the rabbit and the rabbit chases the squirrel then they chase the squirrel.\nFOL: all x. (Chases(x, Rabbit) & Chases(Rabbit, Squirrel) -> Chases(x, Squirrel))\n\nPremise: If someone chases the bald eagle and the bald eagle chases the cow then they chase the cow.\nFOL: all x. (Chases(x, BaldEagle) & Chases(BaldEagle, Cow) -> Chases(x, Cow))\n\nPremise: If someone chases the bald eagle and the bald eagle chases the rabbit then they chase the rabbit.\nFOL: all x. (Chases(x, BaldEagle) & Chases(BaldEagle, Rabbit) -> Chases(x, Rabbit))\n\nPremise: If someone chases the bald eagle and the bald eagle chases the squirrel then they chase the squirrel.\nFOL: all x. (Chases(x, BaldEagle) & Chases(BaldEagle, Squirrel) -> Chases(x, Squirrel))\n\nPremise: If someone chases the squirrel and the squirrel chases the bald eagle then they chase the bald eagle.\nFOL: all x. (Chases(x, Squirrel) & Chases(Squirrel, BaldEagle) -> Chases(x, BaldEagle))\n\nPremise: If someone chases the squirrel and the squirrel chases the rabbit then they chase the rabbit.\nFOL: all x. (Chases(x, Squirrel) & Chases(Squirrel, Rabbit) -> Chases(x, Rabbit))\n\nPremise: If someone chases the cow and the cow chases the bald eagle then they chase the bald eagle.\nFOL: all x. (Chases(x, Cow) & Chases(Cow, BaldEagle) -> Chases(x, BaldEagle))\n\nPremise: If someone chases the cow and the cow chases the rabbit then they chase the rabbit.\nFOL: all x. (Chases(x, Cow) & Chases(Cow, Rabbit) -> Chases(x, Rabbit))\n\nPremise: If someone chases the rabbit and the rabbit chases the bald eagle then they chase the bald eagle.\nFOL: all x. (Chases(x, Rabbit) & Chases(Rabbit, BaldEagle) -> Chases(x, BaldEagle))\n\nPremise: If someone chases the rabbit and the rabbit chases the squirrel then they chase the squirrel.\nFOL: all x. (Chases(x, Rabbit) & Chases(Rabbit, Squirrel) -> Chases(x, Squirrel))\n\nPremise: If someone chases the bald eagle and the bald eagle chases the squirrel then they chase the squirrel.\nFOL: all x. (Chases(x, BaldEagle) & Chases(BaldEagle, Squirrel) -> Chases(x, Squirrel))\n\nPremise: If someone chases the bald eagle and the bald eagle chases the rabbit then they chase the rabbit.\nFOL: all x. (Chases(x, BaldEagle) & Chases(BaldEagle, Rabbit) -> Chases(x, Rabbit))\n\nPremise: If someone likes the squirrel and the squirrel chases the bald eagle then they do not like the bald eagle.\nFOL: all x. (Likes(x, Squirrel) & Chases(Squirrel, BaldEagle) -> -Likes(x, BaldEagle))\n\nPremise: If someone likes the squirrel and the squirrel chases the rabbit then they do not like the rabbit.\nFOL: all x. (Likes(x, Squirrel) & Chases(Squirrel, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone likes the cow and the cow chases the squirrel then they do not like the squirrel.\nFOL: all x. (Likes(x, Cow) & Chases(Cow, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone likes the cow and the cow chases the rabbit then they do not like the rabbit.\nFOL: all x. (Likes(x, Cow) & Chases(Cow, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone likes the rabbit and the rabbit chases the cow then they do not like the cow.\nFOL: all x. (Likes(x, Rabbit) & Chases(Rabbit, Cow) -> -Likes(x, Cow))\n\nPremise: If someone likes the rabbit and the rabbit chases the squirrel then they do not like the squirrel.\nFOL: all x. (Likes(x, Rabbit) & Chases(Rabbit, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone likes the bald eagle and the bald eagle chases the cow then they do not like the cow.\nFOL: all x. (Likes(x, BaldEagle) & Chases(BaldEagle, Cow) -> -Likes(x, Cow))\n\nPremise: If someone likes the bald eagle and the bald eagle chases the rabbit then they do not like the rabbit.\nFOL: all x. (Likes(x, BaldEagle) & Chases(BaldEagle, Rabbit) -> -Likes(x, Rabbit))\n\nPremise: If someone likes the bald eagle and the bald eagle chases the squirrel then they do not like the squirrel.\nFOL: all x. (Likes(x, BaldEagle) & Chases(BaldEagle, Squirrel) -> -Likes(x, Squirrel))\n\nPremise: If someone likes the squirrel and the squirrel chases the bald eagle then they do not like the bald eagle.\nFOL"], ["Premise: The bald eagle is an animal.\nFOL: Animal(BaldEagle)\n\nPremise: The lion is an animal.\nFOL: Animal(Lion)\n\nPremise: The dog is an animal.\nFOL: Animal(Dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: If something is round and it chases the lion then it likes the lion.\nFOL: all x. (Round(x) & Chases(x, Lion) -> Likes(x, Lion))\n\nPremise: If something is big then it chases the dog.\nFOL: all x. (Big(x) -> Chases(x, Dog))\n\nPremise: If something is round and it chases the bald eagle then the bald eagle does not like the dog.\nFOL: all x. (Round(x) & Chases(x, BaldEagle) -> - Likes(BaldEagle, Dog))\n\nPremise: If something likes the lion then it is red.\nFOL: all x. (Likes(x, Lion) -> Red(x))\n\nPremise: If something is red and round then it does not chase the bald eagle.\nFOL: all x. (Red(x) & Round(x) -> - Chases(x, BaldEagle))\n\nPremise: If something is red and young then it chases the bald eagle.\nFOL: all x. (Red(x) & Young(x) -> Chases(x, BaldEagle))\n\nPremise: If something likes the bald eagle and the bald eagle chases the lion then it likes the lion.\nFOL: all x. (Likes(x, BaldEagle) & Chases(BaldEagle, Lion) -> Likes(x, Lion))\n\nPremise: If something eats the bald eagle then the bald eagle is red.\nFOL: all x. (Eats(x, BaldEagle) -> Red(BaldEagle))\n\nPremise: The bald eagle does not chase itself.\nFOL: - Chases(BaldEagle, BaldEagle)"], ["Premise: Bob is nice.\nFOL: Nice(Bob)\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\nPremise: All big things are furry.\nFOL: all x. (Big(x) -> Furry(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are young.\nFOL: all x. (Furry(x) -> Young(x))\nPremise: If something is quiet then it is nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: If something is big and furry then it is young.\nFOL: all x. (Big(x) & Furry(x) -> Young(x))\nPremise: If something is green then it is red.\nFOL: all x. (Green(x) -> Red(x))\nPremise: If something is green and quiet then it is furry.\nFOL: all x. (Green(x) & Quiet(x) -> Furry(x))\nPremise: If something is green and furry then it is young.\nFOL: all x. (Green(x) & Furry(x) -> Young(x))\nPremise: If something is green and young then it is nice.\nFOL: all x. (Green(x) & Young(x) -> Nice(x))\nPremise: If something is quiet and red then it is furry.\nFOL: all x. (Quiet(x) & Red(x) -> Furry(x))\nPremise: If something is quiet and furry then it is young.\nFOL: all x. (Quiet(x) & Furry(x) -> Young(x))\nPremise: If something is quiet and young then it is nice.\nFOL: all x. (Quiet(x) & Young(x) -> Nice(x))\nPremise: If something is red and furry then it is young.\nFOL: all x. (Red(x) & Furry(x) -> Young(x))\nPremise: If something is red and young then it is nice.\nFOL: all x. (Red(x) & Young(x) -> Nice(x))\nPremise: If something is furry and young then it is nice.\nFOL: all x. (Furry(x) & Young(x) -> Nice(x))\nPremise: If Bob is quiet and green then Bob is furry.\nFOL: Quiet(Bob) & Green(Bob) -> Furry(Bob)\nPremise: If Bob is furry and green then Bob is young.\nFOL: Furry(Bob) & Green(Bob) -> Young(Bob)\nPremise: If Bob is young and green then Bob is nice.\nFOL: Young(Bob) & Green(Bob) -> Nice(Bob)\nPremise: If Bob is quiet and red then Bob is furry.\nFOL: Quiet(Bob) & Red(Bob) -> Furry(Bob)\nPremise: If Bob is furry and red then Bob is young.\nFOL: Furry(Bob) & Red(Bob) -> Young(Bob)\nPremise: If Bob is young and red then Bob is nice.\nFOL: Young(Bob) & Red(Bob) -> Nice(Bob)\nPremise: If Bob is quiet and furry then Bob is young.\nFOL: Quiet(Bob) & Furry(Bob) -> Young(Bob)\nPremise: If Bob is quiet and young then Bob is nice.\nFOL: Quiet(Bob) & Young(Bob) -> Nice(Bob)\nPremise: If Bob is furry and young then Bob is nice.\nFOL: Furry(Bob) & Young(Bob) -> Nice(Bob)\nPremise: If Charlie is quiet and green then Charlie is furry.\nFOL: Quiet(Charlie) & Green(Charlie) -> Furry(Charlie)\nPremise: If Charlie is furry and green then Charlie is young.\nFOL: Furry(Charlie) & Green(Charlie) -> Young(Charlie)\nPremise: If Charlie is young and green then Charlie is nice.\nFOL: Young(Charlie) & Green(Charlie) -> Nice(Charlie)\nPremise: If Charlie is quiet and red then Charlie is furry.\nFOL: Quiet(Charlie) & Red(Charlie) -> Furry(Charlie)\nPremise: If Charlie is furry and red then Charlie is young.\nFOL: Furry(Charlie) & Red(Charlie) -> Young(Charlie)\nPremise: If Charlie is young and red then Charlie is nice.\nFOL: Young(Charlie) & Red(Charlie) -> Nice(Charlie)\nPremise: If Charlie is quiet and furry then Charlie is young.\nFOL: Quiet(Charlie) & Furry(Charlie) -> Young(Charlie)\nPremise: If Charlie is quiet and young then Charlie is nice.\nFOL: Quiet(Charlie) & Young(Charlie) -> Nice(Charlie)\nPremise: If Charlie is furry and young then Charlie is nice.\nFOL: Furry(Charlie) & Young(Charlie) -> Nice(Charlie)\nPremise: If Erin is quiet and green then Erin is furry.\nFOL: Quiet(Erin) & Green(Erin) -> Furry(Erin)\nPremise: If Erin is furry and green then Erin is young.\nFOL: Furry(Erin) & Green(Erin) -> Young(Erin)\nPremise: If Erin is young and green then Erin is nice.\nFOL: Young(Erin) & Green(Erin) -> Nice(Erin)\nPremise: If Erin is quiet and red then Erin is furry.\nFOL: Quiet(Erin) & Red(Erin) -> Furry(Erin)\nPremise: If Erin is furry and red then Erin is young.\nFOL: Furry(Erin) & Red(Erin) -> Young(Erin)\nPremise: If Erin is young and red then Erin is nice.\nFOL: Young(Erin) & Red(Erin) -> Nice(Erin)\nPremise: If Erin is quiet and furry then Erin is young.\nFOL: Quiet(Erin) & Furry(Erin) -> Young(Erin)\nPremise: If Erin is quiet and young then Erin is nice.\nFOL: Quiet(Erin) & Young(Erin) -> Nice(Erin)\nPremise: If Erin is furry and young then Erin is nice.\nFOL: Furry(Erin) & Young(Erin) -> Nice(Erin)\nPremise: If Harry is quiet and green then Harry is furry.\nFOL: Quiet(Harry) & Green(Harry) -> Furry(Harry)\nPremise: If Harry is furry and green then Harry is young.\nFOL: Furry(Harry) & Green(Harry) -> Young(Harry)\nPremise: If Harry is young and green then Harry is nice.\nFOL: Young(Harry) & Green(Harry) -> Nice(Harry)\nPremise: If Harry is quiet and red then Harry is furry.\nFOL: Quiet(Harry) & Red(Harry) -> Furry(Harry)\nPremise: If Harry is furry and red then Harry is young.\nFOL: Furry(Harry) & Red(Harry) -> Young(Harry)\nPremise: If Harry is young and red then Harry is nice.\nFOL: Young(Harry) & Red(Harry) -> Nice(Harry)\nPremise: If Harry is quiet and furry then Harry is young.\nFOL: Quiet(Harry) & Furry(Harry) -> Young(Harry)\nPremise: If Harry is quiet and young then Harry is nice.\nFOL: Quiet(Harry) & Young(Harry) -> Nice(Harry)\nPremise: If Harry is furry and young then Harry is nice.\nFOL: Furry(Harry) & Young(Harry) -> Nice(Harry)\nPremise: If a big thing is furry then it is quiet.\nFOL: all x. (Big(x) -> Furry(x) -> Quiet(x))\nPremise: If a big thing is quiet then it is furry.\nFOL: all x. (Big(x) -> Quiet(x) -> Furry(x))\nPremise: If a big thing is young then it is quiet.\nFOL: all x. (Big(x) -> Young(x) -> Quiet(x))\nPremise: If a big thing is quiet then it is young.\nFOL: all x. (Big(x) -> Quiet(x) -> Young(x))\nPremise: If a big thing is green then it is quiet.\nFOL: all x. (Big(x) -> Green(x) -> Quiet(x))\nPremise: If a big thing is quiet then it is green.\nFOL: all x. (Big(x) -> Quiet(x) -> Green(x))\nPremise: If a big thing is red then it is quiet.\nFOL: all x. (Big(x) -> Red(x) -> Quiet(x))\nPremise: If a big thing is quiet then it is red.\nFOL: all x. (Big(x) -> Quiet(x) -> Red(x))\nPremise: If a quiet thing is furry then it is big.\nFOL: all x. (Quiet(x) -> Furry(x) -> Big(x))\nPremise: If a quiet thing is big then it is furry.\nFOL: all x. (Quiet(x) -> Big(x) -> Furry(x))\nPremise: If a quiet thing is young then it is big.\nFOL: all x. (Quiet(x) -> Young(x) -> Big(x))\nPremise: If a quiet thing is big then it is young.\nFOL: all x. (Quiet(x) -> Big(x) -> Young(x))\nPremise: If a quiet thing is green then it is big.\nFOL: all x. (Quiet(x) -> Green(x) -> Big(x))\nPremise: If a quiet thing is big then it is green.\nFOL: all x. (Quiet(x) -> Big(x) -> Green(x))\nPremise: If a quiet thing is red then it is big.\nFOL: all x. (Quiet(x) -> Red(x) -> Big(x))\nPremise: If a quiet thing is big then it is red.\nFOL: all x. (Quiet(x) -> Big(x) -> Red(x))\nPremise: If a furry thing is big then it is quiet.\nFOL: all x. (Furry(x) -> Big(x) -> Quiet(x))\nPremise: If a furry thing is quiet then it is big.\nFOL: all x. (Furry(x) -> Quiet(x) -> Big(x))\nPremise: If a furry thing is young then it is quiet.\nFOL: all x. (Furry(x) -> Young(x) -> Quiet(x))\nPremise: If a furry thing is quiet then it is young.\nFOL: all x. (Furry(x) -> Quiet(x) -> Young(x))\nPremise: If a furry thing is green then it is quiet.\nFOL: all x. (Furry(x) -> Green(x) -> Quiet(x))\nPremise: If a furry thing is quiet then it is green.\nFOL: all x. (Furry(x) -> Quiet(x) -> Green(x))\nPremise: If a furry thing is red then it is quiet.\nFOL: all x. (Furry(x) -> Red(x) -> Quiet(x))\nPremise: If a furry thing is quiet then it is red.\nFOL: all x. (Furry(x) -> Quiet(x) -> Red(x))\nPremise: If a young thing is big then it is quiet.\nFOL: all x. (Young(x) -> Big(x) -> Quiet(x))\nPremise: If a young thing is quiet then it is big.\nFOL: all x. (Young(x) -> Quiet(x) -> Big(x))\nPremise: If a young thing is furry then it is quiet.\nFOL: all x. (Young(x) -> Furry(x) -> Quiet(x))\nPremise: If a young thing is quiet then it is furry.\nFOL: all x. (Young(x) -> Quiet(x) -> Furry(x))\nPremise: If a young thing is green then it is quiet.\nFOL: all x. (Young(x) -> Green(x) -> Quiet(x))\nPremise: If a young thing is quiet then it is green.\nFOL: all x. (Young(x) -> Quiet(x) -> Green(x))\nPremise: If a young thing is red then it is quiet.\nFOL: all x. (Young(x) -> Red(x) -> Quiet(x))\nPremise: If a young thing is quiet then it is red.\nFOL: all x. (Young(x) -> Quiet(x) -> Red(x))\nPremise: If a green thing is big then it is quiet.\nFOL: all x. (Green(x) -> Big(x) -> Quiet(x))\nPremise: If a green thing is quiet then it is big.\nFOL: all x. (Green(x) -> Quiet(x) -> Big(x))\nPremise: If a green thing is furry then it is quiet.\nFOL: all x. (Green(x) -> Furry(x) -> Quiet(x))\nPremise: If a green thing is quiet then it is furry.\nFOL: all x. (Green(x) -> Quiet(x) -> Furry(x))\nPremise: If a green thing is young then it is quiet.\nFOL: all x. (Green(x) -> Young(x) -> Quiet(x))\nPremise: If a green thing is quiet then it is young.\nFOL: all x. (Green(x) -> Quiet(x) -> Young(x))\nPremise: If a green thing is red then it is quiet.\nFOL: all x. (Green(x) -> Red(x) -> Quiet(x))\nPremise: If a green thing is quiet then it is red.\nFOL: all x. (Green(x) -> Quiet(x) -> Red(x))\nPremise: If a red thing is big then it is quiet.\nFOL: all x. (Red(x) -> Big(x) -> Quiet(x))\nPremise"]]