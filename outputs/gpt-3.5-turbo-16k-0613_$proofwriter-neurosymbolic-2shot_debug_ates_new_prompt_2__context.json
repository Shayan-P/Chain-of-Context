[["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If something needs the tiger, then the tiger is important.\nFOL: all x. (Needs(x, tiger) -> Important(tiger))\n\nPremise: If something needs the bear, then the bear is important.\nFOL: all x. (Needs(x, bear) -> Important(bear))\n\nPremise: If something needs the dog, then the dog is important.\nFOL: all x. (Needs(x, dog) -> Important(dog))\n\nPremise: If something eats the tiger, then the tiger is prey.\nFOL: all x. (Eats(x, tiger) -> Prey(tiger))\n\nPremise: If something eats the bear, then the bear is prey.\nFOL: all x. (Eats(x, bear) -> Prey(bear))\n\nPremise: If something eats the rabbit, then the rabbit is prey.\nFOL: all x. (Eats(x, rabbit) -> Prey(rabbit))\n\nPremise: If something eats the dog, then the dog is prey.\nFOL: all x. (Eats(x, dog) -> Prey(dog))\n\nPremise: If something eats the tiger, then it is a predator.\nFOL: all x. (Eats(x, tiger) -> Predator(x))\n\nPremise: If something eats the bear, then it is a predator.\nFOL: all x. (Eats(x, bear) -> Predator(x))\n\nPremise: If something eats the rabbit, then it is a predator.\nFOL: all x. (Eats(x, rabbit) -> Predator(x))\n\nPremise: If something eats the dog, then it is a predator.\nFOL: all x. (Eats(x, dog) -> Predator(x))\n\n<CONTEXT>\nPremise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If something eats the tiger, then the tiger is prey.\nFOL: all x. (Eats(x, tiger) -> Prey(tiger))\n</CONTEXT>"], ["Premise: Erin is a person.\nFOL: Person(Erin)\n\nPremise: Fiona is a person.\nFOL: Person(Fiona)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Erin is not cold.\nFOL: -Cold(Erin)\n\nPremise: Erin is not green.\nFOL: -Green(Erin)\n\nPremise: Fiona is not nice.\nFOL: -Nice(Fiona)\n\nPremise: Gary is not cold.\nFOL: -Cold(Gary)\n\nPremise: Gary is not green.\nFOL: -Green(Gary)\n\nPremise: Harry is not nice.\nFOL: -Nice(Harry)\n\nPremise: Harry is not quiet.\nFOL: -Quiet(Harry)\n\nPremise: Harry is not round.\nFOL: -Round(Harry)\n\nPremise: All nice people are cold.\nFOL: all x. (Nice(x) -> Cold(x))\n\nPremise: All green people are smart.\nFOL: all x. (Green(x) -> Smart(x))\n\nPremise: If Erin is round then Erin is green.\nFOL: (Round(Erin) -> Green(Erin))\n\nPremise: If Erin is nice then Erin is cold.\nFOL: (Nice(Erin) -> Cold(Erin))\n\nPremise: If Erin is quiet then Erin is round.\nFOL: (Quiet(Erin) -> Round(Erin))\n\nPremise: If Fiona is nice then Fiona is cold.\nFOL: (Nice(Fiona) -> Cold(Fiona))\n\nPremise: If Fiona is quiet then Fiona is round.\nFOL: (Quiet(Fiona) -> Round(Fiona))\n\nPremise: If Gary is nice then Gary is cold.\nFOL: (Nice(Gary) -> Cold(Gary))\n\nPremise: If Gary is quiet then Gary is round.\nFOL: (Quiet(Gary) -> Round(Gary))\n\nPremise: If Harry is green then Harry is smart.\nFOL: (Green(Harry) -> Smart(Harry))\n\nPremise: If Harry is nice then Harry is cold.\nFOL: (Nice(Harry) -> Cold(Harry))\n\n<CONTEXT>\nPremise: Erin is a person.\nFOL: Person(Erin)\nPremise: Fiona is a person.\nFOL: Person(Fiona)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: Erin is not cold.\nFOL: -Cold(Erin)\n</CONTEXT>"], ["Premise: Charlie is a thing.\nFOL: Thing(Charlie)\nPremise: Dave is a thing.\nFOL: Thing(Dave)\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\nPremise: Harry is a thing.\nFOL: Thing(Harry)\nPremise: Red is a color.\nFOL: Color(Red)\nPremise: White is a color.\nFOL: Color(White)\nPremise: Rough is an attribute.\nFOL: Attribute(Rough)\nPremise: Furry is an attribute.\nFOL: Attribute(Furry)\nPremise: Kind is a trait.\nFOL: Trait(Kind)\nPremise: Nice is a trait.\nFOL: Trait(Nice)\nPremise: All red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\nPremise: All furry things are kind.\nFOL: all x. (Furry(x) -> Kind(x))\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\nPremise: If Fiona is furry then Fiona is kind.\nFOL: Furry(Fiona) -> Kind(Fiona)\nPremise: All rough, kind things are furry.\nFOL: all x. (Rough(x) & Kind(x) -> Furry(x))\nPremise: All white things are kind.\nFOL: all x. (White(x) -> Kind(x))\nPremise: Fiona is white.\nFOL: White(Fiona)\n<CONTEXT>\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n</CONTEXT>"], ["Premise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Dave is blue.\nFOL: Blue(Dave)\nPremise: Dave is nice.\nFOL: Nice(Dave)\nPremise: Dave is quiet.\nFOL: Quiet(Dave)"], ["Premise: Dave is furry and kind.\nFOL: Furry(Dave) & Kind(Dave)\n\nPremise: Erin is green, round, and young.\nFOL: Green(Erin) & Round(Erin) & Young(Erin)\n\nPremise: Fiona is big, furry, green, and not kind.\nFOL: Big(Fiona) & Furry(Fiona) & Green(Fiona) & -Kind(Fiona)\n\nPremise: Gary is furry, white, and young.\nFOL: Furry(Gary) & White(Gary) & Young(Gary)\n\nPremise: If something is young then it is round.\nFOL: all x. (Young(x) -> Round(x))\n\nPremise: All white things are big.\nFOL: all x. (White(x) -> Big(x))\n\nPremise: If something is white and young then it is big.\nFOL: all x. (White(x) & Young(x) -> Big(x))\n\nPremise: Green, furry things are white.\nFOL: all x. (Green(x) & Furry(x) -> White(x))\n\nPremise: If something is furry then it is green.\nFOL: all x. (Furry(x) -> Green(x))\n\nPremise: All big things are young.\nFOL: all x. (Big(x) -> Young(x))\n\nPremise: Fiona is not young.\nFOL: -Young(Fiona)\n\n<CONTEXT>\nPremise: Dave is furry.\nFOL: Furry(Dave)\nPremise: Dave is kind.\nFOL: Kind(Dave)\nPremise: Erin is green.\nFOL: Green(Erin)\nPremise: Erin is round.\nFOL: Round(Erin)\nPremise: Erin is young.\nFOL: Young(Erin)\n</CONTEXT>"], ["Premise: The bald eagle is not a mouse.\nFOL: -Mouse(baldEagle)\nPremise: The bear is not a bald eagle.\nFOL: -BaldEagle(bear)\nPremise: The bear is not a tiger.\nFOL: -Tiger(bear)\nPremise: The mouse is not a bald eagle.\nFOL: -BaldEagle(mouse)\nPremise: The mouse is not a bear.\nFOL: -Bear(mouse)\nPremise: The tiger is not a bear.\nFOL: -Bear(tiger)\nPremise: If something is red then it does not chase the bear.\nFOL: all x. (Red(x) -> -Chases(x, bear))\nPremise: If something is round and it does not eat the bald eagle then it does not need the bald eagle.\nFOL: all x. (Round(x) & -Eats(x, baldEagle) -> -Needs(x, baldEagle))\nPremise: If something is round and it does not eat the mouse then it does not need the mouse.\nFOL: all x. (Round(x) & -Eats(x, mouse) -> -Needs(x, mouse))\nPremise: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)"], ["Premise: Anne is rough.\nFOL: Rough(Anne)\nPremise: Anne is smart.\nFOL: Smart(Anne)\nPremise: Anne is quiet.\nFOL: Quiet(Anne)\nPremise: Anne is white.\nFOL: White(Anne)\nPremise: If something is rough then it is green.\nFOL: all x. (Rough(x) -> Green(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and rough then it is smart.\nFOL: all x. (White(x) & Rough(x) -> Smart(x))\nPremise: If Anne is green then Anne is rough.\nFOL: Green(Anne) -> Rough(Anne)\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is smart and white then it is quiet.\nFOL: all x. (Smart(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Erin is rough.\nFOL: Rough(Erin)\nPremise: Erin is smart.\nFOL: Smart(Erin)\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\nPremise: If something is rough then it is green.\nFOL: all x. (Rough(x) -> Green(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and rough then it is smart.\nFOL: all x. (White(x) & Rough(x) -> Smart(x))\nPremise: If Erin is green then Erin is rough.\nFOL: Green(Erin) -> Rough(Erin)\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is smart and white then it is quiet.\nFOL: all x. (Smart(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Gary is rough.\nFOL: Rough(Gary)\nPremise: Gary is smart.\nFOL: Smart(Gary)\nPremise: Gary is quiet.\nFOL: Quiet(Gary)\nPremise: Gary is white.\nFOL: White(Gary)\nPremise: If something is rough then it is green.\nFOL: all x. (Rough(x) -> Green(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and rough then it is smart.\nFOL: all x. (White(x) & Rough(x) -> Smart(x))\nPremise: If Gary is green then Gary is rough.\nFOL: Green(Gary) -> Rough(Gary)\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is smart and white then it is quiet.\nFOL: all x. (Smart(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Harry is rough.\nFOL: Rough(Harry)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\nPremise: Harry is white.\nFOL: White(Harry)\nPremise: If something is rough then it is green.\nFOL: all x. (Rough(x) -> Green(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and rough then it is smart.\nFOL: all x. (White(x) & Rough(x) -> Smart(x))\nPremise: If Harry is green then Harry is rough.\nFOL: Green(Harry) -> Rough(Harry)\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is smart and white then it is quiet.\nFOL: all x. (Smart(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Anne is green.\nFOL: Green(Anne)\nPremise: Erin is green.\nFOL: Green(Erin)\nPremise: Gary is green.\nFOL: Green(Gary)\nPremise: Harry is green.\nFOL: Green(Harry)\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is rough then it is green.\nFOL: all x. (Rough(x) -> Green(x))\nPremise: If something is white and rough then it is smart.\nFOL: all x. (White(x) & Rough(x) -> Smart(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is smart and white then it is quiet.\nFOL: all x. (Smart(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Famine is rough.\nFOL: Rough(Famine)\nPremise: Famine is smart.\nFOL: Smart(Famine)\nPremise: Famine is quiet.\nFOL: Quiet(Famine)\nPremise: Famine is white.\nFOL: White(Famine)\nPremise: If something is rough then it is green.\nFOL: all x. (Rough(x) -> Green(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and rough then it is smart.\nFOL: all x. (White(x) & Rough(x) -> Smart(x))\nPremise: If Famine is green then Famine is rough.\nFOL: Green(Famine) -> Rough(Famine)\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is smart and white then it is quiet.\nFOL: all x. (Smart(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\n<CONTEXT>\nPremise: Anne is nice.\nFOL: Nice(Anne)\nPremise: Anne is smart.\nFOL: Smart(Anne)\nPremise: Erin is nice.\nFOL: Nice(Erin)\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\n</CONTEXT>"], ["Premise: The dog is not the lion.\nFOL: -Dog(lion)\n\nPremise: The dog is not the mouse.\nFOL: -Dog(mouse)\n\nPremise: The lion is not the dog.\nFOL: -Lion(dog)\n\nPremise: The lion is not the tiger.\nFOL: -Lion(tiger)\n\nPremise: The mouse is not the dog.\nFOL: -Mouse(dog)\n\nPremise: The mouse is not the lion.\nFOL: -Mouse(lion)\n\nPremise: The mouse is not the tiger.\nFOL: -Mouse(tiger)\n\nPremise: The tiger is not the dog.\nFOL: -Tiger(dog)\n\nPremise: The tiger is not the lion.\nFOL: -Tiger(lion)\n\nPremise: The tiger is not the mouse.\nFOL: -Tiger(mouse)\n\n<CONTEXT>\nPremise: The dog is not the lion.\nFOL: -Dog(lion)\nPremise: The dog is not the mouse.\nFOL: -Dog(mouse)\nPremise: The lion is not the dog.\nFOL: -Lion(dog)\nPremise: The lion is not the tiger.\nFOL: -Lion(tiger)\nPremise: The mouse is not the dog.\nFOL: -Mouse(dog)\n</CONTEXT>"], ["Premise: Bob is furry and kind and white.\nFOL: Furry(Bob) & Kind(Bob) & White(Bob)\n\nPremise: Erin is kind and white.\nFOL: Kind(Erin) & White(Erin)\n\nPremise: Gary is rough and big.\nFOL: Rough(Gary) & Big(Gary)\n\nPremise: Harry is not smart.\nFOL: -Smart(Harry)\n\nPremise: If Bob is rough then Bob is furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nPremise: If someone is white then they are young.\nFOL: all x. (White(x) -> Young(x))\n\nPremise: All big, furry people are not smart.\nFOL: all x. (Big(x) & Furry(x) -> -Smart(x))\n\nPremise: If someone is smart and rough then they are big.\nFOL: all x. all y. (Smart(x) & Rough(y) -> Big(x))\n\nPremise: If someone is young then they are big.\nFOL: all x. (Young(x) -> Big(x))\n\nPremise: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\n\nPremise: All smart, young people are furry.\nFOL: all x. (Smart(x) & Young(x) -> Furry(x))\n\nPremise: If someone is furry and not rough then they are kind.\nFOL: all x. (Furry(x) & -Rough(x) -> Kind(x))\n\nPremise: If someone is rough and furry then they are white.\nFOL: all x. (Rough(x) & Furry(x) -> White(x))\n\nPremise: Gary is big.\nFOL: Big(Gary)"], ["Premise: The bear is not red.\nFOL: -Red(bear)\nPremise: The bear does not eat the dog.\nFOL: -Eat(bear, dog)\nPremise: The bear does not see the cat.\nFOL: -See(bear, cat)\nPremise: The cat does not eat the bear.\nFOL: -Eat(cat, bear)\nPremise: The cat does not chase the dog.\nFOL: -Chase(cat, dog)\nPremise: The cow does not see the dog.\nFOL: -See(cow, dog)\nPremise: The cow does not eat the cat.\nFOL: -Eat(cow, cat)\nPremise: The dog does not chase the cow.\nFOL: -Chase(dog, cow)\nPremise: The dog does not eat the cat.\nFOL: -Eat(dog, cat)\nPremise: If someone is kind, then the dog is kind.\nFOL: all x. (Kind(x) -> Kind(dog))\nPremise: If someone is red, then the dog is red.\nFOL: all x. (Red(x) -> Red(dog))\nPremise: If someone sees the dog, then the dog sees the bear.\nFOL: all x. (See(x, dog) -> See(dog, bear))\nPremise: If someone sees the bear, then the dog sees the cat.\nFOL: all x. (See(x, bear) -> See(dog, cat))\nPremise: If someone eats the cat, then the dog eats the bear.\nFOL: all x. (Eat(x, cat) -> Eat(dog, bear))\nPremise: If someone eats the dog, then the dog eats the cow.\nFOL: all x. (Eat(x, dog) -> Eat(dog, cow))\nPremise: If someone eats the cow, then the dog eats the dog.\nFOL: all x. (Eat(x, cow) -> Eat(dog, dog))\nPremise: If someone eats the dog, then the dog eats the cat.\nFOL: all x. (Eat(x, dog) -> Eat(dog, cat))\nPremise: If someone sees the cat, then the dog sees the dog.\nFOL: all x. (See(x, cat) -> See(dog, dog))\nPremise: If someone sees the dog, then the dog sees the cat.\nFOL: all x. (See(x, dog) -> See(dog, cat))\n"], ["Premise: Anne is not smart.\nFOL: -Smart(Anne)\nPremise: Anne is not green.\nFOL: -Green(Anne)\nPremise: Anne is not young.\nFOL: -Young(Anne)\nPremise: Anne is not round.\nFOL: -Round(Anne)\nPremise: Dave is not kind.\nFOL: -Kind(Dave)\nPremise: Dave is not smart.\nFOL: -Smart(Dave)\nPremise: Dave is not round.\nFOL: -Round(Dave)\nPremise: Dave is not green.\nFOL: -Green(Dave)\nPremise: Gary is not kind.\nFOL: -Kind(Gary)\nPremise: Gary is not smart.\nFOL: -Smart(Gary)\nPremise: Gary is not round.\nFOL: -Round(Gary)\nPremise: Gary is not young.\nFOL: -Young(Gary)\nPremise: Harry is not smart.\nFOL: -Smart(Harry)\nPremise: Harry is not round.\nFOL: -Round(Harry)\nPremise: Harry is not green.\nFOL: -Green(Harry)\nPremise: Harry is not big.\nFOL: -Big(Harry)\nPremise: If Anne is kind, then Anne is not cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nPremise: If Anne is not kind, then Anne is cold.\nFOL: all x. (-Kind(x) -> Cold(x))\nPremise: If Anne is not cold, then Anne is kind.\nFOL: all x. (-Cold(x) -> Kind(x))\nPremise: If Anne is cold, then Anne is not kind.\nFOL: all x. (Cold(x) -> -Kind(x))\nPremise: If Anne is kind, then Anne is not smart.\nFOL: all x. (Kind(x) -> -Smart(x))\nPremise: If Anne is not kind, then Anne is smart.\nFOL: all x. (-Kind(x) -> Smart(x))\nPremise: If Anne is not smart, then Anne is kind.\nFOL: all x. (-Smart(x) -> Kind(x))\nPremise: If Anne is smart, then Anne is not kind.\nFOL: all x. (Smart(x) -> -Kind(x))\nPremise: If Dave is big, then Dave is not kind.\nFOL: all x. (Big(Dave) -> -Kind(Dave))\nPremise: If Dave is not big, then Dave is kind.\nFOL: all x. (-Big(Dave) -> Kind(Dave))\nPremise: If Dave is kind, then Dave is not smart.\nFOL: all x. (Kind(Dave) -> -Smart(Dave))\nPremise: If Dave is not kind, then Dave is smart.\nFOL: all x. (-Kind(Dave) -> Smart(Dave))\nPremise: If something is young, then it is not smart.\nFOL: all x. (Young(x) -> -Smart(x))\nPremise: If something is not young, then it is smart.\nFOL: all x. (-Young(x) -> Smart(x))\nPremise: If something is round, then it is not smart.\nFOL: all x. (Round(x) -> -Smart(x))\nPremise: If something is not round, then it is smart.\nFOL: all x. (-Round(x) -> Smart(x))\nPremise: If something is green, then it is not smart.\nFOL: all x. (Green(x) -> -Smart(x))\nPremise: If something is not green, then it is smart.\nFOL: all x. (-Green(x) -> Smart(x))\nPremise: If something is kind, then it is not cold.\nFOL: all x. (Kind(x) -> -Cold(x))\nPremise: If something is not kind, then it is cold.\nFOL: all x. (-Kind(x) -> Cold(x))\nPremise: If something is cold, then it is not kind.\nFOL: all x. (Cold(x) -> -Kind(x))\nPremise: If something is not cold, then it is kind.\nFOL: all x. (-Cold(x) -> Kind(x))\nPremise: If something is smart, then it is not kind.\nFOL: all x. (Smart(x) -> -Kind(x))\nPremise: If something is not smart, then it is kind.\nFOL: all x. (-Smart(x) -> Kind(x))\nPremise: If something is round and cold, then it is big.\nFOL: all x. (Round(x) & Cold(x) -> Big(x))\nPremise: If something is not round or not cold, then it is not big.\nFOL: all x. (-Round(x) | -Cold(x) -> -Big(x))\nPremise: If something is round and not cold, then it is not big.\nFOL: all x. (Round(x) & -Cold(x) -> -Big(x))\nPremise: If something is not round and cold, then it is not big.\nFOL: all x. (-Round(x) & Cold(x) -> -Big(x))\nPremise: If something is not round and not cold, then it is big.\nFOL: all x. (-Round(x) & -Cold(x) -> Big(x))\nPremise: If something is kind and young, then it is smart.\nFOL: all x. (Kind(x) & Young(x) -> Smart(x))\nPremise: If something is not kind or not young, then it is not smart.\nFOL: all x. (-Kind(x) | -Young(x) -> -Smart(x))\nPremise: If something is kind and not young, then it is not smart.\nFOL: all x. (Kind(x) & -Young(x) -> -Smart(x))\nPremise: If something is not kind and young, then it is not smart.\nFOL: all x. (-Kind(x) & Young(x) -> -Smart(x))\nPremise: If something is not kind and not young, then it is smart.\nFOL: all x. (-Kind(x) & -Young(x) -> Smart(x))\nPremise: If something is kind and green, then it is round.\nFOL: all x. (Kind(x) & Green(x) -> Round(x))\nPremise: If something is not kind or not green, then it is not round.\nFOL: all x. (-Kind(x) | -Green(x) -> -Round(x))\nPremise: If something is kind and not green, then it is not round.\nFOL: all x. (Kind(x) & -Green(x) -> -Round(x))\nPremise: If something is not kind and green, then it is not round.\nFOL: all x. (-Kind(x) & Green(x) -> -Round(x))\nPremise: If something is not kind and not green, then it is round.\nFOL: all x. (-Kind(x) & -Green(x) -> Round(x))\nPremise: If something is young and round, then it is green.\nFOL: all x. (Young(x) & Round(x) -> Green(x))\nPremise: If something is not young or not round, then it is not green.\nFOL: all x. (-Young(x) | -Round(x) -> -Green(x))\nPremise: If something is young and not round, then it is not green.\nFOL: all x. (Young(x) & -Round(x) -> -Green(x))\nPremise: If something is not young and round, then it is not green.\nFOL: all x. (-Young(x) & Round(x) -> -Green(x))\nPremise: If something is not young and not round, then it is green.\nFOL: all x. (-Young(x) & -Round(x) -> Green(x))\nPremise: If Harry is young and Harry is cold, then Harry is green.\nFOL: all x. (Young(Harry) & Cold(Harry) -> Green(Harry))\nPremise: If Harry is not young or Harry is not cold, then Harry is not green.\nFOL: all x. (-Young(Harry) | -Cold(Harry) -> -Green(Harry))\nPremise: If Harry is young and not cold, then Harry is not green.\nFOL: all x. (Young(Harry) & -Cold(Harry) -> -Green(Harry))\nPremise: If Harry is not young and cold, then Harry is not green.\nFOL: all x. (-Young(Harry) & Cold(Harry) -> -Green(Harry))\nPremise: If Harry is not young and not cold, then Harry is green.\nFOL: all x. (-Young(Harry) & -Cold(Harry) -> Green(Harry))\nPremise: If something is young and green, then it is kind.\nFOL: all x. (Young(x) & Green(x) -> Kind(x))\nPremise: If something is not young or not green, then it is not kind.\nFOL: all x. (-Young(x) | -Green(x) -> -Kind(x))\nPremise: If something is young and not green, then it is not kind.\nFOL: all x. (Young(x) & -Green(x) -> -Kind(x))\nPremise: If something is not young and green, then it is not kind.\nFOL: all x. (-Young(x) & Green(x) -> -Kind(x))\nPremise: If something is not young and not green, then it is kind.\nFOL: all x. (-Young(x) & -Green(x) -> Kind(x))\n\n<CONTEXT>\nPremise: Anne is not smart.\nFOL: -Smart(Anne)\nPremise: Anne is not green.\nFOL: -Green(Anne)\nPremise: Anne is not young.\nFOL: -Young(Anne)\nPremise: Anne is not round.\nFOL: -Round(Anne)\nPremise: Dave is not kind.\nFOL: -Kind(Dave)\n</CONTEXT>"], ["Premise: Gary is nice.\nFOL: Nice(Gary)\n\nPremise: Gary is red.\nFOL: Red(Gary)\n\nPremise: Gary is cold.\nFOL: Cold(Gary)\n\nPremise: Gary is smart.\nFOL: Smart(Gary)\n\nPremise: Gary is round.\nFOL: Round(Gary)"], ["Premise: The rabbit is not red.\nFOL: -Red(rabbit)\n\nPremise: The dog does not chase itself.\nFOL: -Chases(dog, dog)\n\nPremise: The lion does not see itself.\nFOL: -Sees(lion, lion)\n\nPremise: The tiger does not visit itself.\nFOL: -Visits(tiger, tiger)\n\nPremise: If someone sees the rabbit then they are not red.\nFOL: all x. (Sees(x, rabbit) -> -Red(x))\n\n<CONTEXT>\nPremise: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\n\nPremise: The dog is red.\nFOL: Red(dog)\n\nPremise: The dog sees the lion.\nFOL: Sees(dog, lion)\n\nPremise: The lion chases the rabbit.\nFOL: Chases(lion, rabbit)\n\nPremise: The lion sees the dog.\nFOL: Sees(lion, dog)\n\nPremise: The lion sees the rabbit.\nFOL: Sees(lion, rabbit)\n\nPremise: The lion does not visit the dog.\nFOL: -Visits(lion, dog)\n\nPremise: The rabbit chases the dog.\nFOL: Chases(rabbit, dog)\n\nPremise: The rabbit chases the lion.\nFOL: Chases(rabbit, lion)\n\nPremise: The rabbit is nice.\nFOL: Nice(rabbit)\n\n</CONTEXT>"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The cow is an animal.\nFOL: Animal(cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\n\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\n\nPremise: If something is red, then it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\n\nPremise: If something chases the cow, then it chases an animal.\nFOL: all x. (Chases(x, cow) -> exists y. Animal(y) & Chases(x, y))\n\nPremise: If something chases the rabbit, then it chases an animal.\nFOL: all x. (Chases(x, rabbit) -> exists y. Animal(y) & Chases(x, y))\n\nPremise: If something chases the bear, then it chases an animal.\nFOL: all x. (Chases(x, bear) -> exists y. Animal(y) & Chases(x, y))\n\n<CONTEXT>\nPremise: The bear chases the cow.\nFOL: Chases(bear, cow)\n\nPremise: The bear eats the rabbit.\nFOL: Eats(bear, rabbit)\n\nPremise: The bear is big.\nFOL: Big(bear)\n\nPremise: The bear is round.\nFOL: Round(bear)\n\nPremise: The bear sees the cow.\nFOL: Sees(bear, cow)\n\nPremise: The bear sees the dog.\nFOL: Sees(bear, dog)\n\nPremise: The cow eats the rabbit.\nFOL: Eats(cow, rabbit)\n\nPremise: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\n\nPremise: The dog eats the rabbit.\nFOL: Eats(dog, rabbit)\n\nPremise: The rabbit chases the bear.\nFOL: Chases(rabbit, bear)\n</CONTEXT>"], ["Premise: Anne is a thing.\nFOL: Thing(Anne)\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\nPremise: Erin is a thing.\nFOL: Thing(Erin)\nPremise: Harry is a thing.\nFOL: Thing(Harry)\nPremise: Blue is a color.\nFOL: Color(Blue)\nPremise: Red is a color.\nFOL: Color(Red)\nPremise: White is a color.\nFOL: Color(White)\nPremise: Nice is a characteristic.\nFOL: Characteristic(Nice)\nPremise: Round is a shape.\nFOL: Shape(Round)\nPremise: Young is an age.\nFOL: Age(Young)\nPremise: All rough things are not smooth.\nFOL: all x. (Rough(x) -> -Smooth(x))\n"], ["Premise: Gary is big.\nFOL: Big(Gary)\n\nPremise: Charlie is nice and Charlie is blue.\nFOL: Nice(Charlie) & Blue(Charlie)\n\nPremise: Bob is round.\nFOL: Round(Bob)\n\nPremise: Harry is big.\nFOL: Big(Harry)\n\nPremise: Gary is quiet.\nFOL: Quiet(Gary)"], ["Premise: The bear is rough.\nFOL: Rough(Bear)\n\nPremise: The bear is not kind.\nFOL: -Kind(Bear)\n\nPremise: The cat is not rough.\nFOL: -Rough(Cat)\n\nPremise: The cat is not kind.\nFOL: -Kind(Cat)\n\nPremise: The tiger is rough.\nFOL: Rough(Tiger)\n\nPremise: The tiger is kind.\nFOL: Kind(Tiger)\n\nPremise: If someone is kind then they are not rough.\nFOL: all x. (Kind(x) -> -Rough(x))\n\nPremise: If someone sees the cat then the cat sees them.\nFOL: all x. (Sees(x, Cat) -> Sees(Cat, x))\n\nPremise: If someone visits the bear then they see the bear.\nFOL: all x. (Visits(x, Bear) -> Sees(x, Bear))\n\nPremise: If someone visits the cat then they see the cat.\nFOL: all x. (Visits(x, Cat) -> Sees(x, Cat))\n\n<CONTEXT>\nPremise: The bear is rough.\nFOL: Rough(Bear)\n\nPremise: The bear is not kind.\nFOL: -Kind(Bear)\n\nPremise: The cat is not rough.\nFOL: -Rough(Cat)\n\nPremise: The cat is not kind.\nFOL: -Kind(Cat)\n\nPremise: If someone is kind then they are not rough.\nFOL: all x. (Kind(x) -> -Rough(x))\n</CONTEXT>"], ["Premise: The bald eagle needs the cow.\nFOL: all x. (BaldEagle(x) -> Needs(x, Cow))\n\nPremise: The bald eagle needs the rabbit.\nFOL: all x. (BaldEagle(x) -> Needs(x, Rabbit))\n\nPremise: The bald eagle needs the squirrel.\nFOL: all x. (BaldEagle(x) -> Needs(x, Squirrel))\n\nPremise: The cow does not chase the rabbit.\nFOL: all x. (Cow(x) -> -Chases(x, Rabbit))\n\nPremise: The cow chases the squirrel.\nFOL: all x. (Cow(x) -> Chases(x, Squirrel))\n\nPremise: The cow likes the bald eagle.\nFOL: all x. (Cow(x) -> Likes(x, BaldEagle))\n\nPremise: The rabbit is big.\nFOL: all x. (Rabbit(x) -> Big(x))\n\nPremise: The rabbit is round.\nFOL: all x. (Rabbit(x) -> Round(x))\n\nPremise: The rabbit likes the squirrel.\nFOL: all x. (Rabbit(x) -> Likes(x, Squirrel))\n\nPremise: The squirrel chases the cow.\nFOL: all x. (Squirrel(x) -> Chases(x, Cow))\n\nPremise: The squirrel chases the rabbit.\nFOL: all x. (Squirrel(x) -> Chases(x, Rabbit))\n\nPremise: If someone chases the bald eagle and they are big then they do not like the cow.\nFOL: all x. (Chases(x, BaldEagle) & Big(x) -> -Likes(x, Cow))\n\nPremise: If someone chases the cow and they are round then they are kind.\nFOL: all x. (Chases(x, Cow) & Round(x) -> Kind(x))\n\nPremise: If the cow likes the rabbit and the rabbit likes the bald eagle then the bald eagle needs the rabbit.\nFOL: all x. all y. (Cow(x) & Rabbit(y) & Likes(x, Rabbit) & Likes(y, BaldEagle) -> Needs(BaldEagle, Rabbit))\n\nPremise: If someone likes the cow then they are green.\nFOL: all x. (Likes(x, Cow) -> Green(x))\n\nPremise: If someone is big and they need the bald eagle then they chase the cow.\nFOL: all x. (Big(x) & Needs(x, BaldEagle) -> Chases(x, Cow))\n\nPremise: If someone likes the bald eagle then they do not chase the bald eagle.\nFOL: all x. (Likes(x, BaldEagle) -> -Chases(x, BaldEagle))\n\nPremise: If someone needs the rabbit then the rabbit likes the cow.\nFOL: all x. (Needs(x, Rabbit) -> Likes(Rabbit, Cow))\n\nPremise: If the squirrel needs the cow and the cow chases the squirrel then the squirrel does not like the cow.\nFOL: all x. (Needs(Squirrel, Cow) & Chases(Cow, Squirrel) -> -Likes(Squirrel, Cow))\n\nPremise: If someone is green then they need the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, BaldEagle))\n\nPremise: The bald eagle does not like the rabbit.\nFOL: -Likes(BaldEagle, Rabbit)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The cow is not round.\nFOL: -Round(Cow)\n\nPremise: The rabbit is not green.\nFOL: -Green(Rabbit)\n\nPremise: The squirrel is not big.\nFOL: -Big(Squirrel)\n\nPremise: The bald eagle is not kind.\nFOL: -Kind(BaldEagle)\n\nPremise: The cow does not need the rabbit.\nFOL: -Needs(Cow, Rabbit)\n\nPremise: The rabbit does not chase the cow.\nFOL: -Chases(Rabbit, Cow)\n\nPremise: The squirrel does not like the rabbit.\nFOL: -Likes(Squirrel, Rabbit)\n\nPremise: The bald eagle does not chase the squirrel.\nFOL: -Chases(BaldEagle, Squirrel)\n\n<CONTEXT>\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The cow is not round.\nFOL: -Round(Cow)\n</CONTEXT>"], ["Premise: The bald eagle is not young.\nFOL: - Young(BaldEagle)\n\nPremise: The bald eagle is not green.\nFOL: - Green(BaldEagle)\n\nPremise: The bald eagle is round.\nFOL: Round(BaldEagle)\n\nPremise: The bald eagle likes the lion.\nFOL: Likes(BaldEagle, Lion)\n\nPremise: The dog is red.\nFOL: Red(Dog)\n\nPremise: The lion does not chase the dog.\nFOL: - Chases(Lion, Dog)\n\nPremise: The lion is round.\nFOL: Round(Lion)\n\nPremise: The lion is not young.\nFOL: - Young(Lion)\n\nPremise: The rabbit chases the dog.\nFOL: Chases(Rabbit, Dog)\n\nPremise: The rabbit eats the lion.\nFOL: Eats(Rabbit, Lion)\n\nPremise: If something chases the dog then it likes the rabbit.\nFOL: all x. (Chases(x, Dog) -> Likes(x, Rabbit))\n\nPremise: If something is red and it chases the lion then the lion likes the bald eagle.\nFOL: all x. (Red(x) & Chases(x, Lion) -> Likes(Lion, BaldEagle))\n\nPremise: If something is big then it chases the rabbit.\nFOL: all x. (Big(x) -> Chases(x, Rabbit))\n\nPremise: If something is round and it chases the bald eagle then the bald eagle does not like the dog.\nFOL: all x. (Round(x) & Chases(x, BaldEagle) -> -Likes(BaldEagle, Dog))\n\nPremise: If something likes the lion then it is red.\nFOL: all x. (Likes(x, Lion) -> Red(x))\n\nPremise: If something is red and round then it does not chase the bald eagle.\nFOL: all x. (Red(x) & Round(x) -> -Chases(x, BaldEagle))\n\nPremise: If something is red and young then it chases the bald eagle.\nFOL: all x. (Red(x) & Young(x) -> Chases(x, BaldEagle))\n\nPremise: If something likes the bald eagle and the bald eagle chases the lion then it likes the lion.\nFOL: all x. (Likes(x, BaldEagle) & Chases(BaldEagle, Lion) -> Likes(x, Lion))\n\nPremise: If something eats the bald eagle then the bald eagle is red.\nFOL: all x. (Eats(x, BaldEagle) -> Red(BaldEagle))\n\nPremise: The bald eagle does not chase the bald eagle.\nFOL: - Chases(BaldEagle, BaldEagle)\n\n<CONTEXT>\nPremise: The bald eagle is not young.\nFOL: - Young(BaldEagle)\n\nPremise: The bald eagle is not green.\nFOL: - Green(BaldEagle)\n\nPremise: The bald eagle is round.\nFOL: Round(BaldEagle)\n\nPremise: The bald eagle likes the lion.\nFOL: Likes(BaldEagle, Lion)\n\nPremise: The lion is round.\nFOL: Round(Lion)\n</CONTEXT>"], ["Premise: Bob is nice.\nFOL: Nice(Bob)\n\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Erin is big.\nFOL: Big(Erin)\n\nPremise: Erin is young.\nFOL: Young(Erin)\n\n<CONTEXT>\nPremise: Bob is big.\nFOL: Big(Bob)\nPremise: Bob is nice.\nFOL: Nice(Bob)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Erin is big.\nFOL: Big(Erin)\n</CONTEXT>"]]