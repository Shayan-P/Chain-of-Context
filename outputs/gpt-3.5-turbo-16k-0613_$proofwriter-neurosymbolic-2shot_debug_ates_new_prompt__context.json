[["Premise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The dog is an animal.\nFOL: Animal(dog)\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\nPremise: If something needs the tiger, then the tiger is important.\nFOL: all x. (Needs(x, tiger) -> Important(tiger))\n"], ["Premise: Erin is a person.\nFOL: Person(Erin)\n\nPremise: Fiona is a person.\nFOL: Person(Fiona)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Nice is a desirable trait.\nFOL: Desirable(Nice)\n\nPremise: White is a color.\nFOL: Color(White)\n\nPremise: Quiet is a characteristic.\nFOL: Characteristic(Quiet)\n\nPremise: Cold is a temperature.\nFOL: Temperature(Cold)\n\nPremise: Green is a color.\nFOL: Color(Green)\n\nPremise: Round is a shape.\nFOL: Shape(Round)\n\nPremise: All people have characteristics.\nFOL: all x. (Person(x) -> Characteristic(x))\n\nPremise: If someone is nice, they are desirable.\nFOL: all x. (Nice(x) -> Desirable(x))\n\nPremise: If someone is white, they have a color.\nFOL: all x. (White(x) -> Color(x))\n\nPremise: If someone is quiet, they have a characteristic.\nFOL: all x. (Quiet(x) -> Characteristic(x))\n\nPremise: If someone is cold, they have a temperature.\nFOL: all x. (Cold(x) -> Temperature(x))\n\nPremise: If someone is green, they have a color.\nFOL: all x. (Green(x) -> Color(x))\n\nPremise: If someone is round, they have a shape.\nFOL: all x. (Round(x) -> Shape(x))\n\nPremise: If Erin is round, Erin has a shape.\nFOL: (Round(Erin) -> Shape(Erin))\n\nPremise: If Erin is green, Erin has a color.\nFOL: (Green(Erin) -> Color(Erin))\n\nPremise: If Erin is nice, Erin has a desirable trait.\nFOL: (Nice(Erin) -> Desirable(Erin))\n\nPremise: If Erin is quiet, Erin has a characteristic.\nFOL: (Quiet(Erin) -> Characteristic(Erin))\n\nPremise: If Erin is white, Erin has a color.\nFOL: (White(Erin) -> Color(Erin))\n\nPremise: If Fiona is quiet, Fiona has a characteristic.\nFOL: (Quiet(Fiona) -> Characteristic(Fiona))\n\nPremise: If Gary is white, Gary has a color.\nFOL: (White(Gary) -> Color(Gary))\n\nPremise: If Gary is quiet, Gary has a characteristic.\nFOL: (Quiet(Gary) -> Characteristic(Gary))\n\nPremise: If Harry is cold, Harry has a temperature.\nFOL: (Cold(Harry) -> Temperature(Harry))\n\nPremise: If Harry is green, Harry has a color.\nFOL: (Green(Harry) -> Color(Harry))\n\nPremise: If Harry is nice, Harry has a desirable trait.\nFOL: (Nice(Harry) -> Desirable(Harry))\n\nPremise: If Harry is quiet, Harry has a characteristic.\nFOL: (Quiet(Harry) -> Characteristic(Harry))\n\nPremise: If Harry is round, Harry has a shape.\nFOL: (Round(Harry) -> Shape(Harry))\n\nPremise: If Harry is white, Harry has a color.\nFOL: (White(Harry) -> Color(Harry))\n\nPremise: If quiet people are round, they have a shape.\nFOL: all x. ((Quiet(x) & Person(x)) -> Shape(x))\n\nPremise: If someone is nice and green, they have a desirable trait.\nFOL: all x. ((Nice(x) & Green(x)) -> Desirable(x))\n\nPremise: If someone is round, they are nice.\nFOL: all x. (Round(x) -> Nice(x))\n\nPremise: If someone is cold, they are quiet.\nFOL: all x. (Cold(x) -> Quiet(x))\n\nPremise: If Gary is quiet, Gary is not white.\nFOL: (Quiet(Gary) -> -White(Gary))\n\nPremise: If someone is nice and green, they are smart.\nFOL: all x. ((Nice(x) & Green(x)) -> Smart(x))\n\nPremise: Fiona is not cold.\nFOL: -Cold(Fiona)\n\n<CONTEXT>\nPremise: Erin is a person.\nFOL: Person(Erin)\n\nPremise: Fiona is a person.\nFOL: Person(Fiona)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Nice is a desirable trait.\nFOL: Desirable(Nice)\n\nPremise: White is a color.\nFOL: Color(White)\n\nPremise: Quiet is a characteristic.\nFOL: Characteristic(Quiet)\n\nPremise: Cold is a temperature.\nFOL: Temperature(Cold)\n\nPremise: Green is a color.\nFOL: Color(Green)\n\nPremise: Round is a shape.\nFOL: Shape(Round)\n\nPremise: All people have characteristics.\nFOL: all x. (Person(x) -> Characteristic(x))\n\nPremise: If someone is nice, they are desirable.\nFOL: all x. (Nice(x) -> Desirable(x))\n\nPremise: If someone is white, they have a color.\nFOL: all x. (White(x) -> Color(x))\n\nPremise: If someone is quiet, they have a characteristic.\nFOL: all x. (Quiet(x) -> Characteristic(x))\n\nPremise: If someone is cold, they have a temperature.\nFOL: all x. (Cold(x) -> Temperature(x))\n\nPremise: If someone is green, they have a color.\nFOL: all x. (Green(x) -> Color(x))\n\nPremise: If someone is round, they have a shape.\nFOL: all x. (Round(x) -> Shape(x))\n\nPremise: If Erin is round, Erin has a shape.\nFOL: (Round(Erin) -> Shape(Erin))\n\nPremise: If Erin is green, Erin has a color.\nFOL: (Green(Erin) -> Color(Erin))\n\nPremise: If Erin is nice, Erin has a desirable trait.\nFOL: (Nice(Erin) -> Desirable(Erin))\n\nPremise: If Erin is quiet, Erin has a characteristic.\nFOL: (Quiet(Erin) -> Characteristic(Erin))\n\nPremise: If Erin is white, Erin has a color.\nFOL: (White(Erin) -> Color(Erin))\n\nPremise: If Fiona is quiet, Fiona has a characteristic.\nFOL: (Quiet(Fiona) -> Characteristic(Fiona))\n\nPremise: If Gary is white, Gary has a color.\nFOL: (White(Gary) -> Color(Gary))\n\nPremise: If Gary is quiet, Gary has a characteristic.\nFOL: (Quiet(Gary) -> Characteristic(Gary))\n\nPremise: If Harry is cold, Harry has a temperature.\nFOL: (Cold(Harry) -> Temperature(Harry))\n\nPremise: If Harry is green, Harry has a color.\nFOL: (Green(Harry) -> Color(Harry))\n\nPremise: If Harry is nice, Harry has a desirable trait.\nFOL: (Nice(Harry) -> Desirable(Harry))\n\nPremise: If Harry is quiet, Harry has a characteristic.\nFOL: (Quiet(Harry) -> Characteristic(Harry))\n\nPremise: If Harry is round, Harry has a shape.\nFOL: (Round(Harry) -> Shape(Harry))\n\nPremise: If Harry is white, Harry has a color.\nFOL: (White(Harry) -> Color(Harry))\n\nPremise: If quiet people are round, they have a shape.\nFOL: all x. ((Quiet(x) & Person(x)) -> Shape(x))\n\nPremise: If someone is nice and green, they have a desirable trait.\nFOL: all x. ((Nice(x) & Green(x)) -> Desirable(x))\n\nPremise: If someone is round, they are nice.\nFOL: all x. (Round(x) -> Nice(x))\n\nPremise: If someone is cold, they are quiet.\nFOL: all x. (Cold(x) -> Quiet(x))\n\nPremise: If Gary is quiet, Gary is not white.\nFOL: (Quiet(Gary) -> -White(Gary))\n\nPremise: If someone is nice and green, they are smart.\nFOL: all x. ((Nice(x) & Green(x)) -> Smart(x))\n\nPremise: Fiona is not cold.\nFOL: -Cold(Fiona)\n</CONTEXT>"], ["Premise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))"], ["Premise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\nPremise: Dave is blue.\nFOL: Blue(Dave)\nPremise: Dave is quiet.\nFOL: Quiet(Dave)\nPremise: Dave is smart.\nFOL: Smart(Dave)\nPremise: Fiona is blue.\nFOL: Blue(Fiona)\nPremise: Fiona is nice.\nFOL: Nice(Fiona)\nPremise: Fiona is smart.\nFOL: Smart(Fiona)\nPremise: Harry is blue.\nFOL: Blue(Harry)\nPremise: Harry is nice.\nFOL: Nice(Harry)\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\nPremise: All red things are blue.\nFOL: all x. (Red(x) -> Blue(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All blue things are smart.\nFOL: all x. (Blue(x) -> Smart(x))\nPremise: If Charlie is quiet then Charlie is blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nPremise: If Charlie is blue and Charlie is nice then Charlie is smart.\nFOL: all x. (Blue(x) & Nice(x) -> Smart(x))\nPremise: If Charlie is red and Charlie is quiet then Charlie is smart.\nFOL: all x. (Red(x) & Quiet(x) -> Smart(x))\nPremise: If Charlie is nice then Charlie is smart.\nFOL: all x. (Nice(x) -> Smart(x))\nPremise: If Dave is blue and Dave is quiet then Dave is smart.\nFOL: all x. (Blue(x) & Quiet(x) -> Smart(x))\nPremise: If Dave is quiet then Dave is blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nPremise: If Dave is smart then Dave is blue.\nFOL: all x. (Smart(x) -> Blue(x))\nPremise: If Fiona is blue and Fiona is nice then Fiona is smart.\nFOL: all x. (Blue(x) & Nice(x) -> Smart(x))\nPremise: If Fiona is nice then Fiona is smart.\nFOL: all x. (Nice(x) -> Smart(x))\nPremise: If Fiona is quiet then Fiona is blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nPremise: If Fiona is red then Fiona is smart.\nFOL: all x. (Red(x) -> Smart(x))\nPremise: If Fiona is smart then Fiona is blue.\nFOL: all x. (Smart(x) -> Blue(x))\nPremise: If Harry is blue and Harry is nice then Harry is smart.\nFOL: all x. (Blue(x) & Nice(x) -> Smart(x))\nPremise: If Harry is nice then Harry is smart.\nFOL: all x. (Nice(x) -> Smart(x))\nPremise: If Harry is quiet then Harry is blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nPremise: If Harry is smart then Harry is blue.\nFOL: all x. (Smart(x) -> Blue(x))\n\n<CONTEXT>\nPremise: Charlie is cold.\nFOL: Cold(Charlie)\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\nPremise: Dave is blue.\nFOL: Blue(Dave)\nPremise: Dave is furry.\nFOL: Furry(Dave)\nPremise: Dave is nice.\nFOL: Nice(Dave)\nPremise: Dave is quiet.\nFOL: Quiet(Dave)\nPremise: Fiona is furry.\nFOL: Furry(Fiona)\nPremise: Fiona is quiet.\nFOL: Quiet(Fiona)\nPremise: Fiona is red.\nFOL: Red(Fiona)\nPremise: Fiona is smart.\nFOL: Smart(Fiona)\nPremise: Harry is cold.\nFOL: Cold(Harry)\nPremise: All blue things are red.\nFOL: all x. (Blue(x) -> Red(x))\nPremise: Blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\nPremise: Red, quiet things are smart.\nFOL: all x. (Red(x) & Quiet(x) -> Smart(x))\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\nPremise: Quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\nPremise: Charlie is smart.\nFOL: Smart(Charlie)\n</CONTEXT>"], ["Premise: Dave is a living being.\nFOL: LivingBeing(Dave)\n\nPremise: Erin is a living being.\nFOL: LivingBeing(Erin)\n\nPremise: Fiona is a living being.\nFOL: LivingBeing(Fiona)\n\nPremise: Gary is a living being.\nFOL: LivingBeing(Gary)\n\nPremise: All living beings are either furry, kind, or both.\nFOL: all x. (LivingBeing(x) -> (Furry(x) | Kind(x)))\n\nPremise: All furry things are either green or white.\nFOL: all x. (Furry(x) -> (Green(x) | White(x)))\n\nPremise: All round things are either green, furry, or both.\nFOL: all x. (Round(x) -> (Green(x) | Furry(x)))\n\nPremise: All white things are either furry or big.\nFOL: all x. (White(x) -> (Furry(x) | Big(x)))\n\nPremise: All young things are round.\nFOL: all x. (Young(x) -> Round(x)))\n\nPremise: All big things are young.\nFOL: all x. (Big(x) -> Young(x))\n\n<CONTEXT>\nPremise: Dave is a living being.\nFOL: LivingBeing(Dave)\nPremise: Erin is a living being.\nFOL: LivingBeing(Erin)\nPremise: Fiona is a living being.\nFOL: LivingBeing(Fiona)\nPremise: Gary is a living being.\nFOL: LivingBeing(Gary)\nPremise: All living beings are either furry, kind, or both.\nFOL: all x. (LivingBeing(x) -> (Furry(x) | Kind(x)))\n</CONTEXT>"], ["<CONTEXT>\nPremise: The bald eagle is not red.\nFOL: -Red(BaldEagle)\nPremise: The bear is not round.\nFOL: -Round(Bear)\nPremise: The tiger is not round.\nFOL: -Round(Tiger)\nPremise: If something is round and it needs the tiger then the tiger is round.\nFOL: all x. (Round(x) & Needs(x, Tiger) -> Round(Tiger))\nPremise: If something needs the bald eagle then it is not red.\nFOL: all x. (Needs(x, BaldEagle) -> -Red(x))\n</CONTEXT>"], ["Premise: If something is nice then it is smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If something is green then it is smart.\nFOL: all x. (Green(x) -> Smart(x))\n\nPremise: If something is white and green then it is rough.\nFOL: all x. (White(x) & Green(x) -> Rough(x))\n\nPremise: If Anne is rough then Anne is green.\nFOL: (Rough(Anne) -> Green(Anne))\n\nPremise: If something is nice and white then it is quiet.\nFOL: all x. (Nice(x) & White(x) -> Quiet(x))\n\n<CONTEXT>\nPremise: If something is nice then it is smart.\nFOL: all x. (Nice(x) -> Smart(x))\nPremise: If something is green then it is smart.\nFOL: all x. (Green(x) -> Smart(x))\nPremise: If something is white and green then it is rough.\nFOL: all x. (White(x) & Green(x) -> Rough(x))\nPremise: If Anne is rough then Anne is green.\nFOL: (Rough(Anne) -> Green(Anne))\nPremise: If something is nice and white then it is quiet.\nFOL: all x. (Nice(x) & White(x) -> Quiet(x))\n</CONTEXT>"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: The animal that eats another animal is a predator.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(x, y) -> Predator(x))\n\nPremise: The animal that is eaten by another animal is a prey.\nFOL: all x. all y. (Animal(x) & Animal(y) & Eats(y, x) -> Prey(x))\n\nPremise: If an animal visits another animal, they are in the same habitat.\nFOL: all x. all y. (Animal(x) & Animal(y) & Visits(x, y) -> InSameHabitat(x, y))\n\nPremise: If an animal needs another animal, they are dependent on each other.\nFOL: all x. all y. (Animal(x) & Animal(y) & Needs(x, y) -> Dependent(x, y))\n\nPremise: If someone is dependent on an animal and that animal is a predator, they are in danger.\nFOL: all x. all y. (Animal(x) & Predator(y) & Dependent(x, y) -> InDanger(x))\n\nPremise: If someone is in danger, they need protection.\nFOL: all x. (InDanger(x) -> NeedsProtection(x))"], ["Premise: Bob is big.\nFOL: Big(Bob)\nPremise: Erin is big.\nFOL: Big(Erin)\nPremise: If someone is furry and big then they are kind.\nFOL: all x. (Furry(x) & Big(x) -> Kind(x))\nPremise: If someone is rough and big then they are furry.\nFOL: all x. (Rough(x) & Big(x) -> Furry(x))\nPremise: If someone is smart and big then they are rough.\nFOL: all x. (Smart(x) & Big(x) -> Rough(x))\n"], ["Premise: The bear is not red.\nFOL: -Red(Bear)\nPremise: The bear does not eat the dog.\nFOL: -Eat(Bear, Dog)\nPremise: The bear does not eat the cat.\nFOL: -Eat(Bear, Cat)\nPremise: The bear does not eat the cow.\nFOL: -Eat(Bear, Cow)\nPremise: The bear does not chase the dog.\nFOL: -Chase(Bear, Dog)\n"], ["Premise: All round things are not small.\nFOL: all x. (Round(x) -> -Small(x))\n\nPremise: All young things are not old.\nFOL: all x. (Young(x) -> -Old(x))\n\nPremise: All green things are not blue.\nFOL: all x. (Green(x) -> -Blue(x))\n\nPremise: All kind things are not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\n\nPremise: All smart things are not dumb.\nFOL: all x. (Smart(x) -> -Dumb(x))\n\n<CONTEXT>\nPremise: All round things are not small.\nFOL: all x. (Round(x) -> -Small(x))\n\nPremise: All young things are not old.\nFOL: all x. (Young(x) -> -Old(x))\n\nPremise: All green things are not blue.\nFOL: all x. (Green(x) -> -Blue(x))\n\nPremise: All kind things are not mean.\nFOL: all x. (Kind(x) -> -Mean(x))\n\nPremise: All smart things are not dumb.\nFOL: all x. (Smart(x) -> -Dumb(x))\n</CONTEXT>"], ["Premise: Dave is nice.\nFOL: Nice(Dave)\n\nPremise: Dave is round.\nFOL: Round(Dave)\n\nPremise: Dave is white.\nFOL: White(Dave)\n\nPremise: Dave is young.\nFOL: Young(Dave)\n\nPremise: Fiona is nice.\nFOL: Nice(Fiona)\n\nPremise: Fiona is round.\nFOL: Round(Fiona)\n\nPremise: Fiona is white.\nFOL: White(Fiona)\n\nPremise: Gary is nice.\nFOL: Nice(Gary)\n\nPremise: Harry is nice.\nFOL: Nice(Harry)\n\nPremise: Harry is round.\nFOL: Round(Harry)\n\nPremise: Harry is white.\nFOL: White(Harry)\n\nPremise: Harry is young.\nFOL: Young(Harry)\n\nPremise: Harry is smart.\nFOL: Smart(Harry)\n\nPremise: If Dave is red then Dave is young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: If something is nice then it is smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If something is round then it is white.\nFOL: all x. (Round(x) -> White(x))\n\nPremise: If something is white then it is round.\nFOL: all x. (White(x) -> Round(x))\n\nPremise: If something is young then it is red.\nFOL: all x. (Young(x) -> Red(x))\n\nPremise: If something is smart then it is young.\nFOL: all x. (Smart(x) -> Young(x))\n\nPremise: If something is red then it is nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nPremise: If something is smart then it is nice.\nFOL: all x. (Smart(x) -> Nice(x))\n\nPremise: If something is white then it is nice.\nFOL: all x. (White(x) -> Nice(x))\n\nPremise: If something is red then it is round.\nFOL: all x. (Red(x) -> Round(x))\n\nPremise: If something is white then it is round.\nFOL: all x. (White(x) -> Round(x))\n\nPremise: If something is young then it is nice.\nFOL: all x. (Young(x) -> Nice(x))\n\nPremise: If something is round then it is nice.\nFOL: all x. (Round(x) -> Nice(x))"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If someone is an animal, then they are alive.\nFOL: all x. (Animal(x) -> Alive(x))\n\n<Pick the top 5 relevant premises>"], ["<PREMISES>\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: If something is an animal, then it is not a plant.\nFOL: all x. (Animal(x) -> -Plant(x))\n</PREMISES>\n\n<CONTEXT>\nPremise: The bear is an animal.\nFOL: Animal(Bear)\nPremise: The cow is an animal.\nFOL: Animal(Cow)\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\nPremise: The dog is an animal.\nFOL: Animal(Dog)\nPremise: If something is an animal, then it is not a plant.\nFOL: all x. (Animal(x) -> -Plant(x))\n</CONTEXT>"], ["Premise: Anne is a person.\nFOL: Person(Anne)\n\nPremise: Charlie is a person.\nFOL: Person(Charlie)\n\nPremise: Erin is a person.\nFOL: Person(Erin)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Anne is not Charlie.\nFOL: -Anne(Charlie)\n\nPremise: Anne is not Erin.\nFOL: -Anne(Erin)\n\nPremise: Anne is not Harry.\nFOL: -Anne(Harry)\n\nPremise: Charlie is not Anne.\nFOL: -Charlie(Anne)\n\nPremise: Charlie is not Erin.\nFOL: -Charlie(Erin)\n\nPremise: Charlie is not Harry.\nFOL: -Charlie(Harry)\n\nPremise: Erin is not Anne.\nFOL: -Erin(Anne)\n\nPremise: Erin is not Charlie.\nFOL: -Erin(Charlie)\n\nPremise: Erin is not Harry.\nFOL: -Erin(Harry)\n\nPremise: Harry is not Anne.\nFOL: -Harry(Anne)\n\nPremise: Harry is not Charlie.\nFOL: -Harry(Charlie)\n\nPremise: Harry is not Erin.\nFOL: -Harry(Erin)\n\n<CONTEXT>\nPremise: Anne, Charlie, Erin, and Harry are people.\nFOL: Person(Anne) & Person(Charlie) & Person(Erin) & Person(Harry)\nPremise: Anne, Charlie, Erin, and Harry are all different from each other.\nFOL: -Anne(Charlie) & -Anne(Erin) & -Anne(Harry) & -Charlie(Anne) & -Charlie(Erin) & -Charlie(Harry) & -Erin(Anne) & -Erin(Charlie) & -Erin(Harry) & -Harry(Anne) & -Harry(Charlie) & -Harry(Erin)\n</CONTEXT>"], ["Premise: All blue people are nice.\nFOL: all x. (Blue(x) -> Nice(x))\nPremise: All big people are round.\nFOL: all x. (Big(x) -> Round(x))\nPremise: All rough people are big.\nFOL: all x. (Rough(x) -> Big(x))\nPremise: All quiet people are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young people are round.\nFOL: all x. (Young(x) -> Round(x))\n"], ["Premise: If someone visits the cat then they see the bear.\nFOL: all x. (Visits(x, cat) -> Sees(x, bear))\n\nPremise: If someone sees the bear then they are rough.\nFOL: all x. (Sees(x, bear) -> Rough(x))\n\nPremise: If someone visits the mouse then they see the bear.\nFOL: all x. (Visits(x, mouse) -> Sees(x, bear))\n\nPremise: If someone is kind then they visit the mouse.\nFOL: all x. (Kind(x) -> Visits(x, mouse))\n\nPremise: If someone needs the bear then they are kind.\nFOL: all x. (Needs(x, bear) -> Kind(x))"], ["Premise: The bald eagle needs the squirrel to survive.\nFOL: Needs(BaldEagle, Squirrel)\n\nPremise: The cow does not like the squirrel.\nFOL: -Likes(Cow, Squirrel)\n\nPremise: If someone chases the squirrel and they are big, then they do not like the squirrel.\nFOL: all x. (Chase(x, Squirrel) & Big(x) -> -Likes(x, Squirrel))\n\nPremise: If someone chases the squirrel and they are round, then they like the squirrel.\nFOL: all x. (Chase(x, Squirrel) & Round(x) -> Likes(x, Squirrel))\n\nPremise: If someone likes the squirrel, then they do not need the squirrel.\nFOL: all x. (Likes(x, Squirrel) -> -Needs(x, Squirrel))\n\n<CONTEXT>\nPremise: The bald eagle needs the squirrel.\nFOL: Needs(BaldEagle, Squirrel)\n\nPremise: The cow does not like the squirrel.\nFOL: -Likes(Cow, Squirrel)\n\nPremise: If someone chases the squirrel and they are big, then they do not like the squirrel.\nFOL: all x. (Chase(x, Squirrel) & Big(x) -> -Likes(x, Squirrel))\n\nPremise: If someone chases the squirrel and they are round, then they like the squirrel.\nFOL: all x. (Chase(x, Squirrel) & Round(x) -> Likes(x, Squirrel))\n\nPremise: If someone likes the squirrel, then they do not need the squirrel.\nFOL: all x. (Likes(x, Squirrel) -> -Needs(x, Squirrel))\n</CONTEXT>"], ["Premise: The bald eagle is not a lion.\nFOL: -IsLion(BaldEagle)\n\nPremise: The bald eagle is not a dog.\nFOL: -IsDog(BaldEagle)\n\nPremise: The bald eagle is not a rabbit.\nFOL: -IsRabbit(BaldEagle)\n\nPremise: The lion is not a bald eagle.\nFOL: -IsBaldEagle(Lion)\n\nPremise: The lion is not a dog.\nFOL: -IsDog(Lion)\n\nPremise: The lion is not a rabbit.\nFOL: -IsRabbit(Lion)\n\nPremise: The dog is not a lion.\nFOL: -IsLion(Dog)\n\nPremise: The dog is not a bald eagle.\nFOL: -IsBaldEagle(Dog)\n\nPremise: The dog is not a rabbit.\nFOL: -IsRabbit(Dog)\n\nPremise: The rabbit is not a lion.\nFOL: -IsLion(Rabbit)\n\nPremise: The rabbit is not a bald eagle.\nFOL: -IsBaldEagle(Rabbit)\n\nPremise: The rabbit is not a dog.\nFOL: -IsDog(Rabbit)\n\nPremise: The lion does not eat the lion.\nFOL: -Eats(Lion, Lion)\n\nPremise: The lion does not eat the dog.\nFOL: -Eats(Lion, Dog)\n\nPremise: The lion does not eat the rabbit.\nFOL: -Eats(Lion, Rabbit)\n\nPremise: The dog does not eat the lion.\nFOL: -Eats(Dog, Lion)\n\nPremise: The dog does not eat the dog.\nFOL: -Eats(Dog, Dog)\n\nPremise: The dog does not eat the rabbit.\nFOL: -Eats(Dog, Rabbit)\n\nPremise: The rabbit does not eat the lion.\nFOL: -Eats(Rabbit, Lion)\n\nPremise: The rabbit does not eat the dog.\nFOL: -Eats(Rabbit, Dog)\n\nPremise: The rabbit does not eat the rabbit.\nFOL: -Eats(Rabbit, Rabbit)"], ["Premise: Bob is furry.\nFOL: Furry(Bob)\n\nPremise: Bob is red.\nFOL: Red(Bob)\n\nPremise: Charlie is big.\nFOL: Big(Charlie)\n\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\n\nPremise: Charlie is young.\nFOL: Young(Charlie)\n\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\n\nPremise: Erin is red.\nFOL: Red(Erin)\n\nPremise: Erin is young.\nFOL: Young(Erin)\n\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\n\nPremise: Harry is red.\nFOL: Red(Harry)\n\nPremise: Harry is furry.\nFOL: Furry(Harry)\n\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: All furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\n\nPremise: All furry things are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\n\nPremise: All red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\n\nPremise: All red things are young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\n\nPremise: All young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nPremise: All young things are red.\nFOL: all x. (Young(x) -> Red(x))\n\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\n\nPremise: All green things are red.\nFOL: all x. (Green(x) -> Red(x))\n\nPremise: All green things are young.\nFOL: all x. (Green(x) -> Young(x))\n\nPremise: All red things are big.\nFOL: all x. (Red(x) -> Big(x))\n\nPremise: If something is red then it is quiet.\nFOL: all x. (Red(x) -> Quiet(x))\n\nPremise: If something is red then it is furry.\nFOL: all x. (Red(x) -> Furry(x))\n\nPremise: If something is red then it is young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: If something is quiet then it is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If something is quiet then it is red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nPremise: If something is quiet then it is young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: If something is furry then it is quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: If something is furry then it is red.\nFOL: all x. (Furry(x) -> Red(x))\n\nPremise: If something is furry then it is young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: If something is young then it is quiet.\nFOL: all x. (Young(x) -> Quiet(x))\n\nPremise: If something is young then it is furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nPremise: If something is young then it is red.\nFOL: all x. (Young(x) -> Red(x))\n\nPremise: If Bob is big and Bob is young then Bob is quiet.\nFOL: (Big(Bob) & Young(Bob) -> Quiet(Bob))\n\nPremise: If Bob is big and Bob is young then Bob is furry.\nFOL: (Big(Bob) & Young(Bob) -> Furry(Bob))\n\nPremise: If Bob is big and Bob is young then Bob is red.\nFOL: (Big(Bob) & Young(Bob) -> Red(Bob))\n\nPremise: If Charlie is quiet then Charlie is furry.\nFOL: (Quiet(Charlie) -> Furry(Charlie))\n\nPremise: If Charlie is quiet then Charlie is red.\nFOL: (Quiet(Charlie) -> Red(Charlie))\n\nPremise: If Charlie is quiet then Charlie is young.\nFOL: (Quiet(Charlie) -> Young(Charlie))\n\nPremise: If Erin is quiet then Erin is furry.\nFOL: (Quiet(Erin) -> Furry(Erin))\n\nPremise: If Erin is quiet then Erin is red.\nFOL: (Quiet(Erin) -> Red(Erin))\n\nPremise: If Erin is quiet then Erin is young.\nFOL: (Quiet(Erin) -> Young(Erin))\n\nPremise: If Erin is furry then Erin is quiet.\nFOL: (Furry(Erin) -> Quiet(Erin))\n\nPremise: If Erin is furry then Erin is red.\nFOL: (Furry(Erin) -> Red(Erin))\n\nPremise: If Erin is furry then Erin is young.\nFOL: (Furry(Erin) -> Young(Erin))\n\nPremise: If Erin is red then Erin is quiet.\nFOL: (Red(Erin) -> Quiet(Erin))\n\nPremise: If Erin is red then Erin is furry.\nFOL: (Red(Erin) -> Furry(Erin))\n\nPremise: If Erin is red then Erin is young.\nFOL: (Red(Erin) -> Young(Erin))\n\nPremise: If Erin is young then Erin is quiet.\nFOL: (Young(Erin) -> Quiet(Erin))\n\nPremise: If Erin is young then Erin is furry.\nFOL: (Young(Erin) -> Furry(Erin))\n\nPremise: If Erin is young then Erin is red.\nFOL: (Young(Erin) -> Red(Erin))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: (Quiet(Harry) -> Furry(Harry))\n\nPremise: If Harry is quiet then Harry is red.\nFOL: (Quiet(Harry) -> Red(Harry))\n\nPremise: If Harry is quiet then Harry is young.\nFOL: (Quiet(Harry) -> Young(Harry))\n\nPremise: If Harry is furry then Harry is quiet.\nFOL: (Furry(Harry) -> Quiet(Harry))\n\nPremise: If Harry is furry then Harry is red.\nFOL: (Furry(Harry) -> Red(Harry))\n\nPremise: If Harry is furry then Harry is young.\nFOL: (Furry(Harry) -> Young(Harry))\n\nPremise: If Harry is red then Harry is quiet.\nFOL: (Red(Harry) -> Quiet(Harry))\n\nPremise: If Harry is red then Harry is furry.\nFOL: (Red(Harry) -> Furry(Harry))\n\nPremise: If Harry is red then Harry is young.\nFOL: (Red(Harry) -> Young(Harry))\n\nPremise: If Harry is young then Harry is quiet.\nFOL: (Young(Harry) -> Quiet(Harry))\n\nPremise: If Harry is young then Harry is furry.\nFOL: (Young(Harry) -> Furry(Harry))\n\nPremise: If Harry is young then Harry is red.\nFOL: (Young(Harry) -> Red(Harry))\n\nPremise: Furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: Furry things are red.\nFOL: all x. (Furry(x) -> Red(x))\n\nPremise: Furry things are young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: Quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: Quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nPremise: Quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: Red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\n\nPremise: Red things are furry.\nFOL: all x. (Red(x) -> Furry(x))\n\nPremise: Red things are young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: Young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\n\nPremise: Young things are furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nPremise: Young things are red.\nFOL: all x. (Young(x) -> Red(x))\n\nPremise: Green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\n\nPremise: Green things are red.\nFOL: all x. (Green(x) -> Red(x))\n\nPremise: Green things are young.\nFOL: all x. (Green(x) -> Young(x))\n\nPremise: Red things are big.\nFOL: all x. (Red(x) -> Big(x))\n\nPremise: If something is red then it is quiet.\nFOL: all x. (Red(x) -> Quiet(x))\n\nPremise: If something is red then it is furry.\nFOL: all x. (Red(x) -> Furry(x))\n\nPremise: If something is red then it is young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: If something is quiet then it is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If something is quiet then it is red.\nFOL: all x. (Quiet(x) -> Red(x))\n\nPremise: If something is quiet then it is young.\nFOL: all x. (Quiet(x) -> Young(x))\n\nPremise: If something is furry then it is quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\n\nPremise: If something is furry then it is red.\nFOL: all x. (Furry(x) -> Red(x))\n\nPremise: If something is furry then it is young.\nFOL: all x. (Furry(x) -> Young(x))\n\nPremise: If something is young then it is quiet.\nFOL: all x. (Young(x) -> Quiet(x))\n\nPremise: If something is young then it is furry.\nFOL: all x. (Young(x) -> Furry(x))\n\nPremise: If something is young then it is red.\nFOL: all x. (Young(x) -> Red(x))\n\nPremise: If Bob is big and Bob is young then Bob is quiet.\nFOL: (Big(Bob) & Young(Bob) -> Quiet(Bob))\n\nPremise: If Bob is big and Bob is young then Bob is furry.\nFOL: (Big(Bob) & Young(Bob) -> Furry(Bob))\n\nPremise: If Bob is big and Bob is young then Bob is red.\nFOL: (Big(Bob) & Young(Bob) -> Red(Bob))\n\nPremise: If Charlie is quiet then Charlie is furry.\nFOL: (Quiet(Charlie) -> Furry(Charlie))\n\nPremise: If Charlie is quiet then Charlie is red.\nFOL: (Quiet(Charlie) -> Red(Charlie))\n\nPremise: If Charlie is quiet then Charlie is young.\nFOL: (Quiet(Charlie) -> Young(Charlie))\n\nPremise: If Erin is quiet then Erin is furry.\nFOL: (Quiet(Erin) -> Furry(Erin))\n\nPremise: If Erin is quiet then Erin is red.\nFOL: (Quiet(Erin) -> Red(Erin))\n\nPremise: If Erin is quiet then Erin is young.\nFOL: (Quiet(Erin) -> Young(Erin))\n\nPremise: If Erin is furry then Erin is quiet.\nFOL: (Furry(Erin) -> Quiet(Erin))\n\nPremise: If Erin is furry then Erin is red.\nFOL: (Furry(Erin) -> Red(Erin))\n\nPremise: If Erin is furry then Erin is young.\nFOL: (Furry(Erin) -> Young(Erin))\n\nPremise: If Erin is red then Erin is quiet.\nFOL: (Red(Erin) -> Quiet(Erin))\n\nPremise: If Erin is red then Erin is furry.\nFOL: (Red(Erin) -> Furry(Erin))\n\nPremise: If Erin is red then Erin is young.\nFOL: (Red(Erin) -> Young(Erin))\n\nPremise: If Erin is young then Erin is quiet.\nFOL: (Young(Erin) -> Quiet(Erin))\n\nPremise: If Erin is young then Erin is furry.\nFOL: (Young(Erin) -> Furry(Erin))\n\nPremise: If Erin is young then Erin is red.\nFOL: (Young(Erin) -> Red(Erin))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: (Quiet(Harry) -> Furry(Harry))\n\nPremise: If Harry is quiet then Harry is red.\nFOL: (Quiet(Harry) -> Red(Harry))\n\nPremise: If Harry is quiet then Harry is young.\nFOL: (Quiet(Harry) -> Young(Harry))\n\nPremise: If Harry is furry then Harry is quiet.\nFOL: (Furry(Harry) -> Quiet(Harry))\n\nPremise: If Harry is furry then Harry is red.\nFOL: (Furry(Harry) -> Red(Harry))\n\nPremise: If Harry is furry then Harry is young.\nFOL: (Furry(Harry) -> Young(Harry))\n\nPremise: If Harry is red then Harry is quiet.\nFOL: (Red(Harry) -> Quiet(Harry))\n\nPremise: If Harry is red then Harry is furry.\nFOL: (Red(H"]]