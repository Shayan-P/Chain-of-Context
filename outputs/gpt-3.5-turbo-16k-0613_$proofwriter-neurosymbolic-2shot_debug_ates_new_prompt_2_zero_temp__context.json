[["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If something needs the rabbit, then it needs an animal.\nFOL: all x. (Needs(x, rabbit) -> Needs(x, Animal))\n\nPremise: If something needs the tiger, then it needs an animal.\nFOL: all x. (Needs(x, tiger) -> Needs(x, Animal))\n\nPremise: If something sees the rabbit, then it sees an animal.\nFOL: all x. (Sees(x, rabbit) -> Sees(x, Animal))\n\nPremise: If something sees the dog, then it sees an animal.\nFOL: all x. (Sees(x, dog) -> Sees(x, Animal))\n\nPremise: If something sees the tiger, then it sees an animal.\nFOL: all x. (Sees(x, tiger) -> Sees(x, Animal))\n\nPremise: If something eats the dog, then it eats an animal.\nFOL: all x. (Eats(x, dog) -> Eats(x, Animal))\n\nPremise: If something eats the rabbit, then it eats an animal.\nFOL: all x. (Eats(x, rabbit) -> Eats(x, Animal))\n\nPremise: If something eats the tiger, then it eats an animal.\nFOL: all x. (Eats(x, tiger) -> Eats(x, Animal))\n\nPremise: If something eats the bear, then it eats an animal.\nFOL: all x. (Eats(x, bear) -> Eats(x, Animal))\n\nPremise: If something eats the dog and the dog eats the tiger, then it eats an animal.\nFOL: all x. (Eats(x, dog) & Eats(dog, tiger) -> Eats(x, Animal))\n\nPremise: If something eats the bear and the bear sees the rabbit, then it eats an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, rabbit) -> Eats(x, Animal))\n\nPremise: If something eats the bear and the bear sees the dog, then it eats an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, dog) -> Eats(x, Animal))\n\nPremise: If something eats the bear and the bear sees the tiger, then it eats an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, tiger) -> Eats(x, Animal))\n\nPremise: If something eats the bear and the bear sees the rabbit, then it sees an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, rabbit) -> Sees(x, Animal))\n\nPremise: If something eats the bear and the bear sees the dog, then it sees an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, dog) -> Sees(x, Animal))\n\nPremise: If something eats the bear and the bear sees the tiger, then it sees an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, tiger) -> Sees(x, Animal))\n\nPremise: If something eats the bear and the bear sees the rabbit, then it needs an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, rabbit) -> Needs(x, Animal))\n\nPremise: If something eats the bear and the bear sees the dog, then it needs an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, dog) -> Needs(x, Animal))\n\nPremise: If something eats the bear and the bear sees the tiger, then it needs an animal.\nFOL: all x. (Eats(x, bear) & Sees(bear, tiger) -> Needs(x, Animal))\n\nPremise: If something eats the bear and the bear sees the rabbit, then it needs the dog.\nFOL: all x. (Eats(x, bear) & Sees(bear, rabbit) -> Needs(x, dog))\n\nPremise: If something eats the bear and the bear sees the dog, then it needs the rabbit.\nFOL: all x. (Eats(x, bear) & Sees(bear, dog) -> Needs(x, rabbit))\n\nPremise: If something eats the bear and the bear sees the tiger, then it needs the dog.\nFOL: all x. (Eats(x, bear) & Sees(bear, tiger) -> Needs(x, dog))\n\nPremise: If something eats the bear and the bear sees the rabbit, then it needs the tiger.\nFOL: all x. (Eats(x, bear) & Sees(bear, rabbit) -> Needs(x, tiger))\n\n<CONTEXT>\nPremise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: If something needs the rabbit, then it needs an animal.\nFOL: all x. (Needs(x, rabbit) -> Needs(x, Animal))\n</CONTEXT>"], ["Premise: Erin is a person.\nFOL: Person(Erin)\n\nPremise: Fiona is a person.\nFOL: Person(Fiona)\n\nPremise: Gary is a person.\nFOL: Person(Gary)\n\nPremise: Harry is a person.\nFOL: Person(Harry)\n\nPremise: Erin is not cold.\nFOL: -Cold(Erin)\n\nPremise: Fiona is not cold.\nFOL: -Cold(Fiona)\n\nPremise: Gary is not cold.\nFOL: -Cold(Gary)\n\nPremise: Erin is not green.\nFOL: -Green(Erin)\n\nPremise: Fiona is not green.\nFOL: -Green(Fiona)\n\nPremise: Gary is not green.\nFOL: -Green(Gary)\n\nPremise: Erin is not round.\nFOL: -Round(Erin)\n\nPremise: Fiona is not round.\nFOL: -Round(Fiona)\n\nPremise: Gary is not round.\nFOL: -Round(Gary)\n\nPremise: Fiona is not nice.\nFOL: -Nice(Fiona)\n\nPremise: Gary is not nice.\nFOL: -Nice(Gary)\n\nPremise: Fiona is not quiet.\nFOL: -Quiet(Fiona)\n\nPremise: Gary is not quiet.\nFOL: -Quiet(Gary)\n\nPremise: Fiona is not white.\nFOL: -White(Fiona)\n\nPremise: Gary is not white.\nFOL: -White(Gary)\n\nPremise: Erin is not smart.\nFOL: -Smart(Erin)\n\nPremise: Fiona is not smart.\nFOL: -Smart(Fiona)\n\nPremise: Gary is not smart.\nFOL: -Smart(Gary)"], ["Premise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Charlie is red.\nFOL: Red(Charlie)\n\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\n\nPremise: Dave is red.\nFOL: Red(Dave)\n\nPremise: Dave is rough.\nFOL: Rough(Dave)\n\nPremise: Fiona is rough.\nFOL: Rough(Fiona)\n\nPremise: Harry is kind.\nFOL: Kind(Harry)\n\nPremise: Harry is rough.\nFOL: Rough(Harry)\n\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\n\nPremise: Furry things are kind.\nFOL: all x. (Furry(x) -> Kind(x))\n\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\n\nPremise: If Fiona is furry then Fiona is kind.\nFOL: (Furry(Fiona) -> Kind(Fiona))\n\nPremise: Rough, kind things are furry.\nFOL: all x. (Rough(x) & Kind(x) -> Furry(x))\n\nPremise: White things are kind.\nFOL: all x. (White(x) -> Kind(x))\n\nPremise: Fiona is white.\nFOL: White(Fiona)\n\nPremise: Charlie is cold.\nFOL: Cold(Charlie)\n\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\n\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Charlie is red.\nFOL: Red(Charlie)\n\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\n\nPremise: Dave is red.\nFOL: Red(Dave)\n\nPremise: Dave is rough.\nFOL: Rough(Dave)\n\nPremise: Fiona is rough.\nFOL: Rough(Fiona)\n\nPremise: Harry is kind.\nFOL: Kind(Harry)\n\nPremise: Harry is rough.\nFOL: Rough(Harry)\n\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\n\nPremise: Furry things are kind.\nFOL: all x. (Furry(x) -> Kind(x))\n\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\n\nPremise: If Fiona is furry then Fiona is kind.\nFOL: (Furry(Fiona) -> Kind(Fiona))\n\nPremise: Rough, kind things are furry.\nFOL: all x. (Rough(x) & Kind(x) -> Furry(x))\n\nPremise: White things are kind.\nFOL: all x. (White(x) -> Kind(x))\n\nPremise: Fiona is white.\nFOL: White(Fiona)\n\n<CONTEXT>\nPremise: Charlie is cold.\nFOL: Cold(Charlie)\n\nPremise: Charlie is furry.\nFOL: Furry(Charlie)\n\nPremise: Charlie is kind.\nFOL: Kind(Charlie)\n\nPremise: Charlie is nice.\nFOL: Nice(Charlie)\n\nPremise: Charlie is red.\nFOL: Red(Charlie)\n\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\n\nPremise: Dave is red.\nFOL: Red(Dave)\n\nPremise: Dave is rough.\nFOL: Rough(Dave)\n\nPremise: Fiona is rough.\nFOL: Rough(Fiona)\n\nPremise: Harry is kind.\nFOL: Kind(Harry)\n\nPremise: Harry is rough.\nFOL: Rough(Harry)\n\nPremise: Red things are nice.\nFOL: all x. (Red(x) -> Nice(x))\n\nPremise: All nice things are cold.\nFOL: all x. (Nice(x) -> Cold(x))\n\nPremise: Furry things are kind.\nFOL: all x. (Furry(x) -> Kind(x))\n\nPremise: If something is cold and rough then it is white.\nFOL: all x. (Cold(x) & Rough(x) -> White(x))\n\nPremise: If Fiona is furry then Fiona is kind.\nFOL: (Furry(Fiona) -> Kind(Fiona))\n\nPremise: Rough, kind things are furry.\nFOL: all x. (Rough(x) & Kind(x) -> Furry(x))\n\nPremise: White things are kind.\nFOL: all x. (White(x) -> Kind(x))\n\nPremise: Fiona is white.\nFOL: White(Fiona)\n</CONTEXT>"], ["Premise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: All red things are smart.\nFOL: all x. (Red(x) -> Smart(x))\n\nPremise: All quiet things are blue.\nFOL: all x. (Quiet(x) -> Blue(x))\n\nPremise: All blue, nice things are quiet.\nFOL: all x. (Blue(x) & Nice(x) -> Quiet(x))\n\nPremise: If something is furry then it is nice.\nFOL: all x. (Furry(x) -> Nice(x))\n\nPremise: Nice things are smart.\nFOL: all x. (Nice(x) -> Smart(x))\n\nPremise: If Harry is quiet then Harry is furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n\nPremise: If Charlie is smart and Charlie is cold then Charlie is furry.\nFOL: all x. (Smart(x) & Cold(x) -> Furry(x))\n\n<CONTEXT>\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Dave is a thing.\nFOL: Thing(Dave)\n\nPremise: Fiona is a thing.\nFOL: Thing(Fiona)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: All furry things are nice.\nFOL: all x. (Furry(x) -> Nice(x))\n</CONTEXT>"], ["Premise: Dave is kind.\nFOL: Kind(Dave)\n\nPremise: Erin is round.\nFOL: Round(Erin)\n\nPremise: Fiona is big.\nFOL: Big(Fiona)\n\nPremise: Fiona is not kind.\nFOL: -Kind(Fiona)\n\nPremise: Gary is young.\nFOL: Young(Gary)\n\n<CONTEXT>\nPremise: Dave is furry.\nFOL: Furry(Dave)\nPremise: Erin is green.\nFOL: Green(Erin)\nPremise: Fiona is furry.\nFOL: Furry(Fiona)\nPremise: Fiona is green.\nFOL: Green(Fiona)\nPremise: Fiona is round.\nFOL: Round(Fiona)\n</CONTEXT>"], ["Premise: The bald eagle is not a mouse.\nFOL: -Mouse(bald_eagle)\n\nPremise: The bear is not a bald eagle.\nFOL: -BaldEagle(bear)\n\nPremise: The bear is not a tiger.\nFOL: -Tiger(bear)\n\nPremise: The mouse is not a bear.\nFOL: -Bear(mouse)\n\nPremise: The tiger is not a bear.\nFOL: -Bear(tiger)\n\nPremise: If something is round then it is not a bear.\nFOL: all x. (Round(x) -> -Bear(x))\n\nPremise: If something eats the bear and it does not need the bald eagle then it is not a bear.\nFOL: all x. (Eats(x, bear) & -Needs(x, bald_eagle) -> -Bear(x))\n\nPremise: If something chases the bear then it is not a bear.\nFOL: all x. (Chases(x, bear) -> -Bear(x))\n\nPremise: If something chases the mouse and the mouse is red then it is not a bald eagle.\nFOL: all x. (Chases(x, mouse) & Red(mouse) -> -BaldEagle(x))\n\nPremise: If something is red then it is not a bald eagle.\nFOL: all x. (Red(x) -> -BaldEagle(x))\n\nPremise: If something is round and it needs the tiger then it is not a tiger.\nFOL: all x. (Round(x) & Needs(x, tiger) -> -Tiger(x))\n\nPremise: If something needs the bald eagle then it is not red.\nFOL: all x. (Needs(x, bald_eagle) -> -Red(x))\n\nPremise: If something needs the bald eagle and the bald eagle eats the tiger then it is not a mouse.\nFOL: all x. (Needs(x, bald_eagle) & Eats(bald_eagle, tiger) -> -Mouse(x))\n\nPremise: If something is round and it does not eat the mouse then it does not need the mouse.\nFOL: all x. (Round(x) & -Eats(x, mouse) -> -Needs(x, mouse))\n\nPremise: The mouse does not chase the bear.\nFOL: -Chases(mouse, bear)\n\n<CONTEXT>\nPremise: The bald eagle does not need the mouse.\nFOL: -Needs(bald_eagle, mouse)\nPremise: The bear does not eat the bald eagle.\nFOL: -Eats(bear, bald_eagle)\nPremise: The bear eats the tiger.\nFOL: Eats(bear, tiger)\nPremise: The mouse chases the bald eagle.\nFOL: Chases(mouse, bald_eagle)\nPremise: The mouse eats the bear.\nFOL: Eats(mouse, bear)\n</CONTEXT>"], ["Premise: Anne is rough.\nFOL: Rough(Anne)\nPremise: Anne is smart.\nFOL: Smart(Anne)\nPremise: Anne is white.\nFOL: White(Anne)\nPremise: Anne is quiet.\nFOL: Quiet(Anne)\nPremise: Erin is smart.\nFOL: Smart(Erin)\nPremise: Erin is rough.\nFOL: Rough(Erin)\nPremise: Erin is green.\nFOL: Green(Erin)\nPremise: Erin is big.\nFOL: Big(Erin)\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\nPremise: Gary is smart.\nFOL: Smart(Gary)\nPremise: Gary is rough.\nFOL: Rough(Gary)\nPremise: Gary is green.\nFOL: Green(Gary)\nPremise: Gary is big.\nFOL: Big(Gary)\nPremise: Gary is quiet.\nFOL: Quiet(Gary)\nPremise: Gary is white.\nFOL: White(Gary)\nPremise: Harry is rough.\nFOL: Rough(Harry)\nPremise: Harry is smart.\nFOL: Smart(Harry)\nPremise: Harry is white.\nFOL: White(Harry)\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\nPremise: If something is nice then it is rough.\nFOL: all x. (Nice(x) -> Rough(x))\nPremise: If something is green then it is rough.\nFOL: all x. (Green(x) -> Rough(x))\nPremise: If something is white and green then it is smart.\nFOL: all x. (White(x) & Green(x) -> Smart(x))\nPremise: If Anne is rough then Anne is green.\nFOL: Rough(Anne) -> Green(Anne)\nPremise: If something is big then it is quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: If something is nice and white then it is quiet.\nFOL: all x. (Nice(x) & White(x) -> Quiet(x))\nPremise: If something is green and smart then it is big.\nFOL: all x. (Green(x) & Smart(x) -> Big(x))\nPremise: If something is quiet and rough then it is white.\nFOL: all x. (Quiet(x) & Rough(x) -> White(x))\nPremise: Anne is green.\nFOL: Green(Anne)\nPremise: Erin is nice.\nFOL: Nice(Erin)\nPremise: Gary is nice.\nFOL: Nice(Gary)\nPremise: Harry is not nice.\nFOL: -Nice(Harry)"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: The dog is not a lion.\nFOL: -Lion(dog)\n\nPremise: The dog is not a mouse.\nFOL: -Mouse(dog)\n\nPremise: The dog is not a tiger.\nFOL: -Tiger(dog)\n\nPremise: The lion is not a dog.\nFOL: -Dog(lion)\n\nPremise: The lion is not a mouse.\nFOL: -Mouse(lion)\n\nPremise: The lion is not a tiger.\nFOL: -Tiger(lion)\n\nPremise: The mouse is not a dog.\nFOL: -Dog(mouse)\n\nPremise: The mouse is not a lion.\nFOL: -Lion(mouse)\n\nPremise: The mouse is not a tiger.\nFOL: -Tiger(mouse)\n\nPremise: The tiger is not a dog.\nFOL: -Dog(tiger)\n\nPremise: The tiger is not a lion.\nFOL: -Lion(tiger)\n\nPremise: The tiger is not a mouse.\nFOL: -Mouse(tiger)\n\nPremise: If someone visits the dog, then the dog is not a mouse.\nFOL: all x. (Visits(x, dog) -> -Mouse(x))\n\nPremise: If someone visits the dog, then the dog is not a tiger.\nFOL: all x. (Visits(x, dog) -> -Tiger(x))\n\nPremise: If someone visits the lion, then the lion is not a dog.\nFOL: all x. (Visits(x, lion) -> -Dog(x))\n\nPremise: If someone visits the lion, then the lion is not a mouse.\nFOL: all x. (Visits(x, lion) -> -Mouse(x))\n\nPremise: If someone visits the lion, then the lion is not a tiger.\nFOL: all x. (Visits(x, lion) -> -Tiger(x))\n\n<CONTEXT>\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The mouse is an animal.\nFOL: Animal(mouse)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n</CONTEXT>"], ["Premise: Bob is big.\nFOL: Big(Bob)\n\nPremise: Erin is big.\nFOL: Big(Erin)\n\nPremise: Harry is not furry.\nFOL: -Furry(Harry)\n\nPremise: Gary is furry.\nFOL: Furry(Gary)\n\nPremise: If someone is kind then they are furry.\nFOL: all x. (Kind(x) -> Furry(x))\n\n<CONTEXT>\nPremise: Bob is furry.\nFOL: Furry(Bob)\nPremise: Bob is kind.\nFOL: Kind(Bob)\nPremise: Bob is white.\nFOL: White(Bob)\nPremise: Erin is kind.\nFOL: Kind(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\nPremise: Gary is rough.\nFOL: Rough(Gary)\nPremise: Harry is not smart.\nFOL: -Smart(Harry)\nPremise: If Bob is rough then Bob is furry.\nFOL: all x. (Rough(x) -> Furry(x))\nPremise: If someone is white then they are young.\nFOL: all x. (White(x) -> Young(x))\nPremise: All big, furry people are not smart.\nFOL: all x. (Big(x) & Furry(x) -> -Smart(x))\nPremise: If someone is smart and rough then they are big.\nFOL: all x. all y. (Smart(x) & Rough(y) -> Big(x))\nPremise: If someone is young then they are big.\nFOL: all x. (Young(x) -> Big(x))\nPremise: If someone is rough then they are furry.\nFOL: all x. (Rough(x) -> Furry(x))\nPremise: All smart, young people are furry.\nFOL: all x. (Smart(x) & Young(x) -> Furry(x))\nPremise: If someone is furry and not rough then they are kind.\nFOL: all x. (Furry(x) & -Rough(x) -> Kind(x))\nPremise: If someone is rough and furry then they are white.\nFOL: all x. (Rough(x) & Furry(x) -> White(x))\nPremise: Gary is big.\nFOL: Big(Gary)\n</CONTEXT>"], ["Premise: The bear is not kind.\nFOL: -Kind(bear)\nPremise: The bear does not eat the dog.\nFOL: -Eat(bear, dog)\nPremise: The bear does not chase the cow.\nFOL: -Chase(bear, cow)\nPremise: The bear does not see the cat.\nFOL: -See(bear, cat)\nPremise: The bear does not eat the cat.\nFOL: -Eat(bear, cat)\nPremise: The cat does not eat the bear.\nFOL: -Eat(cat, bear)\nPremise: The cat does not chase the dog.\nFOL: -Chase(cat, dog)\nPremise: The cat does not see the dog.\nFOL: -See(cat, dog)\nPremise: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\nPremise: The cow does not eat the cat.\nFOL: -Eat(cow, cat)\nPremise: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nPremise: The cow does not see the dog.\nFOL: -See(cow, dog)\nPremise: The dog does not eat the cat.\nFOL: -Eat(dog, cat)\nPremise: The dog does not chase the bear.\nFOL: -Chase(dog, bear)\nPremise: The dog does not see the bear.\nFOL: -See(dog, bear)\nPremise: The dog does not eat the bear.\nFOL: -Eat(dog, bear)\nPremise: The dog does not chase the cow.\nFOL: -Chase(dog, cow)\nPremise: The dog does not see the cow.\nFOL: -See(dog, cow)\nPremise: The dog does not eat the cow.\nFOL: -Eat(dog, cow)\nPremise: The dog does not chase the cat.\nFOL: -Chase(dog, cat)\nPremise: The dog does not see the cat.\nFOL: -See(dog, cat)\nPremise: The cow does not eat the bear.\nFOL: -Eat(cow, bear)\nPremise: The bear is not red.\nFOL: -Red(bear)\nPremise: The cat is not green.\nFOL: -Green(cat)\nPremise: The cow is not green.\nFOL: -Green(cow)\nPremise: The dog is not green.\nFOL: -Green(dog)\nPremise: The bear is not red.\nFOL: -Red(bear)\nPremise: The cat is not red.\nFOL: -Red(cat)\nPremise: The cow is not red.\nFOL: -Red(cow)\nPremise: The bear is not nice.\nFOL: -Nice(bear)\nPremise: The cat is not nice.\nFOL: -Nice(cat)\nPremise: The cow is not nice.\nFOL: -Nice(cow)\nPremise: The dog is not nice.\nFOL: -Nice(dog)\nPremise: The bear is not kind.\nFOL: -Kind(bear)\nPremise: The cat is not kind.\nFOL: -Kind(cat)\nPremise: The cow is not kind.\nFOL: -Kind(cow)\nPremise: The dog is not kind.\nFOL: -Kind(dog)\nPremise: The bear is not green.\nFOL: -Green(bear)\nPremise: The cat is not green.\nFOL: -Green(cat)\nPremise: The cow is not green.\nFOL: -Green(cow)\nPremise: The dog is not green.\nFOL: -Green(dog)\nPremise: The bear does not eat the bear.\nFOL: -Eat(bear, bear)\nPremise: The cat does not eat the cat.\nFOL: -Eat(cat, cat)\nPremise: The cow does not eat the cow.\nFOL: -Eat(cow, cow)\nPremise: The dog does not eat the dog.\nFOL: -Eat(dog, dog)\nPremise: The bear does not chase the bear.\nFOL: -Chase(bear, bear)\nPremise: The cat does not chase the cat.\nFOL: -Chase(cat, cat)\nPremise: The cow does not chase the cow.\nFOL: -Chase(cow, cow)\nPremise: The dog does not chase the dog.\nFOL: -Chase(dog, dog)\nPremise: The bear does not see the bear.\nFOL: -See(bear, bear)\nPremise: The cat does not see the cat.\nFOL: -See(cat, cat)\nPremise: The cow does not see the cow.\nFOL: -See(cow, cow)\nPremise: The dog does not see the dog.\nFOL: -See(dog, dog)\nPremise: The bear does not eat the cow.\nFOL: -Eat(bear, cow)\nPremise: The bear does not eat the cat.\nFOL: -Eat(bear, cat)\nPremise: The cat does not eat the bear.\nFOL: -Eat(cat, bear)\nPremise: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\nPremise: The cow does not eat the dog.\nFOL: -Eat(cow, dog)\nPremise: The dog does not eat the cat.\nFOL: -Eat(dog, cat)\nPremise: The dog does not eat the bear.\nFOL: -Eat(dog, bear)\nPremise: The dog does not eat the cow.\nFOL: -Eat(dog, cow)\nPremise: The dog does not eat the dog.\nFOL: -Eat(dog, dog)\nPremise: The bear does not chase the cat.\nFOL: -Chase(bear, cat)\nPremise: The cat does not chase the bear.\nFOL: -Chase(cat, bear)\nPremise: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nPremise: The dog does not chase the bear.\nFOL: -Chase(dog, bear)\nPremise: The dog does not chase the cat.\nFOL: -Chase(dog, cat)\nPremise: The dog does not chase the cow.\nFOL: -Chase(dog, cow)\nPremise: The bear does not see the cat.\nFOL: -See(bear, cat)\nPremise: The cat does not see the bear.\nFOL: -See(cat, bear)\nPremise: The cow does not see the dog.\nFOL: -See(cow, dog)\nPremise: The dog does not see the bear.\nFOL: -See(dog, bear)\nPremise: The dog does not see the cat.\nFOL: -See(dog, cat)\nPremise: The dog does not see the cow.\nFOL: -See(dog, cow)\nPremise: The bear does not see the dog.\nFOL: -See(bear, dog)\nPremise: The cat does not see the dog.\nFOL: -See(cat, dog)\nPremise: The cow does not see the cat.\nFOL: -See(cow, cat)\nPremise: The dog does not see the cow.\nFOL: -See(dog, cow)\nPremise: The bear does not see the cow.\nFOL: -See(bear, cow)\nPremise: The cat does not see the cow.\nFOL: -See(cat, cow)\nPremise: The cow does not see the bear.\nFOL: -See(cow, bear)\nPremise: The dog does not see the bear.\nFOL: -See(dog, bear)\nPremise: The dog does not see the cat.\nFOL: -See(dog, cat)\nPremise: The bear does not see the cat.\nFOL: -See(bear, cat)\nPremise: The cat does not see the bear.\nFOL: -See(cat, bear)\nPremise: The cow does not see the dog.\nFOL: -See(cow, dog)\nPremise: The dog does not see the cow.\nFOL: -See(dog, cow)\nPremise: The bear does not eat the dog.\nFOL: -Eat(bear, dog)\nPremise: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\nPremise: The cow does not eat the cat.\nFOL: -Eat(cow, cat)\nPremise: The dog does not eat the bear.\nFOL: -Eat(dog, bear)\nPremise: The dog does not eat the cat.\nFOL: -Eat(dog, cat)\nPremise: The dog does not eat the cow.\nFOL: -Eat(dog, cow)\nPremise: The bear does not chase the cow.\nFOL: -Chase(bear, cow)\nPremise: The cat does not chase the dog.\nFOL: -Chase(cat, dog)\nPremise: The cow does not chase the cat.\nFOL: -Chase(cow, cat)\nPremise: The dog does not chase the bear.\nFOL: -Chase(dog, bear)\nPremise: The dog does not chase the cat.\nFOL: -Chase(dog, cat)\nPremise: The dog does not chase the cow.\nFOL: -Chase(dog, cow)\nPremise: The bear is not green.\nFOL: -Green(bear)\nPremise: The cat is not red.\nFOL: -Red(cat)\nPremise: The cow is not red.\nFOL: -Red(cow)\nPremise: The dog is not red.\nFOL: -Red(dog)\nPremise: The bear is not nice.\nFOL: -Nice(bear)\nPremise: The cat is not nice.\nFOL: -Nice(cat)\nPremise: The cow is not nice.\nFOL: -Nice(cow)\nPremise: The dog is not nice.\nFOL: -Nice(dog)\nPremise: The bear is not kind.\nFOL: -Kind(bear)\nPremise: The cat is not kind.\nFOL: -Kind(cat)\nPremise: The cow is not kind.\nFOL: -Kind(cow)\nPremise: The dog is not kind.\nFOL: -Kind(dog)\nPremise: The bear does not eat the bear.\nFOL: -Eat(bear, bear)\nPremise: The cat does not eat the cat.\nFOL: -Eat(cat, cat)\nPremise: The cow does not eat the cow.\nFOL: -Eat(cow, cow)\nPremise: The dog does not eat the dog.\nFOL: -Eat(dog, dog)\nPremise: The bear does not chase the bear.\nFOL: -Chase(bear, bear)\nPremise: The cat does not chase the cat.\nFOL: -Chase(cat, cat)\nPremise: The cow does not chase the cow.\nFOL: -Chase(cow, cow)\nPremise: The dog does not chase the dog.\nFOL: -Chase(dog, dog)\nPremise: The bear does not see the bear.\nFOL: -See(bear, bear)\nPremise: The cat does not see the cat.\nFOL: -See(cat, cat)\nPremise: The cow does not see the cow.\nFOL: -See(cow, cow)\nPremise: The dog does not see the dog.\nFOL: -See(dog, dog)\nPremise: The bear does not eat the cow.\nFOL: -Eat(bear, cow)\nPremise: The bear does not eat the cat.\nFOL: -Eat(bear, cat)\nPremise: The cat does not eat the bear.\nFOL: -Eat(cat, bear)\nPremise: The cat does not eat the dog.\nFOL: -Eat(cat, dog)\nPremise: The cow does not eat the dog.\nFOL: -Eat(cow, dog)\nPremise: The dog does not eat the cat.\nFOL: -Eat(dog, cat)\nPremise: The dog does not eat the bear.\nFOL: -Eat(dog, bear)\nPremise: The dog does not eat the cow.\nFOL: -Eat(dog, cow)\nPremise: The dog does not eat the dog.\nFOL: -Eat(dog, dog)\nPremise: The bear does not chase the cat.\nFOL: -Chase(bear, cat)\nPremise: The cat does not chase the bear.\nFOL: -Chase(cat, bear)\nPremise: The cow does not chase the dog.\nFOL: -Chase(cow, dog)\nPremise: The dog does not chase the bear.\nFOL: -Chase(dog, bear)\nPremise: The dog does not chase the cat.\nFOL: -Chase(dog, cat)\nPremise: The dog does not chase the cow.\nFOL: -Chase(dog, cow)\nPremise: The bear does not see the cat.\nFOL: -See(bear, cat)\nPremise: The cat does not see the bear.\nFOL: -See(cat, bear)\nPremise: The cow does not see the dog.\nFOL: -See(cow, dog)\nPremise: The dog does not see the bear.\nFOL: -See(dog, bear)\nPremise: The dog does not see the cat.\nFOL: -See(dog, cat)\nPremise: The dog does not see the cow.\nFOL: -See(dog, cow)\nPremise: The bear does not see the dog.\nFOL: -See(bear, dog)\nPremise: The cat does not see the dog.\nFOL: -See(cat, dog)\nPremise: The cow does not see the cat.\nFOL: -See(cow, cat)\nPremise: The dog does not see the cow.\nFOL: -See(dog, cow)\nPremise: The bear does not see the cow.\nFOL: -See(bear, cow"], ["Premise: Anne is not young.\nFOL: -Young(Anne)\nPremise: Anne is not green.\nFOL: -Green(Anne)\nPremise: Anne is not smart.\nFOL: -Smart(Anne)\nPremise: Dave is not cold.\nFOL: -Cold(Dave)\nPremise: Dave is not round.\nFOL: -Round(Dave)"], ["Premise: Fiona is nice.\nFOL: Nice(Fiona)\n\nPremise: Fiona is smart.\nFOL: Smart(Fiona)\n\nPremise: Fiona is young.\nFOL: Young(Fiona)\n\nPremise: Fiona is round.\nFOL: Round(Fiona)\n\nPremise: Gary is nice.\nFOL: Nice(Gary)\n\n<CONTEXT>\nPremise: Fiona is red.\nFOL: Red(Fiona)\nPremise: Fiona is white.\nFOL: White(Fiona)\nPremise: Fiona is cold.\nFOL: Cold(Fiona)\nPremise: Gary is cold.\nFOL: Cold(Gary)\nPremise: Gary is smart.\nFOL: Smart(Gary)\n</CONTEXT>"], ["Premise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: The lion is an animal.\nFOL: Animal(lion)\n\nPremise: The tiger is an animal.\nFOL: Animal(tiger)\n\nPremise: The dog is not a rabbit.\nFOL: -Rabbit(dog)\n\nPremise: The dog is not a lion.\nFOL: -Lion(dog)\n\nPremise: The dog is not a tiger.\nFOL: -Tiger(dog)\n\nPremise: The rabbit is not a dog.\nFOL: -Dog(rabbit)\n\nPremise: The rabbit is not a lion.\nFOL: -Lion(rabbit)\n\nPremise: The rabbit is not a tiger.\nFOL: -Tiger(rabbit)\n\nPremise: The lion is not a dog.\nFOL: -Dog(lion)\n\nPremise: The lion is not a rabbit.\nFOL: -Rabbit(lion)\n\nPremise: The lion is not a tiger.\nFOL: -Tiger(lion)\n\nPremise: The tiger is not a dog.\nFOL: -Dog(tiger)\n\nPremise: The tiger is not a rabbit.\nFOL: -Rabbit(tiger)\n\nPremise: The tiger is not a lion.\nFOL: -Lion(tiger)\n\nPremise: The dog is not red and nice.\nFOL: -Red(dog) & -Nice(dog)\n\nPremise: The rabbit is not red and nice.\nFOL: -Red(rabbit) & -Nice(rabbit)\n\nPremise: The lion is not red and nice.\nFOL: -Red(lion) & -Nice(lion)\n\nPremise: The tiger is not red and nice.\nFOL: -Red(tiger) & -Nice(tiger)\n\nPremise: If someone visits the dog then they are not round.\nFOL: all x. (Visits(x, dog) -> -Round(x))\n\nPremise: If someone visits the lion then they are not round.\nFOL: all x. (Visits(x, lion) -> -Round(x))\n\nPremise: If someone visits the rabbit then they are not round.\nFOL: all x. (Visits(x, rabbit) -> -Round(x))\n\nPremise: If someone visits the tiger then they are not round.\nFOL: all x. (Visits(x, tiger) -> -Round(x))\n\nPremise: If someone sees the dog then they are not round.\nFOL: all x. (Sees(x, dog) -> -Round(x))\n\nPremise: If someone sees the rabbit then they are not round.\nFOL: all x. (Sees(x, rabbit) -> -Round(x))\n\nPremise: If someone sees the lion then they are not round.\nFOL: all x. (Sees(x, lion) -> -Round(x))\n\nPremise: If someone sees the tiger then they are not round.\nFOL: all x. (Sees(x, tiger) -> -Round(x))\n\nPremise: If someone chases the dog then they are not round.\nFOL: all x. (Chases(x, dog) -> -Round(x))\n\nPremise: If someone chases the rabbit then they are not round.\nFOL: all x. (Chases(x, rabbit) -> -Round(x))\n\nPremise: If someone chases the lion then they are not round.\nFOL: all x. (Chases(x, lion) -> -Round(x))\n\nPremise: If someone chases the tiger then they are not round.\nFOL: all x. (Chases(x, tiger) -> -Round(x))\n\nPremise: If someone visits the dog then they are not cold.\nFOL: all x. (Visits(x, dog) -> -Cold(x))\n\nPremise: If someone visits the rabbit then they are not cold.\nFOL: all x. (Visits(x, rabbit) -> -Cold(x))\n\nPremise: If someone visits the lion then they are not cold.\nFOL: all x. (Visits(x, lion) -> -Cold(x))\n\nPremise: If someone visits the tiger then they are not cold.\nFOL: all x. (Visits(x, tiger) -> -Cold(x))\n\nPremise: If someone sees the dog then they are not cold.\nFOL: all x. (Sees(x, dog) -> -Cold(x))\n\nPremise: If someone sees the rabbit then they are not cold.\nFOL: all x. (Sees(x, rabbit) -> -Cold(x))\n\nPremise: If someone sees the lion then they are not cold.\nFOL: all x. (Sees(x, lion) -> -Cold(x))\n\nPremise: If someone sees the tiger then they are not cold.\nFOL: all x. (Sees(x, tiger) -> -Cold(x))\n\nPremise: If someone chases the dog then they are not cold.\nFOL: all x. (Chases(x, dog) -> -Cold(x))\n\nPremise: If someone chases the rabbit then they are not cold.\nFOL: all x. (Chases(x, rabbit) -> -Cold(x))\n\nPremise: If someone chases the lion then they are not cold.\nFOL: all x. (Chases(x, lion) -> -Cold(x))\n\nPremise: If someone chases the tiger then they are not cold.\nFOL: all x. (Chases(x, tiger) -> -Cold(x))\n\nPremise: If someone visits the dog then they are not red.\nFOL: all x. (Visits(x, dog) -> -Red(x))\n\nPremise: If someone visits the rabbit then they are not red.\nFOL: all x. (Visits(x, rabbit) -> -Red(x))\n\nPremise: If someone visits the lion then they are not red.\nFOL: all x. (Visits(x, lion) -> -Red(x))\n\nPremise: If someone visits the tiger then they are not red.\nFOL: all x. (Visits(x, tiger) -> -Red(x))\n\nPremise: If someone sees the dog then they are not red.\nFOL: all x. (Sees(x, dog) -> -Red(x))\n\nPremise: If someone sees the rabbit then they are not red.\nFOL: all x. (Sees(x, rabbit) -> -Red(x))\n\nPremise: If someone sees the lion then they are not red.\nFOL: all x. (Sees(x, lion) -> -Red(x))\n\nPremise: If someone sees the tiger then they are not red.\nFOL: all x. (Sees(x, tiger) -> -Red(x))\n\nPremise: If someone chases the dog then they are not red.\nFOL: all x. (Chases(x, dog) -> -Red(x))\n\nPremise: If someone chases the rabbit then they are not red.\nFOL: all x. (Chases(x, rabbit) -> -Red(x))\n\nPremise: If someone chases the lion then they are not red.\nFOL: all x. (Chases(x, lion) -> -Red(x))\n\nPremise: If someone chases the tiger then they are not red.\nFOL: all x. (Chases(x, tiger) -> -Red(x))\n\nPremise: If someone visits the dog then they are not nice.\nFOL: all x. (Visits(x, dog) -> -Nice(x))\n\nPremise: If someone visits the rabbit then they are not nice.\nFOL: all x. (Visits(x, rabbit) -> -Nice(x))\n\nPremise: If someone visits the lion then they are not nice.\nFOL: all x. (Visits(x, lion) -> -Nice(x))\n\nPremise: If someone visits the tiger then they are not nice.\nFOL: all x. (Visits(x, tiger) -> -Nice(x))\n\nPremise: If someone sees the dog then they are not nice.\nFOL: all x. (Sees(x, dog) -> -Nice(x))\n\nPremise: If someone sees the rabbit then they are not nice.\nFOL: all x. (Sees(x, rabbit) -> -Nice(x))\n\nPremise: If someone sees the lion then they are not nice.\nFOL: all x. (Sees(x, lion) -> -Nice(x))\n\nPremise: If someone sees the tiger then they are not nice.\nFOL: all x. (Sees(x, tiger) -> -Nice(x))\n\nPremise: If someone chases the dog then they are not nice.\nFOL: all x. (Chases(x, dog) -> -Nice(x))\n\nPremise: If someone chases the rabbit then they are not nice.\nFOL: all x. (Chases(x, rabbit) -> -Nice(x))\n\nPremise: If someone chases the lion then they are not nice.\nFOL: all x. (Chases(x, lion) -> -Nice(x))\n\nPremise: If someone chases the tiger then they are not nice.\nFOL: all x. (Chases(x, tiger) -> -Nice(x))\n\n<CONTEXT>\nPremise: The dog chases the rabbit.\nFOL: Chases(dog, rabbit)\n\nPremise: The dog is red.\nFOL: Red(dog)\n\nPremise: The dog sees the lion.\nFOL: Sees(dog, lion)\n\nPremise: The lion chases the rabbit.\nFOL: Chases(lion, rabbit)\n\nPremise: The lion sees the dog.\nFOL: Sees(lion, dog)\n</CONTEXT>"], ["Premise: The bear is an animal.\nFOL: Animal(bear)\n\nPremise: The cow is an animal.\nFOL: Animal(cow)\n\nPremise: The dog is an animal.\nFOL: Animal(dog)\n\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\n\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\n\nPremise: If something is round, then it is not square.\nFOL: all x. (Round(x) -> -Square(x))\n\nPremise: If something is red, then it is not blue.\nFOL: all x. (Red(x) -> -Blue(x))\n\nPremise: If something is cold, then it is not hot.\nFOL: all x. (Cold(x) -> -Hot(x))\n\nPremise: If something is an animal, then it is not a plant.\nFOL: all x. (Animal(x) -> -Plant(x))\n\nPremise: If something is an animal, then it is not an object.\nFOL: all x. (Animal(x) -> -Object(x))\n\n<CONTEXT>\nPremise: The bear is an animal.\nFOL: Animal(bear)\nPremise: The cow is an animal.\nFOL: Animal(cow)\nPremise: The dog is an animal.\nFOL: Animal(dog)\nPremise: The rabbit is an animal.\nFOL: Animal(rabbit)\nPremise: If something is big, then it is not small.\nFOL: all x. (Big(x) -> -Small(x))\n</CONTEXT>"], ["Premise: Anne is a thing.\nFOL: Thing(Anne)\n\nPremise: Charlie is a thing.\nFOL: Thing(Charlie)\n\nPremise: Erin is a thing.\nFOL: Thing(Erin)\n\nPremise: Harry is a thing.\nFOL: Thing(Harry)\n\nPremise: Blue things are things.\nFOL: all x. (Blue(x) -> Thing(x))\n\nPremise: Nice things are things.\nFOL: all x. (Nice(x) -> Thing(x))\n\nPremise: White things are things.\nFOL: all x. (White(x) -> Thing(x))\n\nPremise: Round things are things.\nFOL: all x. (Round(x) -> Thing(x))\n\nPremise: Young things are things.\nFOL: all x. (Young(x) -> Thing(x))\n\nPremise: Red things are things.\nFOL: all x. (Red(x) -> Thing(x))\n\nPremise: Rough things are things.\nFOL: all x. (Rough(x) -> Thing(x))\n\nPremise: Blue things are nice.\nFOL: all x. (Blue(x) -> Nice(x))\n\nPremise: Blue things are white.\nFOL: all x. (Blue(x) -> White(x))\n\nPremise: Blue things are round.\nFOL: all x. (Blue(x) -> Round(x))\n\nPremise: Blue things are young.\nFOL: all x. (Blue(x) -> Young(x))\n\nPremise: Red things are round.\nFOL: all x. (Red(x) -> Round(x))\n\nPremise: Red things are young.\nFOL: all x. (Red(x) -> Young(x))\n\nPremise: Nice things are round.\nFOL: all x. (Nice(x) -> Round(x))\n\nPremise: Nice things are young.\nFOL: all x. (Nice(x) -> Young(x))\n\nPremise: White things are round.\nFOL: all x. (White(x) -> Round(x))\n\nPremise: White things are young.\nFOL: all x. (White(x) -> Young(x))\n\nPremise: Rough things are round.\nFOL: all x. (Rough(x) -> Round(x))\n\nPremise: Rough things are young.\nFOL: all x. (Rough(x) -> Young(x))\n\nPremise: Round things are young.\nFOL: all x. (Round(x) -> Young(x))\n\nPremise: If something is round and rough, then it is young.\nFOL: all x. (Round(x) & Rough(x) -> Young(x))\n\nPremise: If something is young, then it is round and rough.\nFOL: all x. (Young(x) -> (Round(x) & Rough(x)))\n\nPremise: If something is nice, then it is round and young.\nFOL: all x. (Nice(x) -> (Round(x) & Young(x)))\n\nPremise: If something is white, then it is round and young.\nFOL: all x. (White(x) -> (Round(x) & Young(x)))\n\nPremise: If something is blue, then it is round and young.\nFOL: all x. (Blue(x) -> (Round(x) & Young(x)))\n\nPremise: If something is red, then it is round and young.\nFOL: all x. (Red(x) -> (Round(x) & Young(x)))\n\n<CONTEXT>\nPremise: Anne is rough.\nFOL: Rough(Anne)\nPremise: Charlie is red.\nFOL: Red(Charlie)\nPremise: Charlie is rough.\nFOL: Rough(Charlie)\nPremise: Erin is blue.\nFOL: Blue(Erin)\nPremise: Erin is white.\nFOL: White(Erin)\n</CONTEXT>"], ["Premise: Bob is a person.\nFOL: Person(Bob)\nPremise: Charlie is a person.\nFOL: Person(Charlie)\nPremise: Gary is a person.\nFOL: Person(Gary)\nPremise: Harry is a person.\nFOL: Person(Harry)\nPremise: Bob is not round.\nFOL: -Round(Bob)\nPremise: Bob is not blue.\nFOL: -Blue(Bob)\nPremise: Bob is not rough.\nFOL: -Rough(Bob)\nPremise: Charlie is not nice.\nFOL: -Nice(Charlie)\nPremise: Charlie is not blue.\nFOL: -Blue(Charlie)\nPremise: Charlie is not rough.\nFOL: -Rough(Charlie)\nPremise: Gary is not round.\nFOL: -Round(Gary)\nPremise: Gary is not rough.\nFOL: -Rough(Gary)\nPremise: Harry is not blue.\nFOL: -Blue(Harry)\nPremise: Harry is not nice.\nFOL: -Nice(Harry)\nPremise: Harry is not rough.\nFOL: -Rough(Harry)\nPremise: All quiet people are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All round people are young.\nFOL: all x. (Round(x) -> Young(x))\nPremise: All big people are young.\nFOL: all x. (Big(x) -> Young(x))\nPremise: All young people are rough.\nFOL: all x. (Young(x) -> Rough(x))\nPremise: All blue people are round.\nFOL: all x. (Blue(x) -> Round(x))\nPremise: All rough people are quiet.\nFOL: all x. (Rough(x) -> Quiet(x))\nPremise: If someone is big, then they are rough.\nFOL: all x. (Big(x) -> Rough(x))\nPremise: If someone is quiet and big, then they are round.\nFOL: all x. (Quiet(x) & Big(x) -> Round(x))\nPremise: If Charlie is nice and Charlie is big, then Charlie is blue.\nFOL: (Nice(Charlie) & Big(Charlie)) -> Blue(Charlie)\nPremise: All nice people are big.\nFOL: all x. (Nice(x) -> Big(x))\nPremise: Bob is not young.\nFOL: -Young(Bob)\nPremise: Charlie is not young.\nFOL: -Young(Charlie)\nPremise: Gary is not young.\nFOL: -Young(Gary)\nPremise: Harry is not young.\nFOL: -Young(Harry)\nPremise: Bob is not quiet.\nFOL: -Quiet(Bob)\nPremise: Charlie is not round.\nFOL: -Round(Charlie)\nPremise: Gary is not blue.\nFOL: -Blue(Gary)\nPremise: Harry is not nice.\nFOL: -Nice(Harry)\nPremise: Harry is not quiet.\nFOL: -Quiet(Harry)\nPremise: Bob is not rough.\nFOL: -Rough(Bob)\nPremise: Charlie is not rough.\nFOL: -Rough(Charlie)\nPremise: Gary is not rough.\nFOL: -Rough(Gary)\nPremise: Harry is not rough.\nFOL: -Rough(Harry)\nPremise: Bob is not big.\nFOL: -Big(Bob)\nPremise: Charlie is not big.\nFOL: -Big(Charlie)\nPremise: Gary is not big.\nFOL: -Big(Gary)\nPremise: Harry is not big.\nFOL: -Big(Harry)\nPremise: Bob is not blue.\nFOL: -Blue(Bob)"], ["Premise: The bear is not cold.\nFOL: -Cold(bear)\nPremise: The bear is not rough.\nFOL: -Rough(bear)\nPremise: The bear does not need the cat.\nFOL: -Needs(bear, cat)\nPremise: The bear does not need the mouse.\nFOL: -Needs(bear, mouse)\nPremise: The bear does not see the cat.\nFOL: -Sees(bear, cat)\nPremise: The bear does not see the mouse.\nFOL: -Sees(bear, mouse)\nPremise: The bear does not visit the cat.\nFOL: -Visits(bear, cat)\nPremise: The bear does not visit the mouse.\nFOL: -Visits(bear, mouse)\nPremise: The cat is not nice.\nFOL: -Nice(cat)\nPremise: The cat does not see the bear.\nFOL: -Sees(cat, bear)\nPremise: The cat does not visit the mouse.\nFOL: -Visits(cat, mouse)\nPremise: The mouse does not visit the cat.\nFOL: -Visits(mouse, cat)\nPremise: The mouse does not visit the tiger.\nFOL: -Visits(mouse, tiger)\nPremise: The tiger is not nice.\nFOL: -Nice(tiger)\nPremise: The tiger does not see the bear.\nFOL: -Sees(tiger, bear)\nPremise: The tiger does not see the cat.\nFOL: -Sees(tiger, cat)\nPremise: The tiger does not visit the bear.\nFOL: -Visits(tiger, bear)\nPremise: The tiger does not visit the mouse.\nFOL: -Visits(tiger, mouse)\nPremise: If someone is not nice, then they are not kind.\nFOL: all x. (-Nice(x) -> -Kind(x))\nPremise: If someone is not nice, then they are not rough.\nFOL: all x. (-Nice(x) -> -Rough(x))\nPremise: If someone is not nice, then they are not cold.\nFOL: all x. (-Nice(x) -> -Cold(x))\nPremise: If someone is not nice, then they do not need the mouse.\nFOL: all x. (-Nice(x) -> -Needs(x, mouse))\nPremise: If someone is not nice, then they do not see the bear.\nFOL: all x. (-Nice(x) -> -Sees(x, bear))\nPremise: If someone is not nice, then they do not visit the mouse.\nFOL: all x. (-Nice(x) -> -Visits(x, mouse))\nPremise: If someone is not nice, then they do not visit the cat.\nFOL: all x. (-Nice(x) -> -Visits(x, cat))\nPremise: If someone is not nice, then they do not visit the bear.\nFOL: all x. (-Nice(x) -> -Visits(x, bear))\nPremise: If someone is not kind, then they do not need the mouse.\nFOL: all x. (-Kind(x) -> -Needs(x, mouse))\nPremise: If someone is not kind, then they do not see the bear.\nFOL: all x. (-Kind(x) -> -Sees(x, bear))\nPremise: If someone is not kind, then they do not visit the mouse.\nFOL: all x. (-Kind(x) -> -Visits(x, mouse))\nPremise: If someone is not kind, then they do not visit the cat.\nFOL: all x. (-Kind(x) -> -Visits(x, cat))\nPremise: If someone is not kind, then they do not visit the bear.\nFOL: all x. (-Kind(x) -> -Visits(x, bear))\nPremise: If someone is not rough, then they do not need the mouse.\nFOL: all x. (-Rough(x) -> -Needs(x, mouse))\nPremise: If someone is not rough, then they do not see the bear.\nFOL: all x. (-Rough(x) -> -Sees(x, bear))\nPremise: If someone is not rough, then they do not visit the mouse.\nFOL: all x. (-Rough(x) -> -Visits(x, mouse))\nPremise: If someone is not rough, then they do not visit the cat.\nFOL: all x. (-Rough(x) -> -Visits(x, cat))\nPremise: If someone is not rough, then they do not visit the bear.\nFOL: all x. (-Rough(x) -> -Visits(x, bear))\nPremise: If someone is not cold, then they do not need the mouse.\nFOL: all x. (-Cold(x) -> -Needs(x, mouse))\nPremise: If someone is not cold, then they do not see the bear.\nFOL: all x. (-Cold(x) -> -Sees(x, bear))\nPremise: If someone is not cold, then they do not visit the mouse.\nFOL: all x. (-Cold(x) -> -Visits(x, mouse))\nPremise: If someone is not cold, then they do not visit the cat.\nFOL: all x. (-Cold(x) -> -Visits(x, cat))\nPremise: If someone is not cold, then they do not visit the bear.\nFOL: all x. (-Cold(x) -> -Visits(x, bear))\nPremise: If someone does not need the mouse, then they do not see the bear.\nFOL: all x. (-Needs(x, mouse) -> -Sees(x, bear))\nPremise: If someone does not need the mouse, then they do not visit the cat.\nFOL: all x. (-Needs(x, mouse) -> -Visits(x, cat))\nPremise: If someone does not need the mouse, then they do not visit the bear.\nFOL: all x. (-Needs(x, mouse) -> -Visits(x, bear))\nPremise: If someone does not see the bear, then they do not visit the cat.\nFOL: all x. (-Sees(x, bear) -> -Visits(x, cat))\nPremise: If someone does not see the bear, then they do not visit the mouse.\nFOL: all x. (-Sees(x, bear) -> -Visits(x, mouse))\nPremise: If someone does not see the bear, then they are not rough.\nFOL: all x. (-Sees(x, bear) -> -Rough(x))\nPremise: If someone does not see the bear, then they are not cold.\nFOL: all x. (-Sees(x, bear) -> -Cold(x))\nPremise: If someone does not visit the mouse, then they do not visit the cat.\nFOL: all x. (-Visits(x, mouse) -> -Visits(x, cat))\nPremise: If someone does not visit the mouse, then they do not visit the bear.\nFOL: all x. (-Visits(x, mouse) -> -Visits(x, bear))\nPremise: If someone does not visit the cat, then they do not visit the bear.\nFOL: all x. (-Visits(x, cat) -> -Visits(x, bear))\nPremise: If someone visits the bear, then they see the cat.\nFOL: all x. (Visits(x, bear) -> Sees(x, cat))\nPremise: If someone visits the bear, then they see the mouse.\nFOL: all x. (Visits(x, bear) -> Sees(x, mouse))\nPremise: If someone visits the bear, then they are not cold.\nFOL: all x. (Visits(x, bear) -> -Cold(x))\nPremise: If someone visits the bear, then they are not rough.\nFOL: all x. (Visits(x, bear) -> -Rough(x))\nPremise: If someone visits the bear, then they are not nice.\nFOL: all x. (Visits(x, bear) -> -Nice(x))\nPremise: If someone visits the bear, then they do not need the mouse.\nFOL: all x. (Visits(x, bear) -> -Needs(x, mouse))\nPremise: If someone visits the bear, then they do not see the bear.\nFOL: all x. (Visits(x, bear) -> -Sees(x, bear))\nPremise: If someone visits the bear, then they do not visit the cat.\nFOL: all x. (Visits(x, bear) -> -Visits(x, cat))\nPremise: If someone visits the bear, then they do not visit the mouse.\nFOL: all x. (Visits(x, bear) -> -Visits(x, mouse))\nPremise: If someone visits the cat, then they see the bear.\nFOL: all x. (Visits(x, cat) -> Sees(x, bear))\nPremise: If someone visits the cat, then they see the mouse.\nFOL: all x. (Visits(x, cat) -> Sees(x, mouse))\nPremise: If someone visits the cat, then they are not cold.\nFOL: all x. (Visits(x, cat) -> -Cold(x))\nPremise: If someone visits the cat, then they are not rough.\nFOL: all x. (Visits(x, cat) -> -Rough(x))\nPremise: If someone visits the cat, then they are not nice.\nFOL: all x. (Visits(x, cat) -> -Nice(x))\nPremise: If someone visits the cat, then they do not need the mouse.\nFOL: all x. (Visits(x, cat) -> -Needs(x, mouse))\nPremise: If someone visits the cat, then they do not see the cat.\nFOL: all x. (Visits(x, cat) -> -Sees(x, cat))\nPremise: If someone visits the cat, then they do not visit the bear.\nFOL: all x. (Visits(x, cat) -> -Visits(x, bear))\nPremise: If someone visits the cat, then they do not visit the mouse.\nFOL: all x. (Visits(x, cat) -> -Visits(x, mouse))\nPremise: If someone visits the mouse, then they see the bear.\nFOL: all x. (Visits(x, mouse) -> Sees(x, bear))\nPremise: If someone visits the mouse, then they see the cat.\nFOL: all x. (Visits(x, mouse) -> Sees(x, cat))\nPremise: If someone visits the mouse, then they are not cold.\nFOL: all x. (Visits(x, mouse) -> -Cold(x))\nPremise: If someone visits the mouse, then they are not rough.\nFOL: all x. (Visits(x, mouse) -> -Rough(x))\nPremise: If someone visits the mouse, then they are not nice.\nFOL: all x. (Visits(x, mouse) -> -Nice(x))\nPremise: If someone visits the mouse, then they do not need the mouse.\nFOL: all x. (Visits(x, mouse) -> -Needs(x, mouse))\nPremise: If someone visits the mouse, then they do not see the mouse.\nFOL: all x. (Visits(x, mouse) -> -Sees(x, mouse))\nPremise: If someone visits the mouse, then they do not visit the bear.\nFOL: all x. (Visits(x, mouse) -> -Visits(x, bear))\nPremise: If someone visits the mouse, then they do not visit the cat.\nFOL: all x. (Visits(x, mouse) -> -Visits(x, cat))\nPremise: If someone visits the tiger, then they see the bear.\nFOL: all x. (Visits(x, tiger) -> Sees(x, bear))\nPremise: If someone visits the tiger, then they see the cat.\nFOL: all x. (Visits(x, tiger) -> Sees(x, cat))\nPremise: If someone visits the tiger, then they are not cold.\nFOL: all x. (Visits(x, tiger) -> -Cold(x))\nPremise: If someone visits the tiger, then they are not rough.\nFOL: all x. (Visits(x, tiger) -> -Rough(x))\nPremise: If someone visits the tiger, then they are not nice.\nFOL: all x. (Visits(x, tiger) -> -Nice(x))\nPremise: If someone visits the tiger, then they do not need the mouse.\nFOL: all x. (Visits(x, tiger) -> -Needs(x, mouse))\nPremise: If someone visits the tiger, then they do not see the tiger.\nFOL: all x. (Visits(x, tiger) -> -Sees(x, tiger))\nPremise: If someone visits the tiger, then they do not visit the bear.\nFOL: all x. (Visits(x, tiger) -> -Visits(x, bear))\nPremise: If someone visits the tiger, then they do not visit the cat.\nFOL: all x. (Visits(x, tiger) -> -Visits(x, cat))\nPremise: If someone sees the bear, then they visit the cat.\nFOL: all x. (Sees(x, bear) -> Visits(x, cat))\nPremise: If someone sees the bear, then they visit the mouse.\nFOL: all x. (Sees(x, bear) -> Visits(x, mouse))\nPremise: If someone sees the bear, then they are not cold.\nFOL: all x. (Sees(x, bear) -> -Cold(x))\nPremise: If someone sees the bear, then they are not rough.\nFOL: all x. (Sees(x, bear) -> -Rough(x))\nPremise: If someone sees the bear, then they are not nice.\nFOL: all x. (Sees(x, bear) ->"], ["Premise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: The cow does not like the rabbit.\nFOL: -Likes(Cow, Rabbit)\n\nPremise: The squirrel does not like the cow.\nFOL: -Likes(Squirrel, Cow)\n\nPremise: The squirrel does not like the rabbit.\nFOL: -Likes(Squirrel, Rabbit)\n\nPremise: The bald eagle does not like the cow.\nFOL: -Likes(BaldEagle, Cow)\n\nPremise: The bald eagle does not like the squirrel.\nFOL: -Likes(BaldEagle, Squirrel)\n\nPremise: The bald eagle does not like the rabbit.\nFOL: -Likes(BaldEagle, Rabbit)\n\nPremise: The cow does not chase the squirrel.\nFOL: -Chases(Cow, Squirrel)\n\nPremise: The rabbit does not chase the squirrel.\nFOL: -Chases(Rabbit, Squirrel)\n\nPremise: The rabbit does not chase the cow.\nFOL: -Chases(Rabbit, Cow)\n\nPremise: The squirrel does not chase the cow.\nFOL: -Chases(Squirrel, Cow)\n\nPremise: The squirrel does not chase the rabbit.\nFOL: -Chases(Squirrel, Rabbit)\n\nPremise: The cow is not round.\nFOL: -Round(Cow)\n\nPremise: The rabbit is not round.\nFOL: -Round(Rabbit)\n\nPremise: The squirrel is not round.\nFOL: -Round(Squirrel)\n\nPremise: The cow is not big.\nFOL: -Big(Cow)\n\nPremise: The squirrel is not big.\nFOL: -Big(Squirrel)\n\nPremise: The bald eagle is not big.\nFOL: -Big(BaldEagle)\n\nPremise: The cow is not green.\nFOL: -Green(Cow)\n\nPremise: The rabbit is not green.\nFOL: -Green(Rabbit)\n\nPremise: The squirrel is not green.\nFOL: -Green(Squirrel)\n\nPremise: The bald eagle is not green.\nFOL: -Green(BaldEagle)\n\nPremise: If someone chases the bald eagle and they are big then they do not like the cow.\nFOL: all x. (Chases(x, BaldEagle) & Big(x) -> -Likes(x, Cow))\n\nPremise: If someone chases the cow and they are round then they are kind.\nFOL: all x. (Chases(x, Cow) & Round(x) -> Kind(x))\n\nPremise: If the cow likes the rabbit and the rabbit likes the bald eagle then the bald eagle needs the rabbit.\nFOL: all x. (Likes(Cow, Rabbit) & Likes(Rabbit, BaldEagle) -> Needs(BaldEagle, Rabbit))\n\nPremise: If someone likes the cow then they are green.\nFOL: all x. (Likes(x, Cow) -> Green(x))\n\nPremise: If someone is big and they need the bald eagle then they chase the cow.\nFOL: all x. (Big(x) & Needs(x, BaldEagle) -> Chases(x, Cow))\n\nPremise: If someone likes the bald eagle then they do not chase the bald eagle.\nFOL: all x. (Likes(x, BaldEagle) -> -Chases(x, BaldEagle))\n\nPremise: If someone needs the rabbit then the rabbit likes the cow.\nFOL: all x. (Needs(x, Rabbit) -> Likes(Rabbit, Cow))\n\nPremise: If the squirrel needs the cow and the cow chases the squirrel then the squirrel does not like the cow.\nFOL: all x. (Needs(x, Cow) & Chases(Cow, Squirrel) -> -Likes(Squirrel, Cow))\n\nPremise: If someone is green then they need the bald eagle.\nFOL: all x. (Green(x) -> Needs(x, BaldEagle))\n\nPremise: The bald eagle does not like the rabbit.\nFOL: -Likes(BaldEagle, Rabbit)\n\n<CONTEXT>\nPremise: The bald eagle is a bird.\nFOL: Bird(BaldEagle)\n\nPremise: The cow is an animal.\nFOL: Animal(Cow)\n\nPremise: The rabbit is an animal.\nFOL: Animal(Rabbit)\n\nPremise: The squirrel is an animal.\nFOL: Animal(Squirrel)\n\nPremise: The cow does not like the rabbit.\nFOL: -Likes(Cow, Rabbit)\n</CONTEXT>"], ["Premise: The bald eagle is not young.\nFOL: -Young(BaldEagle)\nPremise: The bald eagle is not green.\nFOL: -Green(BaldEagle)\nPremise: The bald eagle is not round.\nFOL: -Round(BaldEagle)\nPremise: The bald eagle does not eat the lion.\nFOL: -Eats(BaldEagle, Lion)\nPremise: The bald eagle does not eat the dog.\nFOL: -Eats(BaldEagle, Dog)\nPremise: The bald eagle does not eat the rabbit.\nFOL: -Eats(BaldEagle, Rabbit)\nPremise: The bald eagle does not like itself.\nFOL: -Likes(BaldEagle, BaldEagle)\nPremise: The bald eagle does not like the bald eagle.\nFOL: -Likes(BaldEagle, BaldEagle)\nPremise: The bald eagle does not like the dog.\nFOL: -Likes(BaldEagle, Dog)\nPremise: The bald eagle does not like the lion.\nFOL: -Likes(BaldEagle, Lion)\nPremise: The bald eagle does not like the rabbit.\nFOL: -Likes(BaldEagle, Rabbit)\nPremise: The bald eagle does not chase itself.\nFOL: -Chases(BaldEagle, BaldEagle)\nPremise: The bald eagle does not chase the bald eagle.\nFOL: -Chases(BaldEagle, BaldEagle)\nPremise: The bald eagle does not chase the dog.\nFOL: -Chases(BaldEagle, Dog)\nPremise: The bald eagle does not chase the lion.\nFOL: -Chases(BaldEagle, Lion)\nPremise: The bald eagle does not chase the rabbit.\nFOL: -Chases(BaldEagle, Rabbit)\nPremise: The dog is not round.\nFOL: -Round(Dog)\nPremise: The dog does not eat the lion.\nFOL: -Eats(Dog, Lion)\nPremise: The dog does not eat the dog.\nFOL: -Eats(Dog, Dog)\nPremise: The dog does not eat the rabbit.\nFOL: -Eats(Dog, Rabbit)\nPremise: The dog does not like itself.\nFOL: -Likes(Dog, Dog)\nPremise: The dog does not like the bald eagle.\nFOL: -Likes(Dog, BaldEagle)\nPremise: The dog does not like the dog.\nFOL: -Likes(Dog, Dog)\nPremise: The dog does not like the lion.\nFOL: -Likes(Dog, Lion)\nPremise: The dog does not like the rabbit.\nFOL: -Likes(Dog, Rabbit)\nPremise: The dog does not chase itself.\nFOL: -Chases(Dog, Dog)\nPremise: The dog does not chase the bald eagle.\nFOL: -Chases(Dog, BaldEagle)\nPremise: The dog does not chase the dog.\nFOL: -Chases(Dog, Dog)\nPremise: The dog does not chase the lion.\nFOL: -Chases(Dog, Lion)\nPremise: The dog does not chase the rabbit.\nFOL: -Chases(Dog, Rabbit)\nPremise: The lion is not young.\nFOL: -Young(Lion)\nPremise: The lion is not green.\nFOL: -Green(Lion)\nPremise: The lion is not round.\nFOL: -Round(Lion)\nPremise: The lion does not eat itself.\nFOL: -Eats(Lion, Lion)\nPremise: The lion does not eat the bald eagle.\nFOL: -Eats(Lion, BaldEagle)\nPremise: The lion does not eat the dog.\nFOL: -Eats(Lion, Dog)\nPremise: The lion does not eat the rabbit.\nFOL: -Eats(Lion, Rabbit)\nPremise: The lion does not like itself.\nFOL: -Likes(Lion, Lion)\nPremise: The lion does not like the bald eagle.\nFOL: -Likes(Lion, BaldEagle)\nPremise: The lion does not like the dog.\nFOL: -Likes(Lion, Dog)\nPremise: The lion does not like the lion.\nFOL: -Likes(Lion, Lion)\nPremise: The lion does not like the rabbit.\nFOL: -Likes(Lion, Rabbit)\nPremise: The lion does not chase itself.\nFOL: -Chases(Lion, Lion)\nPremise: The lion does not chase the bald eagle.\nFOL: -Chases(Lion, BaldEagle)\nPremise: The lion does not chase the dog.\nFOL: -Chases(Lion, Dog)\nPremise: The lion does not chase the lion.\nFOL: -Chases(Lion, Lion)\nPremise: The lion does not chase the rabbit.\nFOL: -Chases(Lion, Rabbit)\nPremise: The rabbit is not young.\nFOL: -Young(Rabbit)\nPremise: The rabbit is not green.\nFOL: -Green(Rabbit)\nPremise: The rabbit is not round.\nFOL: -Round(Rabbit)\nPremise: The rabbit does not eat itself.\nFOL: -Eats(Rabbit, Rabbit)\nPremise: The rabbit does not eat the bald eagle.\nFOL: -Eats(Rabbit, BaldEagle)\nPremise: The rabbit does not eat the dog.\nFOL: -Eats(Rabbit, Dog)\nPremise: The rabbit does not eat the lion.\nFOL: -Eats(Rabbit, Lion)\nPremise: The rabbit does not like itself.\nFOL: -Likes(Rabbit, Rabbit)\nPremise: The rabbit does not like the bald eagle.\nFOL: -Likes(Rabbit, BaldEagle)\nPremise: The rabbit does not like the dog.\nFOL: -Likes(Rabbit, Dog)\nPremise: The rabbit does not like the lion.\nFOL: -Likes(Rabbit, Lion)\nPremise: The rabbit does not chase itself.\nFOL: -Chases(Rabbit, Rabbit)\nPremise: The rabbit does not chase the bald eagle.\nFOL: -Chases(Rabbit, BaldEagle)\nPremise: The rabbit does not chase the dog.\nFOL: -Chases(Rabbit, Dog)\nPremise: The rabbit does not chase the lion.\nFOL: -Chases(Rabbit, Lion)\nPremise: The rabbit does not chase the rabbit.\nFOL: -Chases(Rabbit, Rabbit)"], ["Premise: Bob is quiet.\nFOL: Quiet(Bob)\nPremise: Charlie is quiet.\nFOL: Quiet(Charlie)\nPremise: Erin is quiet.\nFOL: Quiet(Erin)\nPremise: Harry is quiet.\nFOL: Quiet(Harry)\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\nPremise: All furry things are quiet.\nFOL: all x. (Furry(x) -> Quiet(x))\nPremise: All quiet things are green.\nFOL: all x. (Quiet(x) -> Green(x))\nPremise: All green things are quiet.\nFOL: all x. (Green(x) -> Quiet(x))\nPremise: All quiet things are nice.\nFOL: all x. (Quiet(x) -> Nice(x))\nPremise: All nice things are quiet.\nFOL: all x. (Nice(x) -> Quiet(x))\nPremise: All quiet things are red.\nFOL: all x. (Quiet(x) -> Red(x))\nPremise: All red things are quiet.\nFOL: all x. (Red(x) -> Quiet(x))\nPremise: All quiet things are young.\nFOL: all x. (Quiet(x) -> Young(x))\nPremise: All young things are quiet.\nFOL: all x. (Young(x) -> Quiet(x))\nPremise: All quiet things are big.\nFOL: all x. (Quiet(x) -> Big(x))\nPremise: All big things are quiet.\nFOL: all x. (Big(x) -> Quiet(x))\nPremise: All quiet things are furry.\nFOL: all x. (Quiet(x) -> Furry(x))\n"]]